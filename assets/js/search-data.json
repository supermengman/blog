{
  
    
        "post0": {
            "title": "Unit 1 Code.org learning",
            "content": "Classes . Java classes are the basic building block, like a template for objects of the class. A class is defined in its own .java file, and the name of the file has to match with the class name. . . A class can contain data (variables) and actions (methods). It can also extend functionality of another parent class, which will be discussed later in this blog. . Instances of classes . The instance of a class is an object. It is defined in it’s own java file, where attributes for the object instance can be set as well as methods for the object. . To instance a class as an object, first type the class name, then the object name, equals new class();. . . As seen in the image above, the Painter class has been instanced, and the Painter object was defined in a separate file. . Object Calling Methods . The class definition probably contains some sort of methods for the object, when instanced, to do. To call a function, first write the object instance name, a period, and then the method called. . For example: . Reader reader1 = new Reader(); // initiates new reader class instance called reader1 reader1.checkOutBook(bookName); // calls method checkOutBook with a given name . . As seen above, the object myPainter is also calling a method: move(). . Calling methods is extremely common in the realm of Java programming, and often takes on other actions like doing math calculations or displaying text. . Object Mutating Data . An object mutating data means that the object changes some sort of data. From last week, it can change the primitive data types plus the wrapper classes. However, it can also change the state of an object. This is not always a good thing, as it could change or break the program as well as increase memory usage. . Objects are reference type data. So, if you set another variable equal to that object and change some parameters, it automatically affects the original. . Sometimes that is what you want, changing the value of the object itself rather than having to make another object. . For example, the String object is immutable. To change the string, a new string object must be created: . String a = &quot;code code&quot; a = a.concat(&quot; code&quot;) // has to make new string a again instead of just appending . StringBuilder is mutable, so the methods can just change the object . StringBuilder a = new StringBuilder(&quot;code code&quot;) a.append(&quot; code&quot;) // has to make new string a again instead of just appending . Extends . As the name suggests, extends in java “extends” a class. The class created is inherited from another class, but more methods can be written in addition to the methods already in the original class. The attributes are also inherited. . The subclass is the class that inherits, while the superclass is the class being inherited from. . To extend, simply put extends and then the superclass. . super can also be used to refer to the superclass objects. Inside the class itself, super(); can be called in order to inherit all the original methods and attributes. . . As seen above, the PainterPlus class extends the Painter class, inheriting the attributes and methods with super. There is then a new method to turn right, being: . public void turnRight() { this.turnLeft(); this.turnLeft(); this.turnLeft(); } . This can then be called in the main function by initializing a PainterPlus instance, and calling the method to turnRight like so: . PainterPlus myPainterPlus = new PainterPlus(); myPainterPlus.turnRight(); . This can be taken further with more sophisticated methods. . Loops and Selection Statements . Like most programming languages, java also has while and if statements. . In a while loop, as long as the condition is true, the code will continue repeating until it is false. . . This snippet of code uses a while loop so when the painter is on the bucket, it will take the paint until there is no more bucket. . As for if statements, it usually comes in a pair of if and else. If the condition is met, some code will run. If not, then the code under the else block will run instead. It reads like english. . . This one combines both while and if. While the painter can move, and isn’t on a bucket, the painter will move. If it is not on a bucket, it will take paint, but once it cannot move, it will stop. . Final Product of Code.org . . Eventually, all these elements were combined to form a pattern in Lesson 14. A new class PatternPainter was created that extends Painter, and has methods to paint a checkerboard. The BackgroundPainter class was also created to extend Painter, and paint over any non-painted tiles. Finally, these were put together to form the final product. . Console vs GUI vs Code.org . There are many ways to interface with code, these three are all ways to do that. . With console, the inputs and outputs of the program are mainly done through text. In other words, it’s like typing into a text terminal to get things done. An example of this is Mr Morts console menu that allows users to choose some output to display. . With GUI, the inputs and outputs are not displayed as text in a terminal, but instead is usually displayed as a window. This could be better for users to interface with, as the display is more clear. However, it may be more complicated to program. . With code.org, it is basically a specialized IDE. The classes and methods such as the Painter interface directly with the output, which is a canvas with a painter painting. The code that is in the files doesn’t exactly show the behind the scenes drawing, but instead provides an easier way to interface with that output such as with turnLeft() just turning left. . Overall, console menus are used more for backend development and testing, GUI for the end user, and code.org just for learning. .",
            "url": "https://supermengman.github.io/blog/markdown/code.org/collegeboard/2022/09/04/Unit-1-Code-org.html",
            "relUrl": "/markdown/code.org/collegeboard/2022/09/04/Unit-1-Code-org.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Terms To Know Rhetorical Devices",
            "content": "Develop an understanding of the following concepts. Your understanding will be fuller if you go beyond definitions. Take notes as you develop this understanding. You may want to organize your notes in a chart with columns for definitions, examples and typical rhetorical effects, where applicable . Diction . Word Definition Examples Typical Rhetorical Effects . High/formal | Where sophisticated language is used, without slang or colloquialism . Complex syntax of sentence, usually in business doc . | . | “Thank you for accepting me into your institution. It would be an honor to attend and participate in this prestigious event.” | Usually makes author sound intelligent, appeals to the audience’s intelligence . Also makes author sound credible, makes readers trust the author . Formality lends a serious feeling too . | . Middle/moderate | Not formal or informal, but a middling diction that can be applied to a broad audience . The way educated people talk . | . | “Thank you for letting me join you in your lab. I look forward to seeing you again.” | Overall has a sense of indifference or neutrality. Makes readers feel familiar with the type of speech, but still distant with somewhat “formal” structure | . Low/informal | Conversational or narrative, like how real people communicate in real life . Especially used in social media or texts . | . | “Thanks man. See ya later.” | More friendly feeling, as well as realistic and easygoing | . Abstract | When words are used to express something intangible (idea or emotion) . Not detailed or specific . | . | “Falling in love is pleasing, unique, and beautiful” | Sounds lofty, hard to understand because it cannot be expressed by words | . Concrete | Words that have literal meanings and refer to things that appeal to senses . Not open to interpretation . | . | “I ate an apple” | Full commitment to the details, and full trust in the author for providing concrete details | . Colloquial | Conversational speech that uses informal words . Words specifically represent a place or time . | . | “Y’all have yourselves a good day folks!” | Fills in the setting of a plot possibly, with colloquial speech filling in background info . Very informal, so friendly as well . | . Monosyllabic | Choosing one syllable words specifically | “sad” | Short could have the effect of being simple, very direct at conveying to the reader | . Polysyllabic | Choosing words with many syllables | “melancholy” | More complex words convey more complex meanings to the reader, also sounds more intelligent at times | . Connotation | Feelings or associations that are attached to a word, not necessarily the definition | “Blue” is a color, but also connotated as sadness | Influence readers to draw on past experiences, and also more concise way to describe something for the author. | . Syntax . Word Definition Examples Typical Rhetorical Effects . Simple | Subject + verb + direct object . Only one independent clause, subject-verb structure . | . | The girl ran. . The sky is pink. . I like food. . | Very simple, so childlike tone? | . Compound | Two or more independent clauses with a coordinating conjunction (but, or, so) | I went to the park, but Sarah stayed at home. | With a lot of info, could overwhelm reader . Also equal importance of each clause . Relationship shown through the conjunction . | . Complex | Independent clause + dependent clause . Between with subordinating conjunction (although, because, so that, until, etc” . | . | I like pizza, although it is a little unhealthy. | Forces reader to focus on one idea . More complicated thinking or logic, also more relationships with cause effect . More graceful, flowing sentences . | . Compound-complex | Two independent clauses w/ at least one subordinate/dependent clauses | I went to the park, but Sarah stayed at home because she had homework to do | More complex relationships, so more analytical and academic . More “credible” for writer . | . Declarative | A sentence that makes a statement, provides fact, explains, etc . Present tense . | Most common form . | . | My dog is sick. | Declares fact, so shows confidence in writer . Very clear for the reader, trust . | . Parallel Construction | Using same pattern of words in a sentence to show that both are same importance . Usually uses coordinating conjunctions (and/or) . | Can be with verbs, clause structure, lists, etc . | . | I like hiking, biking, and running. | Adds clarity to the writing, because it is more readable with repeating areas . Establishes relationship between things and ideas, compare/contrast . Equal importance of things . | . Tone . Word Definition Examples Typical Rhetorical Effects . Tone | The mood implied by an author’s word choice, evoking emotion . Also reveals author’s attitude to a topic . | . | Thanks for inviting me! (appreciative tone) | Conveys to the reader the attitude of the writer towards the subject . Influences the intention and meaning of the words read by the reader, and sets them into a certain mood . | . What kind of adjectives describe tone? . Nostalgic . | Happy . | Joyful . | Regretful . | Dry . | Passive . | Neutral . | Ironic . | Inspirational . | Fearful . | Anticipating . | Angry . | Playful . | Sarcastic . | Pessimistic . | Humorous . | Lighthearted . | Assertive . The type of adjective is mostly just that describing emotion or writing . | . | . What creates tone? . Usually through word choice (diction) . Use of personal pronouns (puts a call onto the reader) . | Colloquialism is informal tone, personal connection . | Imagery, figurative language for formal, imaginative tone . | . | Sentence construction (syntax) . Punctuation (less is usually more casual) . | . | In fiction: the viewpoint of the character/context . | Consistency to convey strong feelings . | . The Appeals . Word Definition Examples Typical Rhetorical Effects . Logos | Appealing to the logic of audience . Uses facts, data, stats . | How well writer argues a point . | . | One in five women experience sexual assault in college | Appeals to logic, so leads to emotional response like sympathy, anger, etc . Also makes the argument strong, defensible . | . Ethos | Appeals to authority to persuade audience . Convince of reputation, virtue, intelligence, qualifications . | Can be both of author or of a quote . | . | Multiple dermatologists have backed this skin healing cream | Gives author credibility . Builds trust with audience . Audience will feel that the author is “right” due to the qualifications . | . Pathos | Evoke emotions in the audience . words like imagery . | Also context of audience’s beliefs and values . | Word choice, language, stories . | . | “If we don’t move soon, we’re all going to die!” . Feel nervous . | . | Persuades an audience through the emotions . Helps audience to be further intertwined with the argument, feeling the emotions . | . Rhetorical Situation . Word Definition Examples Typical Rhetorical Effects . Exigence | The reason why there is the rhetorical discourse . A problem, issue, situation that makes one write a message . | . | A defense attorney defends the client’s innocence . The exigence: it is the attorney’s job to keep the client fair . | . | Determines the mood of the piece, what the message or topic the reader is going to see | . Audience | Recipient of the communication . Has personal experiences, that may affect their view on the author/context . | . | Ex: the listeners to MLK Jr “I have a dream” speech . Mostly black people, but also white perspectives . | . | Depends on the audience how they interpret the rhetoric | . Speaker | The writer/person who communicates to others . Has individual background, with age, gender, location, etc all influencing . | Changes way they use rhetoric . | . | Ex: Joe Biden in his campaign speech . Specific ideals as an older man, as well as a democrat . | . | Depends on the speaker, so it changes based on audience’s interpretation of the speaker itself | . Occasion | The circumstances of the text: . Where, when, why, how, etc was written . | Changes language used . | Also where the audience hears it, with context . | . | MLK’s speech, in a public setting with many listening. Also in the time of segregation and unfair laws made against Black people | Sways audience’s opinion on something, and the level of understanding or connection they have | . Purpose | Why the author creates the message and why the audience will accept/not accept it . Usually to inform, instruct, persuade . | Purpose for audience is to be informed, to be entertained, etc (takeaway something) . | . Overall the intended outcome for the piece . | An advertisement to quit smoking with their medication: . Purpose is for the audience to buy their medicine to stop smoking . | . | Usually convinces the audience to learn or do something that the author wants to do | . Message | The big idea that the author tries to tell the reader . Not like purpose, because this is the concrete part . | The true idea of what they want to “persuade”, “entertain”, etc . | . | The message behind MLK’s “I Have a Dream” speech is to end segregation to usher in a new age of equality for all in America | Touches the readers if they are accepting, can be heartfelt or angry, depends on the message still | . Claim . Definition: the main argument of an essay . Defines the purpose, direction, goals of the paper; must have evidence . | Also need to argue a point, and a good one is focused and specific . | Can be debated or challenged to be a claim . | Nuanced, complex, specific, detailed . Cannot support with “opinion”, majority, tradition, morality . | Need specific reasons inside the claim . | . | . Examples: . Although both smartphones and laptops are used for productive work, laptops is overall a better fit for professional workloads due to its larger size, relatively faster speed, and wider support for accessories. . | . Rhetorical Effects . Notifies the reader what the point or idea of the paper is . | . Evidence . Facts and supporting pieces of information that supports the thesis and claim . | Should be relevant to the claim, and smoothly integrated/analyzed . | Must be explained to how it supports the argument . | . What is the purpose of evidence? . Needs to convince reader of the validity of the argument . | Persuade the reader to accept claims by connecting supporting evidence for the claim . | Supports, tests, or refines the thesis . | Makes the writing more convincing as the opinions would be supported . | . What can serve as evidence? . Books, authors, people (speeches), etc . | Primary source (documents, photos, interviews) and secondary (interpreted information) . | Found online, also in real life (observing the world), surveys, experiments, personal experience . | Statistics, data, charts, etc . | . Rhetorical and Literary Strategies . Word Definition Examples Typical Rhetorical Effects . allusion | implied/indirect reference to person, event, thing or another text . Helps add a lot of meaning/significance in short phrase . | Needs to be interpreted by reader . | . Can be casual (not integral to plot), single, etc . | Fried chicken is my achilles heel. . Alluding to achilles, who has a weak spot there . | . | Used to build trust with readers, as there is a common base of knowledge . Also can disclose plot, give context, exposition . | Help compare characters . | . Gives work a deeper meaning, stimulate reader . | . Rhetorical questions | A question that does not expect an answer . Could be obvious, or answered later . | Might add emphasis . | . Often used after a comment, might be the opposite . | Did you hear me? You need to pay attention. | Persuasive, gets the response the author wants from an audience . Also dramatic/comedic . Adds emphasis to a point . | . Pronoun usage | Words that stand in for nouns, to be specific/refer back to another noun . Singular w/ I, me, he, she, etc . | Plural w/ they, them, we . | . Personal pronouns are for people . Needs to agree in number, in person (first, second, third), refer to a specific noun . | I want to have my own computer. | Repetition of a certain pronoun (like a singular I) could represent things like self-centeredness . Also more intimate with the reader, directly points to a noun . Cuts down repetition, makes text enjoyable to read . | . Selection of detail | The details the author reveals to help add to the dominant impression . Anything the author shares is what they choose to share, so it must be important . | . Which things the author decides to put into writing, as well as which things they didn’t describe . | Depends on the writing? Needs a lot of context | Conveys to the reader what is important in the text . Focuses the text onto something important . | . juxtaposition | Two things put together with contrasting effect . Fleshes out a character, explores nuances in an idea, create humor, etc . | . Putting two things side by side to create ironic contrast, but is implied comparison . | Light and darkness . Wealth and poverty (George Grosz Gray Day) . | Creates humor . dramatic/ironic contrast . Reader has to infer, discern the differences/similarities . More profound understanding of this contrast . | . Use of absolutes (all, none, etc) | Words that go to the extreme . Completely all in or all out (already used the all) . | . | This is a never before seen cake recipe. | Used to exaggerate and emphasize points . Go beyond the true meaning, doesn’t actually mean the absolute part . | . Often more casual, as one cannot make assumptions that absolutely . | . Point of view | The writers perspective, the eye through which we see the story (first, second, or third) . First: I, me, we, our, etc (inside the author, sees and feels with the author) . | Second: You, the author directly addresses you and makes YOU part of the action . | Third: she, he, it, them, etc; all seeing and all knowing, sees/feels all characters and the whole scene . | . | First: I fell onto the ground, writhing in pain. . Second: You need to cut distractions in order to be productive. . Third: His brain was working at a million miles per hour, while everybody stared at him in awe. . | First: very intense emotions, as inside the character . Second: direct address to audience, so feels like a direct connection . Third: very informative to the reader, also feels smart/objective (omniscient) . | .",
            "url": "https://supermengman.github.io/blog/2022/08/29/Terms-to-Know-Rhetorical-Devices.html",
            "relUrl": "/2022/08/29/Terms-to-Know-Rhetorical-Devices.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "APCSA Week 1 Learning Log",
            "content": "Weekly Activities . This week in CSA, I reviewed concepts of bash as well as commands in bash that could help check versions and the installation of tools. I also refreshed my knowledge of the conditional statement in bash, like if statements, overall helping me review programming logic. . In addition to bash, I also learned basic Java syntax and programming through code.org. A class in java is like a template for objects, and there are objects that are created from the class. These objects can have methods (that execute code), and attributes. . This java learning was further enhanced by learning about primitive data types, and I did extra research on the wrapper classes as well. I then made a program to convert between SI units, using these primitive data types as well as utilizing the methods in OOP. . Plans for the Future of This Class . As we will be learning the 10 collegeboard units, I will capture this information by making a post for each, organizing them by the number as well as tagging them. I will put their links as I go along into the notes section of the website, so I don’t lose track. . . I will also blog my weekly adventures in this class as to better remember the course material I have reviewed. For example, this blog itself is helping to consolidate my knowledge of java and bash already. . Finally, I will tag all posts with the appropriate learning, with the collegeboard units once we start or the PBL learning. .",
            "url": "https://supermengman.github.io/blog/markdown/logs/2022/08/28/AP-CSA-Week1.html",
            "relUrl": "/markdown/logs/2022/08/28/AP-CSA-Week1.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Primitive Data Types",
            "content": "Data Types . Primitives . int: aka integer, holds non-fractional number values | byte: similar to int, but only takes 8 bits of memory (only numbers rom -128 to 127) | short: in between an int and a byte | long: larger than an int | float: basic fractional numbers, which loses precision after 6 decimal places | double: it is a double-precision decimal number, with 64 bits of memory. It can go to further decimal places with higher precision. | boolean: only two values of true or false. | char: an integer that represents a unicode encoded character. | . int x = 12425; byte b = 40; short s = 10452; long l = 81849583; float f = 6.4224f; double d = 5.42624574367345; boolean b = false; char c = &#39;a&#39;; . Wrapper class . Primitive data types also have a class in Java that &quot;wrap&quot; the class. . Integer wraps int | Byte wraps byte | Short wraps short | Long wraps long | Float wraps float | Double wraps double | Boolean wraps boolean | Character wraps char | . Wrapper classes are used when working with collections, or putting the data into an ArrayList or other data structures. Methods can also be called on wrapper classes, with an example being toString(). . Integer exampleInt = 10; // defining variable with wrapper class System.out.println(exampleInt); // printing the variable value System.out.println(exampleInt.intValue()); // using the method to get the value in the object . 10 10 . Strings are a special wrapper class, being a sequence of characters or a character array. . String exampleString = &quot;hello world&quot;; System.out.println(exampleString + &quot;!&quot;); . hello world! . Hacks . SI unit converter . import java.util.Scanner; import java.util.Arrays; public class UnitConvertor { double[] conversionFactors = new double[]{0.001, 0.01, 0.1, 1, 10, 100, 1000}; // the conversion factors with meters as a reference, has decimals so double String[] unitList = {&quot;millimeter&quot;, &quot;centimeter&quot;, &quot;decimeter&quot;, &quot;meter&quot;, &quot;decameter&quot;, &quot;hectometer&quot;, &quot;kilometer&quot;}; // the units themselves, so a string to match public static double inputMeasurement; // below are the global variables that get called later, double here as the measurement is going to be a number with possible decimals public static String inputUnits; // the unit name, so string public static int unitIndex; // this is used to store the index of the unit that is typed, which is an integer public static String unitMessage = &quot;Enter the units for that measurement (millimeter, centimeter, decimeter, meter, decameter, hectometer, kilometer), type exit to exit: &quot;; // message that can change int firstUnitIndex; // index is integer int secondUnitIndex; // index is integer private String firstUnit; // the name of unit so String private String secondUnit; // name of unit so string // constructor, calls the functions to enter the fields of data and saves them as attributes public UnitConvertor() { this.enterMeasurement(); this.enterUnits(); this.firstUnitIndex = unitIndex; this.firstUnit = inputUnits; unitMessage = &quot;Enter the units to convert to (millimeter, centimeter, decimeter, meter, decameter, hectometer, kilometer), type exit to exit: &quot;; this.enterUnits(); this.secondUnitIndex = unitIndex; this.secondUnit = inputUnits; } // method to check if string matches exit, booleon because yes or no (takes string as input as it has to compare to the string) private boolean isExit(String inputMeasurement) { return inputMeasurement.matches(&quot;exit&quot;); } // enterMeasurement input method, with scanner private void enterMeasurement() { Scanner measurement; while (true) { System.out.print(&quot;Enter the first measurement (only numbers), type any letter to exit: &quot;); measurement = new Scanner(System.in); try { inputMeasurement = measurement.nextDouble(); System.out.println(inputMeasurement); measurement.close(); break; // breaks the loop, continues on with program } catch (Exception e) { System.out.println(&quot;See you later!&quot;); System.exit(0); // end program if not a number } } } // enterUnits method with scanner, checks the input and matches the string public void enterUnits() { Scanner units; while (true) { System.out.print(unitMessage); // prints the message (which changes because it has to be called twice for different purposes) units = new Scanner(System.in); try { inputUnits = units.nextLine(); System.out.println(inputUnits); if (isExit(inputUnits)) { // check if user wants to stop program, then exits System.out.println(&quot;See you next time!&quot;); System.exit(0); } unitIndex = Arrays.asList(unitList).indexOf(inputUnits); // find index of the unit that the user inputted in the array, write to variable unitIndex to be stored later if (unitIndex == -1) { // if not found in the array, then ask user to retype System.out.println(&quot;not a valid unit choice &quot;); } else { break; // if is found in array, stop the loop and continue } } catch (Exception e) { System.out.println(&quot;Not a valid string, &quot; + e); } units.close(); } } // calculation of the unit change, divides the conversion factors like in dimensional analysis; returns double because the initial inputMeasurement is a double public double changeCalculation() { return (inputMeasurement * conversionFactors[this.firstUnitIndex]/conversionFactors[this.secondUnitIndex]); } // asks user if they want to add a number onto their converted measurement public void add() { Scanner yesOrNo; while (true) { System.out.print(&quot;Would you like to add by another number of the same unit? (y/n) &quot;); yesOrNo = new Scanner(System.in); try { String roundYN = yesOrNo.nextLine(); // asks user input for y/n System.out.println(roundYN); if (roundYN.matches(&quot;n&quot;)) { // if no, skip over adding yesOrNo.close(); break; } else if (roundYN.matches(&quot;y&quot;)) { // if yes, create another scanner to ask for the number Scanner adding; while (true) { System.out.print(&quot;enter the number to add: &quot;); adding = new Scanner(System.in); try { double addInput = adding.nextDouble(); // gets user input, as a double because the number inputted can have decimals as a measurement System.out.println(addInput); adding.close(); double finalCalculation = this.changeCalculation(); // gets the value of the original converted measurement, which is a double and writes to variable finalCalculation += addInput; // compound assignment operator, adds the user input to the converted measurement quickly System.out.println(finalCalculation + &quot; &quot; + this.secondUnit + &quot;s.&quot;); // print the added number break; } catch (Exception e) { System.out.println(&quot;Not a double, &quot; + e); } } } else { // if not yes or no, tells user to redo System.out.println(&quot;not a valid input&quot;); } } catch (Exception e) { System.out.println(&quot;Not a valid string, &quot; + e); } yesOrNo.close(); } } // truncate the number if user wants to (whole number) private void truncating() { Scanner yesOrNo; while (true) { // asks user if wants to truncate or exit System.out.print(&quot;Would you like to truncate to the nearest whole number? (y/exit) &quot;); yesOrNo = new Scanner(System.in); try { String roundYN = yesOrNo.nextLine(); System.out.println(roundYN); if (isExit(roundYN)) { // if user types exit, the program completes System.out.println(&quot;See you next time!&quot;); yesOrNo.close(); System.exit(0); } else if (roundYN.matches(&quot;y&quot;)) { // if user says y, truncates int truncatedConversion = (int)this.changeCalculation(); // casts the calculation into an int, truncating it to whole number System.out.println(truncatedConversion + &quot; &quot; + this.secondUnit + &quot;s.&quot;); yesOrNo.close(); break; } else { System.out.println(&quot;not a valid input&quot;); // tells user to type valid input } } catch (Exception e) { System.out.println(&quot;Not a valid string, &quot; + e); } yesOrNo.close(); } } // static main method, creates object converting and outputs the conversion + calls the add or truncate methods in addition public static void main(String[] args) { UnitConvertor converting = new UnitConvertor(); System.out.println(&quot;Your measurement of &quot; + inputMeasurement + &quot; &quot; + converting.firstUnit + &quot;s&quot; + &quot; is &quot; + converting.changeCalculation() + &quot; &quot; + converting.secondUnit + &quot;s.&quot;); converting.add(); converting.truncating(); } } UnitConvertor.main(null); . Enter the first measurement (only numbers), type exit to exit: 56.32 Enter the units for that measurement (millimeter, centimeter, decimeter, meter, decameter, hectometer, kilometer), type exit to exit: meter Enter the units to convert to (millimeter, centimeter, decimeter, meter, decameter, hectometer, kilometer), type exit to exit: decimeter Your measurement of 56.32 meters is 563.1999999999999 decimeters. Would you like to add by another number of the same unit? (y/n) y enter the number to add: 67.53 630.7299999999999 decimeters. Would you like to add by another number of the same unit? (y/n) n Would you like to truncate to the nearest whole number? (y/exit) 7 not a valid input Would you like to truncate to the nearest whole number? (y/exit) y 563 decimeters. .",
            "url": "https://supermengman.github.io/blog/jupyter/java/2022/08/27/Java-primitives.html",
            "relUrl": "/jupyter/java/2022/08/27/Java-primitives.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Bash Learning",
            "content": "Bash script to verify project directories and projects . Initial setup to clone . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/bash_clone_test # change vscode to different name to test git clone export project=$testing_dir/blog # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/supermengman/blog&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Hello World! . Filesystem Management in Bash . cd, pwd, echo, ls . cd changes directory | pwd prints working directory | echo &quot;echoes&quot; lines into terminal | ls &quot;lists&quot; files in directories | . echo &quot;Navigate to project, then navigate to area where files were cloned&quot; cd $project # Changes Directory to the project pwd # outputs the current directory . echo &quot;&quot; # empty space echo &quot;list top level or root of files with project pulled from github&quot; ls # list . echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags . echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . echo &quot;&quot; echo &quot;list all files in long format recursively&quot; ls -Ral # all files and long listing . Moving through Linux Directories . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . Show contents of files . echo &quot;Navigate to project, then navigate to area where files were cloned&quot; cd $project echo &quot;show the contents of index.html&quot; echo &quot;&quot; cat index.html # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of index.html&quot; . Other additional bash commands . Commands for Permissions . chmod is the command used to change access permissions of files (allowing specific people to read, write, or execute files) permissions are in octal, meaning that a number 0-7 determines the permission for each part (usually there are 3 parts) part 1 (user): changes the permission for the user that owns the file | part 2 (group): changes the permission for the group that owns the file (such as administrator or sudo) | part 3 (others): changes the permission for all users | . | numbers in chmod correspond to the permissions, adding the numbers up results in the complete permission for that part 0 = no permissions, 1 = execute permission, 2 = write permission, 4 = read permission ex: a permission of 6 = 4 + 2 + 0 so only read and write permissions | . | . | . | chown is the command used to change ownership of files easier than chmod, just specify the user and the file | . | chgrp command used to change group that owns file similar syntax to chown | . | . cd $project chmod 644 README.md # changes permissions of the README file to 644, so owner can read and write, while the group and others can only read chown root README.md # changes owner of README.md to root chgrp sudo README.md # changes group that has access to README.md to sudo chown root:sudo README.md # does both owner and group at the same time . Filtering Commands . grep is a very useful command in linux, used to filter content inside files to find a specific match. grep can also be used to find a match in the output of a command. . grep &quot;the&quot; README.md # searches for and prints any matches of &quot;read&quot; in readme file grep -rl &quot;read&quot; $project # searches recursively through project directory for &quot;read&quot; while only listing filenames . find is a command similar to grep, but it matches filenames instead of the contents instead files or from outputs like grep does. . echo &quot;README files&quot; find $project -iname *README* # finds files in the project directory that have readme in the name echo &quot;&quot; echo &quot;jupyter notebook files&quot; find $project -iname *.ipynb # finds files in the project directory that have md as the file extension . Miscellaneous Commands . &quot;env&quot; shows environmental variables set in shell | &quot;sort&quot; sorts the output or contents of a file (can set specific flags) | &quot;head&quot;/&quot;tail&quot; outputs the first or last lines of a file | . Hacks . Possible bash automations: . Verifying Installation of Tools . This is a simple bash script (a file with .sh file extension) that checks if a package is installed and installs it based on user input. . while true; do read -r -p &quot;would you like to choose a package to check? [y/n] &quot; option # asks and reads input of user if they want to see if package is installed case $option in # uses input to see the results y) read -p &quot;Enter package to check: &quot; tools_verify # reads input for specific package if [[ $(apt list --installed $tools_verify 2&gt;/dev/null | tail -1) = *installed* ]]; then # checks if the tool is installed version_number=$(apt list --installed $tools_verify 2&gt;/dev/null | tail -1 | cut -d &quot; &quot; -f 2) # finds the version number echo &quot;$tools_verify is installed! The version number is $version_number.&quot; echo &quot;&quot; else while true; do read -r -p &quot;$tools_verify is not installed! Would you like to install? [y/n] &quot; install_option case $install_option in y) sudo apt-get install -y $tools_verify # installs the package version_number=$(apt list --installed $tools_verify 2&gt;/dev/null | tail -1 | cut -d &quot; &quot; -f 2) # finds the version number echo &quot;$tools_verify is installed! The version number is $version_number.&quot; echo &quot;&quot; break # returns back to main loop of package to check ;; n) echo &quot;alright then!&quot; break # returns back to main loop ;; *) echo &quot;Invalid Option&quot; ;; esac done fi ;; n) echo &quot;see you next time!&quot; break # ends the script ;; *) echo &quot;Invalid Option&quot; # throws user back to start of script ;; esac done . would you like to choose a package to check? [y/n] . Anaconda Verify Installation . if [[ $(conda --version) ]]; then condaversion=$(conda --version) echo &quot;$condaversion is installed!&quot; else echo &quot;Anaconda not installed!&quot; fi . conda 4.14.0 is installed! . Conda Verifiying Packages Installed . This code snippet checks if a package in conda is installed, and if not, installs it. . export conda_package=jupyter # can be any package if [[ $(conda list $conda_package | grep -w jupyter) = *$conda_package* ]]; then # matches package with list of installed packageversion=$(conda list $conda_package | grep -w jupyter | awk &#39;{print $2}&#39;) echo &quot;$conda_package is already installed! It&#39;s version is $packageversion.&quot; else echo &quot;$conda_package has not been installed, installing now.&quot; conda install $conda_package fi . jupyter is already installed! It&#39;s version is 1.0.0. . Java Verify Installation . if [[ $(java --version) ]]; then jdkversion=$(java --version | head -n 1) echo &quot;$jdkversion is installed!&quot; else echo &quot;Java not installed!&quot; fi # java compiler version check if [[ $(javac --version) ]]; then jcompilerversion=$(javac --version | head -n 1) echo &quot;$jcompilerversion is installed!&quot; else echo &quot;JavaC not installed!&quot; fi . openjdk 17.0.4 2022-07-19 is installed! javac 17.0.4 is installed! . Updating Repositories . export repository=blog # sets the repository to a specific one export repo_main_folder=vscode # where the repositories are stored cd $HOME/$repo_main_folder/$blog # moves into that directory git fetch origin # fetches any changes git pull origin master # updates the repo with new changes .",
            "url": "https://supermengman.github.io/blog/jupyter/bash/2022/08/22/bash-learning.html",
            "relUrl": "/jupyter/bash/2022/08/22/bash-learning.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "TT 1.0.0 Tools and Equipment",
            "content": "Hacks Part 1: Fastpages . link to personal Fastpages / GitHub pages running on github.io | link to a new page (_posts) in your Fastpages project with use of Markdown | link to Python Jupyter notebook (_notebooks) showing usage of Python | link to JavaJupyter notebook (_notebooks) showing usage of Java | . Capture image/screen capture of Fastpages project showing use of an Integrated Development Environment (VS Studio) . link to GitHub insights | . Hacks Part 2: Java Project . . Link to GitHub code commit for minor change | Seed: Fix for the dropdown menu in Birds page | Seed: Java 17 working | .",
            "url": "https://supermengman.github.io/blog/markdown/2022/08/21/Tools-and-Equipment.html",
            "relUrl": "/markdown/2022/08/21/Tools-and-Equipment.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Java Jupyter notebook",
            "content": "Code . public class hello { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } hello.main(null); . Hello World! .",
            "url": "https://supermengman.github.io/blog/jupyter/java/2022/08/19/java-jupyter-test.html",
            "relUrl": "/jupyter/java/2022/08/19/java-jupyter-test.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Python Jupyter notebook",
            "content": "Code . print(&#39;Hello&#39;) . Hello .",
            "url": "https://supermengman.github.io/blog/jupyter/python/2022/08/18/python-jupyter-test.html",
            "relUrl": "/jupyter/python/2022/08/18/python-jupyter-test.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Post with Markdown",
            "content": "My First Post! . This post explores my (Andrew’s) journey through markdown syntax. . Basic . This section shows usage of markdown, with italics and bold text. . this is a quote block . List . this is a numbered list | this is the second item | this is an unordered list | this is the second item | . Code . this is a code block that is multiline . print(&quot;hello world!&quot;) . Tables . Type of text examples . strikethrough text | example | . hyperlink | google | . Hi . Now that the introduction is done, it’s time to code!!! .",
            "url": "https://supermengman.github.io/blog/markdown/2022/08/18/My-First-Post.html",
            "relUrl": "/markdown/2022/08/18/My-First-Post.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://supermengman.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://supermengman.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://supermengman.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Notes",
          "content": "Collegeboard Units: . Unit 1: Primitive Types | Unit 2: Using Objects | Unit 3: Boolean Expressions and if statements | Unit 4: Iteration | Unit 5: Writing Classes | Unit 6: Array | Unit 7: ArrayList | Unit 8: 2D Array | Unit 9: Inheritance | Unit 10: Recursion | . PBL: .",
          "url": "https://supermengman.github.io/blog/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://supermengman.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}