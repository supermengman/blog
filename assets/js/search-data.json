{
  
    
        "post0": {
            "title": "CSUSM Interest Meeting",
            "content": "CSUSM Interest Meeting . two recent graduates (applied physics and smth) | . Ashley . work in quantum mechanics | took ap physics, loved it | CSU one of the only CSU with physics major | first gen student, failed a lot in calc | got into research, and is now getting a phd in material sciences | SM good campus to learn more | . John . started at palomar | 2 associates in physics and comp sci | inteeresting because hasn’t actually been on campus until last semester | 6 yrs to get graduate degree | comp sci is a versatile degree, every field uses it | . info abt sm . newest cal state | poultry farm originally | new tutoring center recently | national leader in social mobility turnover of socioecon status to graduate | lots of internships with local industries (qualcomm, general atomics, etc) | . | a lot of stairs | . Pathways . computer science: cybersecurity, computer engineer, EE, software engineering | . | constantly changing curriculum to adapt | can also transition classes without falling behind | . Clubs . Cybersecurity, robotics, 3D printing, Society of Physics Students, etc | . Internship . give good work experience | find them by joining clubs or maybe going to campus events | google to find oppurtunities | check email | . | try to avoid unpaid internships in college ask people to help write essays too | . | . programs . summer scholars program: do research with advisor get paid too (6k) | . | admitted students : QUantum Bridge Program | . Research . materials research | quantum research | meteroite research | . Paying for College . grant v scholarship: grant is government give, scholarship is privately give | have to find scholarships yourself | if turn 18 before, report own income to get more scholarship/financial aid | 2 loans: subsidized, unsubsidized subsidized: gov help, prevent further debt with less/no interest | unsubsidized loan: does accrue interest | . | apply for FAFSA, studentaid.gov | possibly go to community first to avoid debt | . Life after College . may pay to get masters degrees (companies) | also get internships to get a job | . Upcoming events . mostly for admitted students, but there is Cougar Blue Day | . Reflection . As this the first time I’ve actually been to a college meeting at school, it was truly a beneficial experience. The information they gave about applying to college was helpful not only to apply for CSU, but also for college in general. For example, I didn’t know that you had to apply for scholarships separately, and that subsidized loans were a much better choice than unsubsidized. With such helpful life advice, I can’t help but be extremely thankful for their time and effort. Specifically about San Marcos, I also realized that they had many STEM programs and focuses on curriculum that larger schools can’t do. With clubs such as cybersecurity club and robotics club, they piqued my interest. Now, CSUSM is definitely a school I would consider applying to. The small campus, the research oppurtunities, and internship oppurtunities are all things that I would love to experience. Overall, I am very grateful for the time they took to come to our school and give us such helpful information. .",
            "url": "https://supermengman.github.io/blog/markdown/seed/2023/03/28/CSUSM-Meeting.html",
            "relUrl": "/markdown/seed/2023/03/28/CSUSM-Meeting.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Queue Notes",
            "content": "Linked List code . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . Queue Base Code . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } /** * Returns if queue is empty * * @return boolean if it is empty */ public boolean isEmpty() { return this.head == null; } public String toString() { int count = 0; String str = &quot;&quot;; for (T e : this) { str += e + &quot; &quot;; count++; } return &quot;Words count: &quot; + count + &quot;, data: &quot; + str; } } . Notes on Code . Managing data in the Queue . There were modifications done to the code, mostly to remove the QueueManager class. The QueueManager class simply creates a Queue object while taking in an array of objects, which could be useful but is kind of unneccessary when one can use the enhanced for loop. Instead, the add method can be called, and this manipulation of data can be seen in the challenges below. . ForEach and Iterables . The code seen here: . public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } . Is in the Queue class, and this is called when an enhanced for loop is called. It returns an iterator, which is an object that can be used to iterate over a collection. The QueueIterator class is defined as follows: . class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } . It is able to check if there is a next element, and it is able to return the next element. This is what allows the enhanced for loop to work, and it is what allows the Queue to be iterable. . This also works for Generic data, as the generic type of T is used in the Queue classes. Thus, it can take any type of data, as long as it has a comparable interface. For example, as seen in the challenge below, it can take a String, an Integer, or a Double. . Challenge #1, Add and Delete elements from Queue. Working with the code that is given, you will need to adjust Add and write Delete, to output from the Queue as follows. . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of Words String[] words = new String[] { &quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; Queue&lt;String&gt; q = new Queue&lt;&gt;(); for (String w : words) { q.add(w); System.out.println(&quot;Enqueued Data: &quot; + w); System.out.println(q); } while (!q.isEmpty()) { String val = q.delete(); System.out.println(&quot;Dequeued Data: &quot; + val); System.out.println(q); } } } QueueTester.main(null); . Enqueued Data: seven Words count: 1, data: seven Enqueued Data: slimy Words count: 2, data: seven slimy Enqueued Data: snakes Words count: 3, data: seven slimy snakes Enqueued Data: sallying Words count: 4, data: seven slimy snakes sallying Enqueued Data: slowly Words count: 5, data: seven slimy snakes sallying slowly Enqueued Data: slithered Words count: 6, data: seven slimy snakes sallying slowly slithered Enqueued Data: southward Words count: 7, data: seven slimy snakes sallying slowly slithered southward Dequeued Data: seven Words count: 6, data: slimy snakes sallying slowly slithered southward Dequeued Data: slimy Words count: 5, data: snakes sallying slowly slithered southward Dequeued Data: snakes Words count: 4, data: sallying slowly slithered southward Dequeued Data: sallying Words count: 3, data: slowly slithered southward Dequeued Data: slowly Words count: 2, data: slithered southward Dequeued Data: slithered Words count: 1, data: southward Dequeued Data: southward Words count: 0, data: . Challenge #2, perform a merge or combination of 2 Queue&#39;s that are ordered. This is a foundation step for the algorithm used in Merge sorting. . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester2 { public static void main(String[] args) { // Create first queue int[] firstData = {1, 4, 5, 8}; Queue&lt;Integer&gt; firstQ = new Queue&lt;&gt;(); for (int i : firstData) { firstQ.add(i); } // Create second queue int[] secondData = {2, 3, 6, 7}; Queue&lt;Integer&gt; secondQ = new Queue&lt;&gt;(); for (int i : secondData) { secondQ.add(i); } System.out.println(&quot;First Queue&quot;); System.out.println(firstQ); System.out.println(&quot;Second Queue&quot;); System.out.println(secondQ); // Merge the queues Queue&lt;Integer&gt; mergedQ = new Queue&lt;&gt;(); while (!firstQ.isEmpty() || !secondQ.isEmpty()) { if (firstQ.isEmpty()) { mergedQ.add(secondQ.delete()); } else if (secondQ.isEmpty()) { mergedQ.add(firstQ.delete()); } else if (firstQ.peek() &lt; secondQ.peek()) { mergedQ.add(firstQ.delete()); } else { mergedQ.add(secondQ.delete()); } } System.out.println(&quot;Merged Queue&quot;); System.out.println(mergedQ); } } QueueTester2.main(null); . First Queue Words count: 4, data: 1 4 5 8 Second Queue Words count: 4, data: 2 3 6 7 Merged Queue Words count: 8, data: 1 2 3 4 5 6 7 8 . Challenge 3 . class QueueShuffler&lt;T&gt; { public void shuffle(Queue&lt;T&gt; q) { List&lt;T&gt; dequeuedQueue = new ArrayList&lt;&gt;(); while (!q.isEmpty()) { dequeuedQueue.add(q.delete()); } while (!dequeuedQueue.isEmpty()) { int rand = (int) (Math.random() * dequeuedQueue.size()); q.add(dequeuedQueue.get(rand)); dequeuedQueue.remove(rand); } } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester3 { public static void main(String[] args) { // Create first queue int[] firstData = {1, 2,3,4,5,6,7,8}; Queue&lt;Integer&gt; firstQ = new Queue&lt;&gt;(); for (int i : firstData) { firstQ.add(i); } System.out.println(firstQ); QueueShuffler&lt;Integer&gt; shuffler = new QueueShuffler&lt;&gt;(); shuffler.shuffle(firstQ); System.out.println(firstQ); } } QueueTester3.main(null); . Words count: 8, data: 1 2 3 4 5 6 7 8 Words count: 8, data: 8 1 5 3 6 2 4 7 . Challenge 4 . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class StackIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public StackIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Stack&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; head = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = head; else { // nodes in queue head.setNextNode(this.head); this.head = head; // update head } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } /** * Returns if queue is empty * * @return boolean if it is empty */ public boolean isEmpty() { return this.head == null; } public String toString() { int count = 0; String str = &quot;&quot;; for (T e : this) { str += e + &quot; &quot;; count++; } return &quot;Words count: &quot; + count + &quot;, data: &quot; + str; } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class StackTester { public static void main(String[] args) { int[] data = {1, 2, 3}; Queue&lt;Integer&gt; q = new Queue&lt;&gt;(); for (int i : data) { q.add(i); } System.out.println(&quot;Queue&quot;); System.out.println(q); // use stack Stack&lt;Integer&gt; s = new Stack&lt;&gt;(); while (!q.isEmpty()) { s.add(q.delete()); } System.out.println(&quot;Stack&quot;); System.out.println(s); } } StackTester.main(null); . Queue Words count: 3, data: 1 2 3 Stack Words count: 3, data: 3 2 1 . Stack with custom data type . public class Person { // Class data // Instance data private String name; private String email; private String passwordHash; /* constructor * */ public Person(String name, String email, String passwordHash) { this.name = name; this.email = email; this.passwordHash = passwordHash; } @Override public String toString() { return &quot;{ &quot;Name &quot;: &quot;&quot; + name + &quot; &quot;, &quot;Email &quot;: &quot;&quot; + email + &quot; &quot;, &quot;Password &quot;: &quot;&quot; + passwordHash + &quot; &quot; }&quot;; } // Test data initializer public static Person[] persons() { return new Person[] { new Person(&quot;John&quot;, &quot;john@email.com&quot;, &quot;password&quot;), new Person(&quot;Mary&quot;, &quot;mary@email.com&quot;, &quot;password2&quot;), new Person(&quot;Bob&quot;, &quot;bob@email.com&quot;, &quot;password3&quot;) }; } /* main to test Person class * */ public static void main(String[] args) { // Inheritance Hierarchy //Person[] objs = persons(); Person john = new Person(&quot;John&quot;, &quot;john@email.com&quot;, &quot;password&quot;); // print with title System.out.println(&quot;Person Class Test&quot;); System.out.println(john.toString()); } } . class PersonStackTester { public static void main(String[] args) { Stack&lt;Person&gt; s = new Stack&lt;&gt;(); for (Person p : Person.persons()) { s.add(p); } System.out.println(s); } } PersonStackTester.main(null); . Words count: 3, data: { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } .",
            "url": "https://supermengman.github.io/blog/jupyter/java/collegeboard/sort/2023/03/23/Queue-Hacks.html",
            "relUrl": "/jupyter/java/collegeboard/sort/2023/03/23/Queue-Hacks.html",
            "date": " • Mar 23, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Sort Notes",
            "content": "Queue Base Code . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail tail.setPrevNode(this.tail); this.tail = tail; // update tail } } public void addList(T[] lists) { for (T data : lists) { this.add(data); } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } /** * Returns if queue is empty * * @return boolean if it is empty */ public boolean isEmpty() { return this.head == null; } /** * Changes the head * */ public void setHead(LinkedList&lt;T&gt; h) { this.head = h; } /** * Returns size of queue * * @return size of queue */ public int size() { int sz = 0; for (T e: this) { sz++; } return sz; } public String toString() { int count = 0; String str = &quot;&quot;; for (T e : this) { str += e + &quot; &quot;; count++; } return &quot;count: &quot; + count + &quot;, data: &quot; + str; } } . Generic Class . import java.util.*; abstract class Sorter&lt;T&gt; { String name; int startTime; int endTime; int operations; public Sorter(String name) { this.name = name; } public String getName() { return this.name; } abstract public Queue&lt;T&gt; sort(Queue&lt;T&gt; list); public void start() { this.startTime = (int) System.nanoTime(); } public void stop() { this.endTime = (int) System.nanoTime(); } public int getElapsedTime() { return this.endTime - this.startTime; } public int getOperations() { return this.operations; } public void incrementOperations() { this.operations++; } } . Bubble Sort . Bubble sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in the wrong order. . It&#39;s time complexity is quite high, as it has to go through the entire array multiple times, constantly swapping elements and checking. . shown above is a rudimentary example of the steps that bubble sort takes to sort an array. . class BubbleSorter&lt;T extends Comparable&lt;T&gt;&gt; extends Sorter&lt;T&gt; { public BubbleSorter() { super(&quot;Bubble Sort&quot;); } public Queue&lt;T&gt; sort (Queue&lt;T&gt; q) { super.start(); boolean swapped = true; LinkedList&lt;T&gt; head = q.getHead(); while (swapped) { swapped = false; LinkedList&lt;T&gt; current = head; while (current.getNext() != null) { if (current.getData().compareTo(current.getNext().getData()) &gt; 0) { T temp = current.getNext().getData(); current.getNext().setData(current.getData()); super.incrementOperations(); current.setData(temp); swapped = true; super.incrementOperations(); } super.incrementOperations(); current = current.getNext(); } System.out.println(&quot;Intermediate: &quot; + q); } super.stop(); return q; } } . Selection Sort . Selection sort is a simple sorting algorithm that works by repeatedly finding the minimum element from an unsorted part of an array and swapping it with the first element of the unsorted part. This process is repeated until the entire array is sorted. . Here are the steps to perform a selection sort on an array of n elements: . Set the first element as the minimum. | Iterate through the remaining elements and compare each element with the current minimum. | If a smaller element is found, set it as the new minimum. | Once the end of the array is reached, swap the current minimum with the first element of the unsorted part. | Increment the starting index of the unsorted part and repeat the above steps until the entire array is sorted. | . Time complexity: O(n^2) (worst case) . . class SelectionSorter&lt;T extends Comparable&lt;T&gt;&gt; extends Sorter&lt;T&gt; { public SelectionSorter() { super(&quot;Selection Sort&quot;); } public Queue&lt;T&gt; sort (Queue&lt;T&gt; q) { super.start(); LinkedList&lt;T&gt; current = q.getHead(); while (current.getNext() != null) { LinkedList&lt;T&gt; lowest = current; LinkedList&lt;T&gt; current2 = current.getNext(); while (current2 != null) { if (lowest.getData().compareTo(current2.getData()) &gt; 0) { lowest = current2; } current2 = current2.getNext(); super.incrementOperations(); } T temp = lowest.getData(); lowest.setData(current.getData()); super.incrementOperations(); current.setData(temp); super.incrementOperations(); System.out.println(&quot;Intermediate: &quot; + q); current = current.getNext(); } super.stop(); return q; } } . Insertion Sort . Insertion sort is a simple sorting algorithm that works by iterating through an array of elements, comparing each element to the ones that came before it, and swapping them if they are out of order. This process is repeated until the entire array is sorted. It h as two parts: the sorted part and the unsorted part. The sorted part is at the beginning of the array, and the unsorted part is at the end of the array. The algorithm iterates through the unsorted part, removing one element at a time, and inserting it into the correct position in the sorted part. To insert, the algorithm compares elements to the sorted subaray from right to left. If the element is smaller than the current, the current element is shifted right. This process is repeated until the element is larger than the current element, or the beginning of the array is reached. . Time complexity: O(n^2) (worst case), but it can be better if the array is partially sorted. This makes it more efficient than selection sort and bubble sort, as those require going through the array the whole time. . . class InsertionSorter&lt;T extends Comparable&lt;T&gt;&gt; extends Sorter&lt;T&gt; { public InsertionSorter() { super(&quot;Insertion Sort&quot;); } public Queue&lt;T&gt; sort (Queue&lt;T&gt; q) { super.start(); LinkedList&lt;T&gt; current = q.getHead().getNext(); while (current != null) { LinkedList&lt;T&gt; next = current.getNext(); LinkedList&lt;T&gt; compared = current; while (compared.getPrevious() != null &amp;&amp; current.getData().compareTo(compared.getPrevious().getData()) &lt; 0) { compared = compared.getPrevious(); super.incrementOperations(); } if (compared != current) { if (current.getPrevious() != null) current.getPrevious().setNextNode(current.getNext()); super.incrementOperations(); if (current.getNext() != null) current.getNext().setPrevNode(current.getPrevious()); super.incrementOperations(); current.setNextNode(compared); super.incrementOperations(); current.setPrevNode(compared.getPrevious()); super.incrementOperations(); if (compared.getPrevious() != null) compared.getPrevious().setNextNode(current); super.incrementOperations(); compared.setPrevNode(current); super.incrementOperations(); if (current.getPrevious() == null) q.setHead(current); super.incrementOperations(); } current = next; System.out.println(&quot;Intermediate: &quot; + q); } super.stop(); return q; } } . Merge Sort . Merge sort is a divide and conquer algorithm that works by recursively splitting the array into two halves, sorting each half, and then merging the two sorted halves. The merge step is the most important part of the algorithm, as it is where the actual sorting takes place. The merge step works by comparing the first element of each half, and placing the smaller element into the result array. This process is repeated until all the elements have been placed into the result array. . Time complexity: O(nlogn) (worst case) . . class MergeSorter&lt;T extends Comparable&lt;T&gt;&gt; extends Sorter&lt;T&gt; { public MergeSorter() { super(&quot;Merge Sort&quot;); } public Queue&lt;T&gt; sort (Queue&lt;T&gt; q) { super.start(); if (q.size() == 1) return q; List&lt;Queue&lt;T&gt;&gt; queues = splitQ(q); Queue&lt;T&gt; ret = mergeQ(sort(queues.get(0)), sort(queues.get(1))); System.out.println(&quot;Intermediate: &quot; + ret); super.stop(); return ret; } private Queue&lt;T&gt; mergeQ (Queue&lt;T&gt; firstQ, Queue&lt;T&gt; secondQ) { Queue&lt;T&gt; mergedQ = new Queue&lt;&gt;(); while (!firstQ.isEmpty() || !secondQ.isEmpty()) { if (firstQ.isEmpty()) { mergedQ.add(secondQ.delete()); super.incrementOperations(); } else if (secondQ.isEmpty()) { mergedQ.add(firstQ.delete()); super.incrementOperations(); } else if (firstQ.peek().compareTo(secondQ.peek()) &lt;= 0) { mergedQ.add(firstQ.delete()); super.incrementOperations(); } else { mergedQ.add(secondQ.delete()); super.incrementOperations(); } } return mergedQ; } private List&lt;Queue&lt;T&gt;&gt; splitQ (Queue&lt;T&gt; q) { int end = q.size()/2 - 1; int cnt = 0; Queue&lt;T&gt; firstQ = new Queue&lt;&gt;(); Queue&lt;T&gt; secondQ = new Queue&lt;&gt;(); for (T i : q) { if (cnt &lt;= end) firstQ.add(i); else secondQ.add(i); super.incrementOperations(); cnt++; } return List.of(firstQ, secondQ); } } . Tester Method for all sorters . public class SortTester { public static void main (String[] args) { List&lt;Sorter&lt;Integer&gt;&gt; sorters = new ArrayList&lt;Sorter&lt;Integer&gt;&gt;(); sorters.add(new InsertionSorter&lt;&gt;()); sorters.add(new BubbleSorter&lt;&gt;()); sorters.add(new SelectionSorter&lt;&gt;()); sorters.add(new MergeSorter&lt;&gt;()); Integer[] arr = {10, 1, 3, 2, 5}; for (Sorter i : sorters) { Queue&lt;Integer&gt; q = new Queue&lt;&gt;(); q.addList(arr); System.out.println(i.getName()); System.out.println(i.sort(q)); System.out.println(&quot;Elapsed time: &quot; + i.getElapsedTime() + &quot;ns&quot;); System.out.println(&quot;Operations: &quot; + i.getOperations()); System.out.println(); } System.out.println(); } } SortTester.main(null); . Insertion Sort Intermediate: count: 5, data: 1 10 3 2 5 Intermediate: count: 5, data: 1 3 10 2 5 Intermediate: count: 5, data: 1 2 3 10 5 Intermediate: count: 5, data: 1 2 3 5 10 count: 5, data: 1 2 3 5 10 Elapsed time: 1667200ns Operations: 33 Bubble Sort Intermediate: count: 5, data: 1 3 2 5 10 Intermediate: count: 5, data: 1 2 3 5 10 Intermediate: count: 5, data: 1 2 3 5 10 count: 5, data: 1 2 3 5 10 Elapsed time: 1703000ns Operations: 22 Selection Sort Intermediate: count: 5, data: 1 10 3 2 5 Intermediate: count: 5, data: 1 2 3 10 5 Intermediate: count: 5, data: 1 2 3 10 5 Intermediate: count: 5, data: 1 2 3 5 10 count: 5, data: 1 2 3 5 10 Elapsed time: 1678000ns Operations: 18 Merge Sort Intermediate: count: 2, data: 1 10 Intermediate: count: 2, data: 2 5 Intermediate: count: 3, data: 2 3 5 Intermediate: count: 5, data: 1 2 3 5 10 count: 5, data: 1 2 3 5 10 Elapsed time: 6002499ns Operations: 24 . Data Object with Comparable . public class Person implements Comparable&lt;Person&gt; { // Class data public enum KeyType {name, email, passwordHash} public static KeyType key = KeyType.name; // static initializer public static void setOrder(KeyType key) {Person.key = key;} // Instance data private String name; private String email; private String passwordHash; /* constructor * */ public Person(String name, String email, String passwordHash) { this.name = name; this.email = email; this.passwordHash = passwordHash; } protected KeyType getKey() { return Person.key; } // compare @Override public int compareTo(Person obj) { if (this.key == KeyType.name) return this.name.compareTo(obj.name); else if (this.key == KeyType.email) return this.email.compareTo(obj.email); else if (this.key == KeyType.passwordHash) return this.passwordHash.compareTo(obj.passwordHash); else return 0; } public String toString() { return &quot;{ &quot;Name &quot;: &quot;&quot; + name + &quot; &quot;, &quot;Email &quot;: &quot;&quot; + email + &quot; &quot;, &quot;Password &quot;: &quot;&quot; + passwordHash + &quot; &quot; }&quot;; } // Test data initializer public static Person[] persons() { return new Person[] { new Person(&quot;John&quot;, &quot;1john@email.com&quot;, &quot;password&quot;), new Person(&quot;Mary&quot;, &quot;mary@email.com&quot;, &quot;password2&quot;), new Person(&quot;Bob&quot;, &quot;bob@email.com&quot;, &quot;password3&quot;), new Person(&quot;Alice&quot;, &quot;alice@email.com&quot;, &quot;dfsefa&quot;), new Person(&quot;Zoe&quot;, &quot;bruh@gmail.com&quot;, &quot;deawea&quot;), new Person(&quot;Frank&quot;, &quot;uniqlo@mail.com&quot;, &quot;ewaksjd&quot;) }; } /* main to test Person class * */ public static void main(String[] args) { // Inheritance Hierarchy //Person[] objs = persons(); Person john = new Person(&quot;John&quot;, &quot;1john@email.com&quot;, &quot;password&quot;); Person mary = new Person(&quot;Mary&quot;, &quot;funmary@email.com&quot;, &quot;password2&quot;); // print with title System.out.println(&quot;Person Class Test&quot;); System.out.println(john.toString()); System.out.println(&quot;Compare John to Mary: passwordHash&quot;); Person.setOrder(KeyType.passwordHash); System.out.println(john.compareTo(mary)); System.out.println(&quot;Compare John to Mary: name&quot;); Person.setOrder(KeyType.name); System.out.println(john.compareTo(mary)); System.out.println(&quot;Compare John to Mary: email&quot;); Person.setOrder(KeyType.email); System.out.println(john.compareTo(mary)); } } Person.main(null); . Person Class Test { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } Compare John to Mary: passwordHash -1 Compare John to Mary: name -3 Compare John to Mary: email -53 . public class SortTesterPerson { public static void main (String[] args) { List&lt;Sorter&lt;Person&gt;&gt; sorters = new ArrayList&lt;Sorter&lt;Person&gt;&gt;(); sorters.add(new InsertionSorter&lt;&gt;()); sorters.add(new BubbleSorter&lt;&gt;()); sorters.add(new SelectionSorter&lt;&gt;()); sorters.add(new MergeSorter&lt;&gt;()); Person[] arr = Person.persons(); Person.setOrder(Person.KeyType.email); for (Sorter i : sorters) { Queue&lt;Person&gt; q = new Queue&lt;&gt;(); q.addList(arr); System.out.println(i.getName()); System.out.println(i.sort(q)); System.out.println(&quot;Elapsed time: &quot; + i.getElapsedTime() + &quot;ns&quot;); System.out.println(&quot;Operations: &quot; + i.getOperations()); } System.out.println(); } } SortTesterPerson.main(null); . Insertion Sort Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Elapsed time: 2047200ns Operations: 25 Bubble Sort Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Elapsed time: 2274500ns Operations: 23 Selection Sort Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Elapsed time: 1457400ns Operations: 25 Merge Sort Intermediate: count: 2, data: { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } Intermediate: count: 3, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } Intermediate: count: 2, data: { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Intermediate: count: 3, data: { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Intermediate: count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } count: 6, data: { &#34;Name&#34;: &#34;John&#34;, &#34;Email&#34;: &#34;1john@email.com&#34;, &#34;Password&#34;: &#34;password&#34; } { &#34;Name&#34;: &#34;Alice&#34;, &#34;Email&#34;: &#34;alice@email.com&#34;, &#34;Password&#34;: &#34;dfsefa&#34; } { &#34;Name&#34;: &#34;Bob&#34;, &#34;Email&#34;: &#34;bob@email.com&#34;, &#34;Password&#34;: &#34;password3&#34; } { &#34;Name&#34;: &#34;Zoe&#34;, &#34;Email&#34;: &#34;bruh@gmail.com&#34;, &#34;Password&#34;: &#34;deawea&#34; } { &#34;Name&#34;: &#34;Mary&#34;, &#34;Email&#34;: &#34;mary@email.com&#34;, &#34;Password&#34;: &#34;password2&#34; } { &#34;Name&#34;: &#34;Frank&#34;, &#34;Email&#34;: &#34;uniqlo@mail.com&#34;, &#34;Password&#34;: &#34;ewaksjd&#34; } Elapsed time: 588700ns Operations: 32 .",
            "url": "https://supermengman.github.io/blog/jupyter/java/collegeboard/sort/2023/03/21/Sort-Notes.html",
            "relUrl": "/jupyter/java/collegeboard/sort/2023/03/21/Sort-Notes.html",
            "date": " • Mar 21, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Classes and Objects Video",
            "content": "Lesson Notes . 5.1 Anatomy of a class . class: blueprint for objects, with instance variables, constructors, methods | objects are instances of classes | naming conventions: start uppercase letter, should be noun, not acronym | . Methods define functionality/behavior of an object, can access instance variables . ACCESS MODIFIERS: . public: no restrictions, can be accessed outside the class (used for classes and constructors) | private: only in class (instance variables) methods can be designated with these | . Benefit of modifiers: can limit access, and use getters/setters methods in order to interact with variables instead of directly editing the variable itself . 5.2 Constructors . initializes instance variables when object created | usually 2 or more constructors | can have multiple constructors with different parameters | no return because it is creating an object and its variables, not calling methods to do work and return a value | this keyword refers to the current object being called, usually being used to find the current object&#39;s variable or run a method on it | . 5.5 Modifiers/Accessor Methods . more specifically, they are getters/setters. They allow other classes to change the instance variables of a different class. It also is used to get private variables in an object . Mutator Methods . they are a set method to change the value of the private variable. They don&#39;t return a value, but are void methods | . Public vs Private vs Protected . public is available for class and subclasses and everything in the world/project | protected isnt available in the world but is available in the class | private is only used in the class see example in https://supermengman.github.io/blog/jupyter/java/collegeboard/frq/student/2022/10/23/Unit-3-HW.html | . 5.8 Scope and Access: . Class level is for instance variables | Method level is for local variables | Block level is for loop variables | . Extra . a main method in an abstract class can be used for tester methods, making sure that variables are set correctly. https://github.com/rjawesome/CSASpringTri2/blob/steptrack2/src/main/java/com/nighthawk/spring_portfolio/mvc/steptrack1/Person.java | a class can inherit from a parent class, and write new functions. see https://supermengman.github.io/blog/jupyter/java/collegeboard/2022/09/20/Fibonacci.html . also subclass, super in there subclass constructor calls main constructor with the super keyword (super calls the parent function methods) | . | also see override, with the @override allowing changes to the init function (overriding the parent) | . | abstract class/method: a restricted class that gets inherited from another class. methods can be in abstract classes, and are called when they are extended. This helps achieve security . it is an implementation of polymorphism, where one class can have different implementations of a method. java // Abstract class abstract class Animal { // Abstract method (does not have a body) public abstract void animalSound(); // Regular method public void sleep() { System.out.println(&quot;Zzz&quot;); } } | . | . // Subclass (inherit from Animal) class Pig extends Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(&quot;The pig says: wee wee&quot;); } } . class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } . Methods: . overloading method: If there are different types in the parameters, you can cwrite multiple methods with the same name, as they still count. | . class Calculate { void sum (int a, int b) { System.out.println(&quot;sum is&quot;+(a+b)) ; } void sum (float a, float b) { System.out.println(&quot;sum is&quot;+(a+b)); } public static void main (String[] args) { Calculate cal = new Calculate(); cal.sum(8,5); //sum(int a, int b) is method is called. cal.sum(4.6f, 3.8f); //sum(float a, float b) is called. } } . Standard Methods: . toString: a method to print out all the attributes of an object | equals(): a method to check if two objects and their attributes are equal (based on own criteria) | hashCode(): a method to generate a unique identifier for an object | . All can be lomboked in @Data, like in https://github.com/rjawesome/CSASpringTri2/blob/steptrack2/src/main/java/com/nighthawk/spring_portfolio/mvc/steptrack1/Person.java . Late Binding with superclasses . early binding is just static, meaning that it compiles and binds the object to the class definition declared | late binding means that it is bound to the child one or whatever is called in the new | . public class NewClass { public static class superclass { static void print() { System.out.println(&quot;print in superclass.&quot;); } } public static class subclass extends superclass { static void print() { System.out.println(&quot;print in subclass.&quot;); } } public static void main(String[] args) { superclass A = new superclass(); superclass B = new subclass(); A.print(); B.print(); } } NewClass.main(null); . print in superclass. print in superclass. . that was in early because its compiled, but if not it will say print in subclass. . Big O Notation . the chart shows the efficiency of algorithms | .",
            "url": "https://supermengman.github.io/blog/jupyter/java/collegeboard/2023/03/20/Classes-and-Objecs.html",
            "relUrl": "/jupyter/java/collegeboard/2023/03/20/Classes-and-Objecs.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Test Corrections 39 Q",
            "content": "Stats . Score: 36/39 Total Score: 0.92 Time: 45 minutes . Q3 A and B Classes with show method . consider the following two classes . public class A { public void show() { System.out.println(&quot;A&quot;); } } public class B extends A { public void show() { System.out.println(&quot;B&quot;); } } . WHat is printed when the following code is executed? . A obj = new B(); obj.show(); . I chose A: A, but it was B: B. This would be the result if obj was instantiated as a new A object instead of a new B object. . The object cretaed is type B, so the show method is in B. . Q33 Find maximum in 1D array . I. . int max = Integer.MIN_VALUE; for (int value : array) { if (value &gt; max) { max = value; } } . II. . int max = 0; boolean first = true; for (int value : array) { if (first) { max = value; first = false; } else if (value &gt; max) { max = value; } } . III. . int max = arr[0]; for (int k = 1; k &lt; arr.length; k++) { if (arr[k] &gt; max) { max = arr[k]; } } . I chose D: II and III only. Choice I sets max to Integer.MIN_VALUE, which is the smallest possible integer value. Then it accesses each element in arr and assigns them value. If value is greater than max, max is assigned value since it is now the largest value so far. . I didn’t know what Integer.MIN_VALUE was. . Q39 . List&lt;String&gt; students = new ArrayList&lt;String&gt;(); students.add(&quot;Alex&quot;); students.add(&quot;Bob&quot;); students.add(&quot;Carl&quot;); for (int k = 0; k &lt; students.size(); k++) { System.out.print(students.set(k, &quot;Alex&quot;) + &quot; &quot;); } System.out.println(); for (String str : students) { System.out.print(str + &quot; &quot;); } . I chose A: Alex Alex Alex Alex Alex Alex. However, the set method returns the previous value, not the new value set by Alex. . So, the output is C: Alex Bob Carl Alex Alex Alex. .",
            "url": "https://supermengman.github.io/blog/markdown/collegeboard/2023/03/16/Test-Corrections.html",
            "relUrl": "/markdown/collegeboard/2023/03/16/Test-Corrections.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Data Types",
            "content": "Hack: Binary Add . public class BinaryAdd { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.print(&quot;Enter first binary number: &quot;); // Use a radix of 2 cuz input is binary String input1 = sc.nextLine(); int a = Integer.parseInt(input1, 2); System.out.println(input1); System.out.print(&quot;Enter second binary number: &quot;); String input2 = sc.nextLine(); int b = Integer.parseInt(input2, 2); System.out.println(input2); int sum = a + b; System.out.println(&quot;Sum of two binary numbers is: &quot; + Integer.toBinaryString(sum)); } } BinaryAdd.main(null); . Enter first binary number: 10 Enter second binary number: 10 Sum of two binary numbers is: 100 . Code Exercises . int . import java.lang.Math; int a = (int)(Math.random()*100); System.out.println(a); int b = (int)(Math.random()*100); System.out.println(b); . 19 74 .",
            "url": "https://supermengman.github.io/blog/jupyter/student/datastructures/2023/03/07/Data-Types.html",
            "relUrl": "/jupyter/student/datastructures/2023/03/07/Data-Types.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Data Types Hacks",
            "content": "Binary Addition Seed . import java.util.*; public class BinaryAddition { static Scanner sc = new Scanner(System.in); public static int inputBinary (String prompt) { System.out.print(prompt); int deciOne = sc.nextInt(); System.out.println(deciOne); int binOne = 0; for (int i = 10; i&gt;=0; i--) { binOne += (int)((deciOne % Math.pow(10,i+1)) / Math.pow(10,i)) * (Math.pow(2,i)); } return binOne; } public static String addBin (int numOne, int numTwo) { String sum = &quot;&quot;; int carryOver = 0; for (int i = 0; i&lt;=33; i++) { int first = numOne % 2; int second = numTwo % 2; if (first + second + carryOver &gt; 1) { sum = (char)(&#39;0&#39; + (first + second + carryOver - 2)) + sum; carryOver = 1; } else { sum = Integer.toString(first + second + carryOver) + sum; carryOver = 0; } numOne = numOne &gt;&gt; 1; numTwo = numTwo &gt;&gt; 1; } // cut string while (sum.charAt(0) == &#39;0&#39; &amp;&amp; sum.length() &gt; 1) { sum = sum.substring(1, sum.length()); } return sum; } public static void main (String[] args) { int numOne = inputBinary(&quot;Input first binary number: &quot;); int numTwo = inputBinary(&quot;Input second binary number: &quot;); String sum = addBin(numOne, numTwo); System.out.println(&quot;The sum is: &quot; + sum); } } BinaryAddition.main(null); . Input first binary number: 1 Input second binary number: 1 The sum is: 10 . int/Integer . void swap (int a, int b) { int temp = a; a = b; b = temp; } int a = (int)(Math.random()*100); int b = (int)(Math.random()*100); System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); swap(a, b); // values stay the same System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); int c = a + b; System.out.println(&quot;c = &quot; + c); . a = 85 and b = 90 a = 85 and b = 90 c = 175 . void swap (Integer a, Integer b) { Integer temp = a; a = b; b = temp; } Integer a = new Integer((int)(Math.random()*100)); Integer b = (int)(Math.random()*100); ArrayList&lt;Integer&gt; arr = new ArrayList&lt;Integer&gt;(); arr.add(a); arr.add(b); System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); swap(arr.get(0), arr.get(1)); // values stay the same System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot; arr (2nd) = &quot; + arr.get(1)); Integer c = a + b; System.out.println(&quot;c = &quot; + c); . arr (1st) = 95 and arr (2nd) = 31 arr (1st) = 95 and arr (2nd) = 31 c = 126 . double/Double . void swap (double a, double b) { double temp = a; a = b; b = temp; } double a = Math.random(); double b = Math.random(); System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); swap(a, b); // values stay the same System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); double c = a + b; System.out.println(&quot;c = &quot; + c); . a = 0.5392976519054533 and b = 0.7136309112889999 a = 0.5392976519054533 and b = 0.7136309112889999 c = 1.2529285631944531 . void swap (Double a, Double b) { Double temp = a; a = b; b = temp; } Double a = new Double(Math.random()); Double b = new Double(Math.random()); ArrayList&lt;Double&gt; arr = new ArrayList&lt;&gt;(); arr.add(a); arr.add(b); System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); swap(arr.get(0), arr.get(1)); // values stay the same System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); double c = a + b; System.out.println(&quot;c = &quot; + c); . arr (1st) = 0.8714734691329225 and arr (2nd) = 0.958581170162068 arr (1st) = 0.8714734691329225 and arr (2nd) = 0.958581170162068 c = 1.8300546392949903 . boolean/Boolean . void swap (boolean a, boolean b) { boolean temp = a; a = b; b = temp; } boolean a = true; boolean b = false; System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); swap(a, b); // values stay the same System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); boolean c = a || b; System.out.println(&quot;c = &quot; + c); . a = true and b = false a = true and b = false c = true . void swap (Boolean a, Boolean b) { Boolean temp = a; a = b; b = temp; } Boolean a = true; Boolean b = false; ArrayList&lt;Boolean&gt; arr = new ArrayList&lt;&gt;(); arr.add(a); arr.add(b); System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); swap(arr.get(0), arr.get(1)); // values stay the same System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); boolean c = a || b; System.out.println(&quot;c = &quot; + c); . arr (1st) = true and arr (2nd) = false arr (1st) = true and arr (2nd) = false c = true . char/Character . void swapCh (char a, char b) { char temp = a; a = b; b = temp; } char a = &#39;a&#39;; char b = &#39;b&#39;; System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); swapCh(a, b); // values stay the same System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); char[] c = {a, b}; String str = new String(c); System.out.println(&quot;str = &quot; + str); System.out.println(&quot;str substring 0 to 1 = &quot; + str.substring(0,1)); . a = a and b = b a = a and b = b str = ab str substring 0 to 1 = a . void swapCh (Character a, Character b) { Character temp = a; a = b; b = temp; } Character a = new Character(&#39;a&#39;); Character b = new Character(&#39;b&#39;); ArrayList&lt;Character&gt; arr = new ArrayList&lt;&gt;(); arr.add(a); arr.add(b); System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); swapCh(arr.get(0), arr.get(1)); // values stay the same System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); char[] c = new char[arr.size()]; for (int i = 0; i&lt;arr.size(); i++) { c[i] = arr.get(i); } String str = new String(c); System.out.println(&quot;str = &quot; + str); System.out.println(&quot;str substring 0 to 1 = &quot; + str.substring(0,1)); . arr (1st) = a and arr (2nd) = b arr (1st) = a and arr (2nd) = b str = ab str substring 0 to 1 = a . Methods and Control Structure FRQ: 2016 Q1 . RandomStringChooser class | a. . Write the RandomStringChooser class. The constructor accepts an array of strings as a parameter and stores the array in an instance variable. The class should also have a method called getNext that returns a random string from the array. If all the strings have been returned, then the method should return &quot;NONE&quot;. The method should not return the same string twice. . String[] words = {&quot;wheels&quot;, &quot;on&quot;, &quot;the&quot;, &quot;bus&quot;}; RandomStringChooser chooser = new RandomStringChooser(words); for (int k = 0; k &lt; 6; k++) { System.out.print(chooser.getNext() + &quot; &quot;); } // output: bus the wheels on NONE NONE . public class RandomStringChooser { // declare the instance variable private ArrayList&lt;String&gt; words; // write the constructor public RandomStringChooser(String[] wordArray) { // initialize the instance variable with for loop words = new ArrayList&lt;String&gt;(); for (String word : wordArray) { words.add(word); } } // get random word from array if there is any public String getNext() { if (words.size() &gt; 0) { return words.remove((int)(Math.random() * words.size())); } return &quot;NONE&quot;; } // tester method public static void main(String[] args) { String[] words = {&quot;wheels&quot;, &quot;on&quot;, &quot;the&quot;, &quot;bus&quot;}; RandomStringChooser chooser = new RandomStringChooser(words); for (int k = 0; k &lt; 6; k++) { System.out.print(chooser.getNext() + &quot; &quot;); } } } RandomStringChooser.main(null); . wheels bus the on NONE NONE . A breakdown . Theres the normal class description and boilerplate code, but the important part is the constructor. The constructor takes in an array of strings and stores it in an instance variable. The instance variable is an array of strings, so it can be used in the other methods. . The method getNext() returns a random string from the array. The method should not return the same string twice. This means that the method should remove the string from the array after it is returned. This is a little tricky, but we can use the ArrayList class to help us out. The ArrayList class is a resizable array, also a complex data type, which means that we can add and remove elements from the array. We can use the ArrayList class to store the strings from the array, and then use the ArrayList class to remove the strings after they are returned. The remove() method takes in an index as a parameter, so we can use the Random class to generate a random index and multiply by the data size to get some number between 0 and the size of the array. However, the random class returns a double, so we need to cast it into an int, which is a primitive data type. This is passed by value into the remove method. . Now we can use it as the index for the remove() method. The remove() method returns the element that was removed, so we can return it from the getNext() method while simultaneously printing out the element removed. . As seen with the output, there are two NONES because of it choosing 6 out of 4 words. . B . RandomLetterChooser subclass. It constructs a random letter chooser given a string of str, implementing getSingleLetters that returns an array of single-letter strings. The constructor should call the superclass constructor with the array of single-letter strings. . public class RandomLetterChooser extends RandomStringChooser { public RandomLetterChooser(String str) { super(getSingleLetters(str)); } private static String[] getSingleLetters(String str) { String[] letters = new String[str.length()]; for (int i = 0; i &lt; str.length(); i++) { letters[i] = str.substring(i, i + 1); } return letters; } public static void main(String[] args) { RandomLetterChooser chooser = new RandomLetterChooser(&quot;cat&quot;); for (int k = 0; k &lt; 4; k++) { System.out.print(chooser.getNext()); } } } RandomLetterChooser.main(null); . ctaNONE . B Breakdown . Essentially, this is the exact thing as RandomWordChooser, but instead of an array of words, its an array of strings. So, we can just extend the method of getNext() from the RandomWordChooser class and just change the array of words to an array of strings. The constructor essentially does this, by calling the super constructor with the array of single-letter strings generated with the getSingleLetters method. These get passed by value, and even though the actual array isn&#39;t actually stored, the array doesn&#39;t get changed. . the getSingleLetters wasn&#39;t part of the FRQ, but it was quick to code. It just splits the string into an array of single-letter strings with the substring method. . Explore Teacher Code . What are Methods and Control Structures? . Methods and Control Structures, in the context of AP Classroom, is the process of creating classes and methods to solve problems. The methods and control structures are the building blocks of the Java programming language. . ChatGPT: Methods: Methods are also known as functions or procedures in different programming languages. They are a set of statements or code blocks that are executed together to perform a specific task. Methods can take input arguments and return output values or perform a set of actions without returning any value. They are typically designed to be reusable and modular, allowing the same code to be called from different parts of a program. . Control Structures: Control structures are constructs in programming languages that allow the flow of code to be controlled based on specific conditions or events. They include conditional statements, loops, and branching statements. . Conditional statements (if/else statements) allow the program to make decisions based on specific conditions, executing one block of code if the condition is true and another block if the condition is false. Loops (for loops, while loops) allow the program to repeat a set of actions multiple times until a specific condition is met. Branching statements (break, continue) allow the program to exit out of a loop or skip certain iterations based on specific conditions. Control structures are used to make programs more efficient and flexible, allowing them to handle different scenarios and inputs. . Especially on the test, students will be asked to write program code to create objects of a class and call methods, and satisfy method specifications. . Diverse Arrays and Matrix . Basically this code takes in a 2D array, and checks if it is diverse if the sums of each row are different. . public static boolean isDiverse(int[][] arr2D) { int [] sums = rowSums(arr2D); int sumsLength = sums.length; // ij loop, two indexes needed in evaluation, similar to bubble sort iteration for(int i = 0; i &lt; sumsLength - 1; i++) { for (int j = i + 1; j &lt; sumsLength; j++) { if (sums[i] == sums[j]) { return false; // leave as soon as you find duplicate } } } return true; // all diverse checks have been made } . This is kind of like Methods and Control Structures, as it is a method that takes in parameters and meets specificatiosn. It has control structures like conditionals and loops, but it is not an object. . As for Data Types, I think it has some usage of int arrays, but they are all passed as reference as the primitive class. . Matrix: . public class Matrix { private final int[][] matrix; // store matrix public Matrix(int[][] matrix) { this.matrix = matrix; } // nest for loops to format output of a matrix public String toString() { // construct output of matrix using for loops // outer loop for row StringBuilder output = new StringBuilder(); for (int[] row : matrix) { // inner loop for column for (int cell : row) { output.append((cell==-1) ? &quot; &quot; : String.format(&quot;%x&quot;,cell)).append(&quot; &quot;); } output.append(&quot; n&quot;); // new line } return output.toString(); } // print it backwards matrix public String reverse() { // outer loop starting at end row StringBuilder output = new StringBuilder(); for (int i = matrix.length; 0 &lt; i; i--) { // inner loop for column for (int j = matrix[i-1].length; 0 &lt; j; j--) { output.append((matrix[i-1][j-1]==-1) ? &quot; &quot; : String.format(&quot;%x&quot;,matrix[i-1][j-1])).append(&quot; &quot;); } output.append(&quot; n&quot;); // new line } return output.toString(); } } . This code definitely exhibits methods and control structures, with methods like toString and reverse being able to print out the 2D integer arrays. These are designed to specification with for loops and conditionals. . It also has more data types, with actual 2D integera arrays being stored inside functions. These can be seen to be passed by reference, so the actual array does not get changed when the code is run. . Review other code: . DoNothingByValue This code mostly demosnstrates passing variables as reference, with the Triple class defining specific wrapper classes. There are multiple changeIt methods, which change the value of the variable. The changeIt method with the primitive data type is passed by value, so the actual value of the variable does not change. The changeIt method with the wrapper class is passed by reference, so the actual value of the variable does change. . IntByReference The key knowledge here is that you can swap orders by assigning it to a temporary memory address for both to access and swap. In addition, since these integers are stored in the actual object istelf, the values are passed by reference, so the actual values of the variables change. . Menu code . package com.nighthawk.hacks.methodsDataTypes; import java.util.HashMap; import java.util.Map; import java.util.Scanner; /** * Menu: custom implementation * @author John Mortensen * * Uses String to contain Title for an Option * Uses Runnable to store Class-Method to be run when Title is selected */ // The Menu Class has a HashMap of Menu Rows public class Menu { // Format // Key {0, 1, 2, ...} created based on order of input menu // Value {MenuRow0, MenuRow1, MenuRow2,...} each corresponds to key // MenuRow {&lt;Exit,Noop&gt;, Option1, Option2, ...} Map&lt;Integer, MenuRow&gt; menu = new HashMap&lt;&gt;(); /** * Constructor for Menu, * * @param rows, is the row data for menu. */ public Menu(MenuRow[] rows) { int i = 0; for (MenuRow row : rows) { // Build HashMap for lookup convenience menu.put(i++, new MenuRow(row.getTitle(), row.getAction())); } } /** * Get Row from Menu, * * @param i, HashMap key (k) * * @return MenuRow, the selected menu */ public MenuRow get(int i) { return menu.get(i); } /** * Iterate through and print rows in HashMap */ public void print() { for (Map.Entry&lt;Integer, MenuRow&gt; pair : menu.entrySet()) { System.out.println(pair.getKey() + &quot; ==&gt; &quot; + pair.getValue().getTitle()); } } /** * To test run Driver */ public static void main(String[] args) { Driver.main(args); } } // The MenuRow Class has title and action for individual line item in menu class MenuRow { String title; // menu item title Runnable action; // menu item action, using Runnable /** * Constructor for MenuRow, * * @param title, is the description of the menu item * @param action, is the run-able action for the menu item */ public MenuRow(String title, Runnable action) { this.title = title; this.action = action; } /** * Getters */ public String getTitle() { return this.title; } public Runnable getAction() { return this.action; } /** * Runs the action using Runnable (.run) */ public void run() { action.run(); } } // The Main Class illustrates initializing and using Menu with Runnable action class Driver { /** * Menu Control Example */ public static void main(String[] args) { // Row initialize MenuRow[] rows = new MenuRow[]{ // lambda style, () -&gt; to point to Class.Method new MenuRow(&quot;Exit&quot;, () -&gt; main(null)), new MenuRow(&quot;Do Nothing&quot;, () -&gt; DoNothingByValue.main(null)), new MenuRow(&quot;Swap if Hi-Low&quot;, () -&gt; IntByReference.main(null)), new MenuRow(&quot;Matrix Reverse&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Diverse Array&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Random Squirrels&quot;, () -&gt; Number.main(null)) }; // Menu construction Menu menu = new Menu(rows); // Run menu forever, exit condition contained in loop while (true) { System.out.println(&quot;Hacks Menu:&quot;); // print rows menu.print(); // Scan for input try { Scanner scan = new Scanner(System.in); int selection = scan.nextInt(); // menu action try { MenuRow row = menu.get(selection); // stop menu if (row.getTitle().equals(&quot;Exit&quot;)) { if (scan != null) scan.close(); // scanner resource requires release return; } // run option row.run(); } catch (Exception e) { System.out.printf(&quot;Invalid selection %d n&quot;, selection); } } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } } } } . Control structurs in Drive: . while | try/catch | if/else | . MenuRow: There are data types of String as a class, not a primitive, but realistically it doesn&#39;t show much there or even in methods/control structures . Runnable: In Java, &quot;runnable&quot; refers to a type of object that can be executed by a thread. Specifically, a &quot;runnable&quot; object is one that implements the java.lang.Runnable interface, which has a single method named run(). . The run() method contains the code that will be executed when the thread is started. To create a new thread that runs a Runnable object, you can create an instance of the Thread class and pass the Runnable object to its constructor: .",
            "url": "https://supermengman.github.io/blog/jupyter/student/datastructures/2023/03/06/datatypes.html",
            "relUrl": "/jupyter/student/datastructures/2023/03/06/datatypes.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Test Corrections 66 Q",
            "content": "Stats . Score: 61/66 Total Score: 0.92 Time: 75 minutes Weak Areas: return methods, recursive, etc. . Q36 . The question refer to the code from the GridWorld case study. . Consider the following declarations. . Actor a = new Actor(); Bug b = new Bug(); Rock r = new Rock(); Critter c = new Critter(); . Consider the following lines of code. . Line 1: int dir1 = c.getDirection(); Line 2: int dir2 = a.getDirection(); Line 3: int dir3 = b.getDirection(); Line 4: ArrayList&lt;Location&gt; rLoc = r.getMoveLocations(); Line 5: ArrayList&lt;Location&gt; cLoc = c.getMoveLocations(); . Which of the lines of code above will cause a compile time error? . I chose A: Line 1, but it was C :Line 4. I didn’t have context for the actual question. . Q52 Raise Price . public class Toy { private String name; private double price; public Toy(String n, double p) { name = n; price = p; } public void raisePrice(double surcharge) // Line 12 { return price + surcharge; // Line 14 } . I chose E: Replace line 12 with public double raisePrice (double surcharge). Although it would compile, it doesn’t actually change the number of price. So, it should have been B: Replace line 14 with price += surcharge;. . The raisePrice method is intended to increase the value of price by adding surcharge to it; the statement “price += surcharge” works as intended. The method should not return a value, as it is a void mutator method, not an accessor method. . Q54 Recursive String . public static boolean recurMethod(String str) { if (str.length() &lt;= 1) { return true; } else if (str.substring(0, 1).compareTo(str.substring(1, 2)) &gt; 0) { return recurMethod(str.substring(1)); } else { return false; } } . I accidently chose A: recurMethod(“abcde”), but it was D: recurMethod(“edcba”). It actually compares the letter before to the letter after, so the larger letter should be at the front, not the back. . If the first character of str is lexicographically greater than the second character of str, the method returns the result of the recursive call with a parameter that contains all but the first character of str. If the first character of str is lexicographically less than or equal to the second character of str, the method returns false. If no such character pair (where the first character of str is lexicographically less than or equal to the second character of str) is found, the base case is reached and the value true is returned. . Q56 . private ArrayList myData; public void removeDups () { int k = 1; while (k &lt; myData.size()) { if (myData.get(k).equals(myData.get(k - 1))) { myData.remove(k); } k++; } } . I chose D: The body of the if statement should be: myData.remove(k - 1);. I didn’t consider that it would shift the array, as deleting an element would make the loop skip items. . It should be E: There should be an else before the statement k++;. This would prevent it from skipping items in the array by only incrementing if there was nothing removed. . . . I chose A: Executing shuffle may cause an ArrayIndexOutOfBoundsException. . It was actually E: The last element of the returned array (result [result.length − 1] ) may not have the correct value. The code doesn’t really account for odd numbers, simply dividing the length of the array by two. So, if it’s odd, it will just case it into an integer and not account for the last element. .",
            "url": "https://supermengman.github.io/blog/markdown/collegeboard/2023/01/26/Test-Corrections.html",
            "relUrl": "/markdown/collegeboard/2023/01/26/Test-Corrections.html",
            "date": " • Jan 26, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Test Corrections 52 Q",
            "content": "Stats . Score: 43/52 Total Score: 0.9 + 1.8 = 2.7/3 Time: 82 minutes Weak Areas: array transversals, substring, and arraylist . Q4 ABCDEF substring . String oldStr = &quot;ABCDEF&quot;; String newStr = oldStr.substring(1, 3) + oldStr.substring(4); System.out.println(newStr); . I chose D: BCDEF. That would be if newStr was oldStr.substring(1, 3) + oldStr.substring(3). So, it’s C: BCEF . Q25 Execute Manipulate . private List&lt;String&gt; animals; public void manipulate() { for (int k = animals.size() -1; k&gt;0; k--) { if (animals.get(k).substring(0,1).equals(&quot;b&quot;)) { animals.add(animals.size()-k,animals.remove(k)); } } } animals list is initialized as [&quot;bear&quot;, &quot;zebra&quot;, &quot;bass&quot;, &quot;cat&quot;, &quot;koala&quot;, &quot;baboon&quot;] . I chose D: . [“baboon”, “bear”, “zebra”, “bass”, “cat”, “koala”]. . For this one, I did not fully iterate through the loop in my head. The code basically moves any animal with a b into the “opposite” index (being the index that is the same amount of indices away from the other side of the list). However, as it goes throughout the whole thing, it would swap the b animals back to their right spot, so it’s just the original again. . Answer is B: [“bear”, “zebra”, “bass”, “cat”, “koala”, “baboon”] . Q29 Olympics Concat . int a = 1988; int b = 1990; String claim = &quot; that the world’s athletes &quot; + &quot;competed in Olympic Games in &quot;; String s = &quot;It is &quot; + true + claim + a + &quot; but &quot; + false + claim + b + &quot;.&quot;; . I thought it was E: does not compile, but it’s actually C: It is true that the world’s athletes competed in Olympic Games in 1988 but false that the world’s athletes competed in Olympic Games in 1990. The + operator concatenates strings, booleans, and integers. So, it’s not a problem that true and false are booleans, and it’s not a problem that a and b are integers. . Q31 Print in row major order . public static void rowMajor(int[][] arr) { /* missing code */ } . I chose E: . for (int[] j : arr) { for (int k : j) { System.out.print(arr[k] + &quot; &quot;); } } . It’s actually D: . for (int[] j : arr) { for (int k : j) { System.out.print(k + &quot; &quot;); } } . Instead of using k as the index, it’s already the actual number. So, it’s just k. . Q35 print values while traversing ArrayList numbers . In the code segment below, assume that the ArrayList object numbers has been properly declared and initialized to contain [0, 2, 4, 5]. . for (int k = numbers.size() - 1; k &gt;= 0; k--) { if (numbers.get(k) &gt; k) { System.out.print(k + &quot; &quot;); } } . What, if anything, is printed as a result of executing the code segment? . I chose D: 5 4 2, but that would be if it printed out the value at k. It’s actually printing the index itself, so its C: 3 2 1 . Q40 Remove names from a List . /** Removes all occurrences of nameToRemove from nameList. * @param nameList a list of names * @param nameToRemove a name to be removed from nameList */ public void removeName(List&lt;String&gt; nameList, String nameToRemove) { /* missing implementation */ } . options: . I for (String name : nameList) { if (name.equals(nameToRemove)) name.remove(); } II for (int k = 0; k &lt; nameList.size(); k++) { if (nameList.get(k).equals(nameToRemove)) nameList.remove(k); } III for (int k = nameList.size() - 1; k &gt;= 0; k--) { if (nameList.get(k).equals(nameToRemove)) nameList.remove(k); } . I Chose D: II and III, but II doesn’t work. As it traverses the array forward, as it removes an element, the size of the array decreases, so the next element is skipped. So, it’s actually C: III only . Q42 Remove zeroes from Arraylist by index . public static main void mystery(List&lt;Integer&gt; nums){ for (int k = 0; k &lt; nums.size(); k++) { if (nums.get(k).intValue() == 0) { nums.remove(k); } } } . List w/ [0,0,4,2,5,0,3,0] . I chose B: [4,2,5,3], but it was D: [0,4,2,5,3]. This was because the loop iterated forward while also removing indices, so it skipped a zero. . Q45 strArrMethod . public static String[] strArrMethod(String[] arr) { String[] result = new String[arr.length]; for (int j = 0; j &lt; arr.length; j++) { String sm = arr[j]; for (int k = j + 1; k &lt; arr.length; k++) { if (arr[k].length() &lt; sm.length()) { sm = arr[k]; // Line 12 } } result[j] = sm; } return result; } String[] testTwo = {&quot;last&quot;, &quot;day&quot;, &quot;of&quot;, &quot;the&quot;, &quot;school&quot;, &quot;year&quot;}; String[] resultTwo = strArrMethod(testTwo); . How many times is // line 12 called? I chose D: 15 times, but it was A: 4 times. Correct. Line 12 is executed each time the variable sm is updated because a new smallest value is found. When j has the value 0, sm is updated for “day” and “of”. When j has the value 1, sm is updated for “of”. When j has the value 4, sm is updated for “year”. When j has any of the values 2, 3, or 5, sm is not updated. Line 12 is executed four times. . Q52 X and O board . I chose B: the checkerboard with 0,0 as an O, but iot was actually E: where it was a checkerboard but checked for even or odd. The first set of nested for loops sets each element in board to “O”. The next for loop starts val at 0 and increments by 1 until val is 4, when val is 5 the loop terminates. When val is even, board is not updated, so nothing happens when val is 0. When val is 1, row is assigned 1 and col is assigned 0. The boolean condition in the while loop is true, so board[1][0] is assigned “X”. Then col is incremented to 1 and row is decremented to 0 and board[0][1] is assigned “X”. Then col is incremented to 2 and row is decremented to -1 and the while loop terminates. When val is 2, nothing changes about board. When val is 3, row is assigned 3 and col is assigned 0. The boolean condition in the while loop is true, so board[3][0] is assigned “X”. Then col is incremented to 1 and row is decremented to 2 and board[2][1] is assigned “X”. Then col is incremented to 2 and row is decremented to 1 and board[1][2] is assigned “X”. Then col is incremented to 3 and row is decremented to 0 and board[0][3] is assigned “X”. Finally, col is incremented to 4 and row is decremented to -1 and the while loop terminates. When val is 4, nothing changes about board. .",
            "url": "https://supermengman.github.io/blog/markdown/collegeboard/2023/01/20/Test-Corrections.html",
            "relUrl": "/markdown/collegeboard/2023/01/20/Test-Corrections.html",
            "date": " • Jan 20, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 6 to 10 Grades + references",
            "content": "GRADES . Unit 6: .9/1 | Unit 7: 1/1 | Unit 8: .9/1 | Unit 9: .95/1 | Unit 10: 1/1 | . TOTAL: 4.75/5 .",
            "url": "https://supermengman.github.io/blog/markdown/collegeboard/2022/12/15/Unit-6-to-10.html",
            "relUrl": "/markdown/collegeboard/2022/12/15/Unit-6-to-10.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 9 - inheritance",
            "content": "What is inheritance? . basically being able to reuse code over and over, defining functions that will be used for all child classes . each type of the parent c lass will extend, inheriting the base class | . SuperClass/SubClass . protected keyword to keep attiribute from being affected by outside modifiers | can add own attribute or customize an attribute in the subclass can call superclass constructor first | . | . HACK 1 . public class Animal { private String name; private int numLegs; public Animal(String name, int numLegs) { this.name = name; this.numLegs = numLegs; } public String getName() { return this.name; } public int getNumLegs() { return this.numLegs; } } public class Mammal extends Animal { private boolean hasFur; public Mammal(String name, int numLegs, boolean hasFur) { super(name, numLegs); this.hasFur = hasFur; } public boolean hasFur() { return this.hasFur; } } . Overriding . allows child class to override specific implementation of method in superclass | . public class Animal { private String name; private int numLegs; public Animal(String name, int numLegs) { this.name = name; this.numLegs = numLegs; } public String getName() { return this.name; } public int getNumLegs() { return this.numLegs; } public void makeNoise() { System.out.println(&quot;bahahaha&quot;); } } public class Mammal extends Animal { private boolean hasFur; public Mammal(String name, int numLegs, boolean hasFur) { super(name, numLegs); this.hasFur = hasFur; } public boolean hasFur() { return this.hasFur; } @Override public void makeNoise() { System.out.println(&quot;rawr&quot;); } } . super ? . make constructors and make methods | . Polymorphism . do one thing many ways, like using overriding | also compile time: early bindiong vs late binding (see Unit 5) | .",
            "url": "https://supermengman.github.io/blog/jupyter/student/2022/12/13/Unit-9-Inheritance.html",
            "relUrl": "/jupyter/student/2022/12/13/Unit-9-Inheritance.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 10 - Recursion",
            "content": "10.1 Recursion . recursive calls are calling part of the method . there&#39;s a call stack to keep track of all the times that a recursive function has been called, as well as their parameters | calls from top to bottom, returns from bottom back to the top | . Recursion vs loop: . iteration is repeating instructions repeatedly until condition is false | recursion used when big problem can be expressed in a smaller problem | difference: recursion uses function calls, iteration uses loops | . See Fibonacci Hacks: here . class FiboRecursion extends Fibo { // default constructor public FiboRecursion() { super(); } // takes input of number, calls constructor public FiboRecursion(int n) { super(n); } // the recursive function: type int so it feeds into self and returns a value public int fibNum(int n) { // if its the first 2 terms (0 or 1), set the data in the array and hashmap as 0 or 1 and return if (n &lt;= 1) { this.setDataRec(n, n); // setData as 0 or 1 return n; } int currentFibNum = fibNum(n-1) + fibNum(n-2); // sets the current fibonacci number to the sum of the previous two (recursion starts) this.setDataRec(n, currentFibNum); // sets data of the currentFibNum to the index of the fibNum (n) return currentFibNum; // returns for recursion } @Override // overwrite init function for the RECURSION protected void init() { // set name super.name = &quot;recursion&quot;; // populate array for (int i = 0; i &lt; super.size; i++) { super.list.add((long) 0); super.hash.put(i, super.list.clone()); } // find the fib num up to super.size minus 1 because does not include fibNum(super.size - 1); } // better setdata: can put into specific index public void setDataRec(int n, long num) { super.list.set(n, num); // sets something into the array at certain index ArrayList&lt;Long&gt; smallList = new ArrayList&lt;Long&gt;(super.list.subList(0,n+1)); // cuts off the list at the fibonacci number length, as it already populates with the amount needed super.hash.put(n, smallList.clone()); // adds the list to hashmap } } . 10.2 Binary Search . data needs to be in order | keep halving array | O(log(2n)) vs linear search O(n) | can be used in things like dictionary searching | . Linear Recursion: . function only makes a single call to itself (not multiple) | . Selection sort: . find min element repeatedly, and putting that at the end of sorted part | results in descending order | . Merge SOrt: . splits the problem or arraylist to sort, then merges together (divide and conquer) | divide input into two halves, calls itself for the halves, then merge (merge function) | .",
            "url": "https://supermengman.github.io/blog/jupyter/student/2022/12/12/Unit-10-Recursion.html",
            "relUrl": "/jupyter/student/2022/12/12/Unit-10-Recursion.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 8 - 2D Arrays",
            "content": "Learning Objective! . Represent collections of related primitive and object reference data using two dimensional array objects. . 2D Array Vocab: . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array Is public, so can be accessed in any class | Is also final, so can’t change it after array has been created | . | . The Basics: . A 2D array is an array of arrays, and can be a better way to store data | Declaring a 2D array: DataType[][] nameOf2DArray | . | Initializing a 2D array DataType[][] nameOf2DArray = new DataType[r][c]; r = # of rows The # of arrays in the array | r = list.length c = # of columns | . | The # of elements in the inner arrays | c = list[0].length | . | . | . | . Initializing a Sample Array: . public class Test { public static void main(String[] args) { int[][] arr = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }; System.out.println(&quot;arr[0][0] = &quot; + arr[0][0]); System.out.println(&quot;arr[1][2] = &quot; + arr[1][2]); System.out.println(&quot;arr[2][1] = &quot; + arr[2][1]); } } Test.main(null); . arr[0][0] = 1 arr[2][0] = 6 arr[2][1] = 8 . Accessing and Updating Elements of a 2D Array: . nameOf2DArray[r][c] | . Hack 1: Access the last element of the 2D Array list: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! System.out.println(&quot;arr[2][2] = &quot; + arr[2][2]); System.out.println(&quot;last &quot; + arr[arr.length - 1][arr[0].length - 1]); } } Test.main(null); . arr[2][2] = i last i . a quick tip for the future: list[list.length - 1][list[0].length - 1] | Updating an element: list[r][c] = value; | . | . Hack 2: Changing a Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Change Austin to Athens and print! System.out.println(&quot;Change Austin to Athens and print!&quot;); arr[2][0] = &quot;Athens&quot;; for (var row : arr) { for (var item : row) { System.out.println(item); } } } } Test.main(null); . Change Austin to Athens and print! Atlanta Baltimore Chicago Australia Boston Cincinnati Athens Beaumont Columbus . Nested Loops, Our Beloved: . You can use Nested Loops to traverse 2D Arrays for example: to print out an entire array in order, you need to use these | . | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Make sure your columns for loop is always inside your rows for loop! Unless you want it printed the other way of course | . | Print spaces and lines in between to make a neater matrix | . Hack 3: Unknown Dimensions: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Print out the array without using numerical values! for (int row = 0; row &lt; arr.length; row++) { for (int col = 0; col &lt; arr[0].length; col++) { System.out.println(arr[row][col]); } } } } Test.main(null); . Atlanta Baltimore Chicago Australia Boston Cincinnati Austin Beaumont Columbus . Searching for a Value in a 2D Array: . Here&#39;s a quick example to illustrate: | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { for (String item : row) { if (item.equals(name)) { match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Boston . Note: in the code, you see the use of : which essentially means within. | . Hack 4: Finding the Min/Max Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!&quot;); for (String[] row : arr) { for (String item : row) { if (item.length() &gt; longest.length()) { longest = item; } } } System.out.println(longest); } } Test.main(null); . Use nested for loops to find the longest or shortest string! Cincinnati . HW! . Please submit screenshots of your 4 hacks up and running to our Google Form, which also has a few 2D array related multiple choice questions. . Additionally, Complete and send a screenshot of your code for 2017 FRQ Q4: Successor Array in that same google form. . Please submit as a pair or group. . Extra Credit . public class Test { public static void main(String[] args) { String[][] arr = { { &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;*&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot; }, { &quot; &quot;, &quot; &quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot; &quot;, &quot; &quot; }, { &quot; &quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot; &quot; }, { &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot; } }; for (String[] row : arr) { for (String item : row) { System.out.print(item); } System.out.println(); } } } Test.main(null); . * *** ***** ******* .",
            "url": "https://supermengman.github.io/blog/jupyter/student/2022/12/06/Unit-8-2DArray.html",
            "relUrl": "/jupyter/student/2022/12/06/Unit-8-2DArray.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Iteration Lesson",
            "content": "Iteration in Java . Lesson Purpose: Review types of iteration and usages . Lesson Objectives: . review while/for loops | review string | nested iteration review | Iteration may be one of the most crucial features for any programming language, since they allow computers to do what they do best: do copious amounts of menial tasks quickly and efficiently. . Of course, Java can also perform iteration using numerous different structures. Today we&#39;ll be going over some of them. . First of all, the exam weights Iteration as 17.5-22.5% of the test, with 7-9 MC and part of FRQ 1. This is one of the largest if not the largest unit, so understanding how iteration works is critical to performance on the test as well as in basically all aspects of coding. . The overall purpose of iteration is to simplify code by allowing it to repeat. Loops will usually include some sort of conditional to check against, and while that conditional is true, the code within the loop will repeat. . 4.1 While Loops (2.B, 3.C) . Repeats lines of code until a certain condition evaluates to false | . While loops consist of 2 portions: the boolean expression and the brackets which store the looping code inside. . while (condition) { ... } . The boolean expression is checked before the loop is started and every time the loop ends and is about to start anew. Usually, inside the loop something is done that slightly changes the conditions for the boolean expression until it reads false and ends. In the example below, the condition is x &gt; 0, meaning that x has to be changed for the loop to stop. Inside the loop, x is decremented by 1 every time, changing the conditions over and over again until it finally returns false and terminates the while loop. . int x = 5; // The boolean expression in this case is x &gt; 0 while (x &gt; 0) { System.out.println(x); x--; } . 5 4 3 2 1 . One of the most basic applications of while loops is its ability to iterate over numerous elements. One such example would be summing up the numbers in an array: . int[] array = {3, 7, 0, 2, 4, 5, 9, 1, 3, 6, 3}; int total = 0; int i = 0; while (i &lt; array.length) { total += array[i]; i++; } System.out.println(total); . 43 . One unique application of while loops lie in infinite while loops, loops that run over and over again permanently. This is usually accomplished by setting the boolean condition to be true at all times. The only way to stop these loops are to use a break command, which ends the loop regardless of the conditions present. . This can be used for various things, like having a running process at all times or constantly taking in input from the user, like the example below: . import java.util.Scanner; Scanner input = new Scanner(System.in); String choice; while (true) { System.out.println(&quot;Would you like to continue: &quot;); choice = input.nextLine(); if (choice.equals(&quot;No&quot;)) { break; } } . Would you like to continue: Would you like to continue: Would you like to continue: . Do While loop . Do while loops are a variant of the while loop, where the code must be run first and then the condition is checked. In a normal while loop, the condition is checked then the code is run. So, a do while loop is forced to run at least once, which could be useul. . int i=1; do{ System.out.println(i); // forced to run i++; }while(i&lt;1); . 1 . int i = 1; while(i&lt;1) { // starts out false System.out.println(i); i++; } . Hacks . Say you have a company that makes a profit of $5,450,000 this year. Every year, the company has a profit increase of 5%. Determine how many years it would take to make a profit of at least $30,000,000 using a while loop. . public class WhileLoops { public static void main(String[] args) { } } WhileLoops.main(null); . 4.2 For Loops . One of the most tested concepts in the APCSA exam | Skills 3.C, 4.C, and 5.C | . Three Parts of a For Loop . Initialization of a variable | Test condition | . for (initialize; test condition; change) { loop body } . Example . for (int x = 1; x &lt;= 5; x++) { System.out.println(x); } . 1 2 3 4 5 . Control Flow Diagram . The code in the initialization area is executed only one time before the loop begins | the test condition is checked each time through the loop and the loop continues as long as the condition is true | the loop control variable change is done at the end of each execution of the body of the loop | When the loop condition is false, execution will continue at the next statement after the body of the loop. | . Hacks . - Change the code above to iterate instead from 1-5 to 10-15. (Print numbers 10-15) . - Convert 10 numbers of your choice from two temperature units (F to C, C to F, C to K) . public class ForLoops { public static void main(String[] args) { } } ForLoops.main(null); . 4.3 Loops and Strings . Strings can also be manipulated through the use of iteration. Strings can actually be thought of as an array of chars, so each char can also be manipulated as well! . String name = &quot;CodeCodeCode&quot;; for (int i = 0; i &lt; name.length(); i+=2) { System.out.println(name.substring(i,i+2)); } . Co de Co de Co de . 4.4 Nested Iteration . Nested iteration is where there is a loop within a loop. It&#39;s kind of similar to the nested conditional that we learned yesterday in syntax. . A typical usage of nested looping is for two dimensions, like getting the pixel value of each pixel in an image across the columns and rows of pixels. Or, it can be used to print across these rows and columns to display some text . A very common nested iteration is the use of nested for loops, as they are concise enough to be used within each other without getting confused. Here is an example of code that uses nested for loops: . for (int row = 0; row &lt; 5; row ++) { for (int column = 0; column &lt; 4; column++) { System.out.print(&#39;*&#39;); } System.out.println(); } . **** **** **** **** **** . As seen, the code above has an output of 20 stars, with 5 rows and 4 columns. The amount of times the nested iterations loop in total will be the amount the outer one iterates multiplied by the inner one. The inner loop must finish all of its iterations before the outer loop can continue. . Question: . What happens if you swap the inner with the outer loop? What change will the output make? | . There can also be nested while loops, although they are not as practical, having to write out those variables outside of the condition. . import java.util.ArrayList; /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkey: a 2D array of Monkey * As well as method to print the Poem */ class Monkey { //The area between class definition and the 1st method is where we keep data for object in Java private static ArrayList&lt;String[]&gt; monkeyList = new ArrayList&lt;String[]&gt;(); //2D Array: AP CSA Unit 8: 2D array of strings private String[] monkeyASCII; /** * Constructor initializes a 2D array of Monkey */ public Monkey(String[] monkeyASCII) { this.monkeyASCII = monkeyASCII; monkeyList.add(monkeyASCII); } /** * Loop and print monkey in array * ... repeat until you reach zero ... */ public static void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java with Objects!!!&quot;); // monkey (non-primitive) defined in constructor knows its length int monkeyCount = monkeyList.size(); for (int i = 1; i &lt;= monkeyCount; i++) //loops through 2D array length forwards { //this print statement shows current count of Monkey // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkey jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; i; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeyList.get(row).length; col++) { // prints specific part of the monkey from the column System.out.print(monkeyList.get(row)[col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;Too many monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { Monkey monkey0 = new Monkey(new String[]{ &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }); Monkey monkey1 = new Monkey(new String[]{ &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }); Monkey monkey2 = new Monkey(new String[]{ &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }); Monkey monkey3 = new Monkey(new String[]{ &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }); Monkey monkey4 = new Monkey(new String[]{ &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }); Monkey.printPoem(); //a new monkey list and output in one step } } Monkey.main(null); . Monkey Jumpers Poem in Java with Objects!!! 1 little monkey jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 2 little monkey jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ 3 little monkey jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 Too many monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Some modification to the code has been made, such as making monkeys an object, but the overall idea remains the same. It first iterates into a row on the 2d array, and then iterates through all columns of that row in the 2d array by using the nested iteration. . Questions: . Do you remember how to make it not backwards? | What would swapping the inner and outer loops do? (assuming that array indices are fixed) | What if we only wanted to print every other monkey? | What if we wanted to print every other body part of the monkey? | public class NestedIteration { public static void main(String[] args) { } } NestedIteration.main(null); . For Each Loops or enhanced for loops . What is a for each loop? . As the name suggests, for-each loops are similar to for loops. In Java, the for-each loop is used to iterate through elements of arrays and collections (like ArrayList). It is also known as the enhanced for loop. . Here is the syntax for a for-each loop: . for(dataType item : array) { ... } . includes: . array: an array or collection | item: each value in an array or collection | dataType: specify the type of data in the array (int) | . Example . public class ForEachLoops { public static void main(String[] args) { // create an array int[] data = {2, 10, 5, 12}; // for each loop for (int number: data) { System.out.println(number); } } } . Output: . 2 10 5 12 . In this example we used for each loops to iterate through the array, &quot;data&quot; and print out each number. The code is saying that for each value in the array, print out the number. . So why not just stick to the for loop? What&#39;s the purpose? . //For Loop char[] word = {&#39;m&#39;, &#39;o&#39;, &#39;n&#39;, &#39;k&#39;, &#39;e&#39;, &#39;y&#39;}; for (int i = 0; i &lt; word.length; ++ i) { System.out.println(word[i]); } . m o n k e y . //For Each Loop char[] word = {&#39;m&#39;, &#39;o&#39;, &#39;n&#39;, &#39;k&#39;, &#39;e&#39;, &#39;y&#39;}; for (char letter: word) { System.out.println(letter); } . m o n k e y . Both lines of codes yield the same results but the for-each loop is obviously much simpiler and easier to understand. . For each iteration, the for-each loop takes each element of the collection and stores it in a loop variable. Thus, it executes the code written in the body of the loop for each element of the array or collection. . Most importantly, the traversal happens until the last element of the array or collection. No indexing is involved . Pros: . makes code easier to read and understand | eliminates possible coding mistakes | . Cons: . The drawback of the enhanced for loop (for-each loop) is that it cannot traverse the elements in reverse order. In the for each loop you do not have the option to skip any element because it does not work on an index basis. Moreover, you cannot traverse the odd or even elements only. | limited variability to the collection | situational | . Hacks . Could I use a for-each loop to print out 4 of the 5 elements of an array only? . Write a for-each loop that adds up all the values of the array (sum): . int numbers[] = {2, 5, 7, 12} . and print the results . Final Hacks/HOMEWORK . Try to write a caesar cipher program that shifts each letter in a message 3 letters forward. Use any of the methods you learned today. Use it to decode the 3 messages we&#39;ve given you! . public class CaesarCipher { public static void main(String[] args) { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String message1 = &quot;Kfzb gly!&quot;; String message2 = &quot;zlab zlab zlab&quot;; String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; } } .",
            "url": "https://supermengman.github.io/blog/college%20board/units/2022/11/29/Unit-4-Iteration.html",
            "relUrl": "/college%20board/units/2022/11/29/Unit-4-Iteration.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 7 - Array List",
            "content": "GRADES . Unit 6: .9/1 | Unit 7: 1/1 | Unit 8: 1/1 | Unit 9: .95/1 | Unit 10: 1/1 | . TOTAL: 4.85/5 . Lesson Purpose and Objectives . Learn about the structure and functions of an arrayList and go over the key College Board concepts for arrayLists . ArrayLists are only 2.5%-7.5% but have many concepts from other units and are a good data structure to know. Also, the 3rd question of the FRQ is based on ArrayLists . 7.1 Introduction to ArrayList . Arrays ArrayLists . Static (fixed size) | Dynamic (can change size) | . Fundamental java feature | Part of a framework. Someone was nice and designed this with the behind the scenes being arrays | . An object with no methods | A class with many methods | . Not as flexible | Designed to be more flexible | . Can store more primitive data | Not designed to store primitives, they store object references | . | Slightly slower than Arrays | . | Can only be used with an import statement | . Real Life Array Example: You always have to have five players on the court . Real Life ArrayList Example: In dodgeball, the number of people in the game is changing based on who comes in or gets out . Primitive Data Types: . boolean | char | double | int | . Wrapper Class Data Types (Store the primitive values as objects) . Boolean | Character | Double | Integer | . import java.util.ArrayList; //you must import the java.util package // Instantiating: ArrayList&lt;DataType&gt; variableName = new ArrayList&lt;&gt;(n); //DataType must be nonprimitive data type public class introArrayList { public static void main (String[] args) { ArrayList&lt;Integer&gt; e1 = new ArrayList&lt;Integer&gt;(); //empty ArrayList&lt;String&gt; e2 = new ArrayList&lt;String&gt;(5); //5 elements ArrayList&lt;Dogs&gt; e3 = new ArrayList&lt;Dogs&gt;(); //you can store whatever objects you want } } . 7.2 ArrayList Methods . There are a lot of cool methods that you can use with arrayLists, but here are the ones College Board wants you to know for 7.2: . size(); . Returns the number of elements in the list | . add(obj); . Adds element at the end | . add(index, object); . Adds element at specific index | . remove(index); . Removes element from specific index | . set(index, object); . Replaces element at index with new object | . get(index); . Returns element at index | . import java.util.ArrayList; public class methodsArrayList { public static void main (String[] args) { ArrayList&lt;String&gt; dogs = new ArrayList&lt;String&gt;(Arrays.asList(&quot;Sparky&quot;, &quot;Duke&quot;, &quot;Noodle&quot;)); ArrayList&lt;String&gt; dogs2 = new ArrayList&lt;&gt;(Arrays.asList(&quot;Sparky&quot;, &quot;Duke&quot;, &quot;Noodle&quot;)); System.out.println(&quot;There are &quot; + dogs.size() + &quot; in the ArrayList&quot;); System.out.println(&quot;There are &quot; + dogs2.size() + &quot; in the ArrayList&quot;); //objects you add must be of the same data type dogs.add(&quot;Peanut&quot;); System.out.println(&quot;There are now &quot; + dogs.size() + &quot; dogs in the ArrayList&quot;); String myDog = dogs.get(2); System.out.println(&quot;My dog is named &quot; + myDog); } } //Note: you don&#39;t need to declare &lt;String&gt; again after new ArrayList methodsArrayList.main(null); . There are 3 in the ArrayList There are 3 in the ArrayList There are now 4 dogs in the ArrayList My dog is named Noodle . //Hmmmm... seems suspicious!!!!!! import java.util.ArrayList; public class example { public static void main (String[] args) { ArrayList&lt;Boolean&gt; questions = new ArrayList&lt;&gt;(); questions.add(true); questions.add(false); myMethod(questions); } public static void myMethod(ArrayList arr) { if (arr.size()&gt;0) { arr.set(0,&quot;Hello&quot;); //String with boolean??? Uh oh! System.out.println(arr.get(0)); } } } example.main(null); . Hello . import java.util.ArrayList; public class example { public static void main (String[] args) { ArrayList&lt;Boolean&gt; questions = new ArrayList&lt;&gt;(); questions.add(true); questions.add(false); myMethod(questions); } public static void myMethod(ArrayList&lt;Boolean&gt; arr) { if (arr.size()&gt;0) { arr.set(0,&quot;Hello&quot;); //String with boolean??? Uh oh! System.out.println(arr.get(0)); } } } example.main(null); //Make sure to specify data type so the compiler is more helpful and it avoids confusion //This also applies for returning and arrayList as well . | arr.set(0,&#34;Hello&#34;); //String with boolean??? Uh oh! incompatible types: java.lang.String cannot be converted to java.lang.Boolean . //Returning an ArrayList public static ArrayList methodName (ArrayList arr){ return arr; } . // HACK!!!! // Create an arrayList and use one of the cool methods for it import java.util.ArrayList; public class hack1 { public static void main (String[] args) { ArrayList&lt;Integer&gt; bruh = new ArrayList&lt;Integer&gt;(); bruh.add(3); bruh.add(3); bruh.add(3); bruh.add(3); for (int number : bruh) { System.out.println(number); } } } hack1.main(null); . 3 3 3 3 . 7.3 Traversing ArrayLists . there are 2 ways to traverse arraylists: for loops and enhanced for loops | use get() instead of bracket notation for getting an element of an arraylist | use size() to find number of elements in arraylist instead of using .length | . for loop . import java.util.*; public class main { public static void main(String[] args) { List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5); for (int i = 0; i &lt; numbers.size(); i++) { System.out.print(numbers.get(i) + &quot; &quot;); } } } main.main(null); . 1 2 3 4 5 . enhance for loops . import java.util.*; public class main { public static void main(String[] args) { List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5); for ( int num : numbers ) System.out.print(num + &quot; &quot;); } } main.main(null); . 1 2 3 4 5 . Common Mistakes . don&#39;t forget to import java.util.ArrayList | don&#39;t declare or instantiate ArrayList with a primitive data type, which are things such as int, double, and booleans. | don&#39;t forget the parentheses at the end of the constructor and the element types with the brackets: ArrayList list = new ArrayList(); &lt;/li&gt; don&#39;t confuse arrays with arraylists, don&#39;t use [], don&#39;t use .length use .size() instead | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Hack #2 . import java.util.ArrayList; ArrayList&lt;String&gt; color = new ArrayList&lt;String&gt;(); color.add(&quot;red apple&quot;); color.add(&quot;green box&quot;); color.add(&quot;blue water&quot;); color.add(&quot;red panda&quot;); for (int i = 0; i &lt; color.size(); i++) { if(color.get(i).contains(&quot;red&quot;)) { color.remove(i); } } System.out.println(color); /*/ using if(color.get(i).contains(&quot;red&quot;)) iterate through the arraylist and remove all elements that contain the word red in them /*/ . [green box, blue water] . 7.4 Developing Algorithms Using ArrayLists . Modify Array Values . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); for (int i = 0; i &lt; num.size(); i++) { num.set(i, num.get(i) * 2); } System.out.print(num); . [10, 2, 6] . find max value . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int maxValue = num.get(0); for (int number: num) { if (number &gt; maxValue) { maxValue = number; } } System.out.print(maxValue); . 5 . find min value . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int minValue = num.get(0); for (int number: num) { if (number &lt; minValue) { //if new min value found, replace current minValue minValue = number; } } System.out.print(minValue); . 1 . Hack #3 . // find the sum of the elements in the arraylist ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int sum = 0; for (int number: num) { sum += number; } System.out.println(sum); . 9 . 7.5 Searching . Often times we need to locate data inside linear structures. Normally we would use for loops in order to specify each element, one at a time, and do not need to track the index after execution. | . for ( int index = 0; index &lt; items.size(); index++ ){ //forward searching if ( items.get(index) == num ){ return index; } } . Important Things to Keep in Mind . When looking at int values, the == operator should be used. | When searching for a double value, we need to make sure the value is close enough by doing some math. | Object instances should always use the .equals(otherThing) method to check for a match. | . When searching a linear structure we need to send it the structure and what we are looking for as parameters. A standard for loop with an if block is all we need to search any linear structure. . public int whereIsMyNumber(int magicNumber, int [] myNumbers) { for (int index = 0; index &lt; myNumbers.length; index++) //search through every single spot { if (myNumbers[index] == magicNumber) //do they match? if so return index { return index; } } return -1; // if searched through every single spot, indicate its not there } . You shouldn&#39;t use the == operator when looking for an object. It will only return true if the variable and the element stored at the index point to the same memory, are aliases of each other. | . Here is an example of how you would search for a traditional object: . public int findTheWord(String searchedPhrase, ArrayList&lt;Book&gt; myBooks) { for (int index = 0; index &lt; myBooks.size(); index++) //search through every book in structure { Book currentBook = myBooks.get(index); //hold current book with current book variable String currentPhrase = currentBook.getDescription(); //get description of current book and store in variable currentPhrase if (currentPhrase.equals(searchedPhrase)) //if parameter = current phrase of book looking at - using .equals instead of == operator { return index; } } return -1; //if no match found, indicate its not there } . 7.6 Sorting . Selection sort identifies either the maximum or minimum of the compared values and iterates over the structure checking if the item stored at the index matches the condition, if so, it will swap the value stored at the index and continue. | The insertion sort is characterized by building a sorted structure as it proceeds. It inserts each value it finds at the appropriate location in the data structure. This is often accomplished by using a while loop as the inner loop. | . for (int outer = 1; outer &lt; randomList.size(); outer++) { DebugDuck tested = randomList.get(outer); //extract out a value out of list, passes to outer int inner = outer - 1; //goes back and compares to previous while ( inner &gt;= 0 &amp;&amp; tested.compareTo(randomList.get(inner)) &lt; 0 ) //checks to see if index is valid { randomList.set(inner + 1, randomList.get(inner)); //move up by one and replace original location inner--; } randomList.set(inner + 1, tested); //anything taken out would be placed back into structure } . 7.7 Ethical Issues Around Data Collection . Safety with Data Collection . It is very important to minimize user data collection in our programs. While collecting data in a smaller program may not be a big issue, establishing good practices with data security is always a safer bet when eventually moving to larger projects that manage data. . Whenever you come across data that you no longer will need, it is a good practice to explicitly remove that data altogether. . import java.util.Scanner; import java.util.Arrays; public class dataRemoval { public static void main(String[] args) { // just a scanner object Scanner sc = new Scanner(System.in); // makes an arraylist with some users already in it ArrayList&lt;String&gt; userList = new ArrayList&lt;&gt;(Arrays.asList(&quot;Kian&quot;, &quot;Kiannp44@gmail.com&quot;, &quot;Samuel&quot;, &quot;samuelwaang@gmail.com&quot;, &quot;Calissa&quot;, &quot;calissaT@gmail.com&quot;)); // takes user&#39;s name System.out.println(&quot;Log in &quot;); System.out.println(&quot;Please enter your name:&quot;); String name = sc.nextLine(); System.out.println(name); userList.add(name); // takes user&#39;s email System.out.println(&quot;Please enter your email:&quot;); String email = sc.nextLine(); System.out.println(email); userList.add(email); // prints all the current users in arraylist System.out.println(); System.out.println(&quot;Current users in databse &quot;); System.out.println(userList); // prompt to log out System.out.println(); System.out.println(&quot;Would you like to log out? (y/n)&quot;); String logOut = sc.nextLine(); if (logOut.equals(&quot;y&quot;)) { // if user logs out, remove their name and email from arraylist System.out.println(logOut); userList.remove(name); userList.remove(email); } // reprints current users in arraylist System.out.println(); System.out.println(&quot;Current users in database &quot;); System.out.println(userList); } } dataRemoval.main(null); . Log in Please enter your name: Evan Please enter your email: evanjoelsanchez@gmail.com Current users in databse [Kian, Kiannp44@gmail.com, Samuel, samuelwaang@gmail.com, Calissa, calissaT@gmail.com, Evan, evanjoelsanchez@gmail.com] Would you like to log out? (y/n) y Current users in database [Kian, Kiannp44@gmail.com, Samuel, samuelwaang@gmail.com, Calissa, calissaT@gmail.com] . Anonymizing Personal Data . Instead of using names for users, we can use hash codes instead, which means that each user will simply be identified by their hash code. . public class hashUsers { public static void main(String[] args) { Scanner sc = new Scanner(System.in); String name = sc.nextLine(); // this .hashCode() method will convert the name to a code which cannot be traced back to that original name int id = name.hashCode(); name = null; // name is now null, and nobody will ever know the original name I put in System.out.println(&quot;Hash Code: &quot; + id); } } hashUsers.main(null); . Hash Code: 2172094 . The Takeaway . It is important to understand that as a programmer handling user data, it is your responsibility to protect that collected data. The less data you collect, the less you have to safeguard. A compromised database will generally be an expensive lawsuit in a large scale project. . Homework . Quizziz . &lt;/div&gt; | .",
            "url": "https://supermengman.github.io/blog/java/labs/2022/11/12/Unit-7-arrayList.html",
            "relUrl": "/java/labs/2022/11/12/Unit-7-arrayList.html",
            "date": " • Nov 12, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Test Corrections 2014 Practice",
            "content": "Q4 Selection with variables x and y . int x = 7; int y = 3; if ((x&lt;10) &amp;&amp; (y&lt;0)) System.out.println(&quot;Value is: &quot; + x*y); else System.out.println(&quot;Value is: &quot; + x/y); . I chose A: Value is 21. This was because I misread the condition, believing it to be y &lt; 10 instead of 0. So, I thought the condition would evaluate to true. Instead, it is false, so the else code block should run. as x and y are integers, the x/y must also return an integer, truncating the decimals in 7/3 to 2. The answer is C. . Q23 manipulate method and animals list . private List&lt;String&gt; animals; public void manipulate() { for (int k = animals.size() -1; k&gt;0; k--) { if (animals.get(k).substring(0,1).equals(&quot;b&quot;)) { animals.add(animals.size()-k,animals.remove(k)); } } } animals list is initialized as [&quot;bear&quot;, &quot;zebra&quot;, &quot;bass&quot;, &quot;cat&quot;, &quot;koala&quot;, &quot;baboon&quot;] . I chose D: [“bear”, “baboon”, “zebra”, “bass”, “cat”, “koala”]. . For this one, I did not fully iterate through the loop in my head. The code basically moves any animal with a b into the “opposite” index (being the index that is the same amount of indices away from the other side of the list). However, as it goes throughout the whole thing, it would swap the b animals back to their right spot, so it’s just the original again. . Answer is B: [“bear”, “zebra”, “bass”, “cat”, “koala”, “baboon”] . Q26 Print odd integers in 1D array but not even . I basically misinterpreted what a for each loop would do, thinking that each x would be an index when in actuality it is the actual element. So, it should be A: . for (int x: arr) if (x % 2 != 0) System.out.println(x); .",
            "url": "https://supermengman.github.io/blog/markdown/collegeboard/2022/11/08/Test-Corrections.html",
            "relUrl": "/markdown/collegeboard/2022/11/08/Test-Corrections.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 6 HW",
            "content": "Arrays Overview . Arrays are 10-15% of the AP CSA Exam | The four main topics that College Board wants you to know Array creation and access | Traversing arrays | Enhanced for loops for arrays | Developing algorithms using arrays | . | The overall purpose of arrays is to store multiple values in a single variable, instead of declaring separate variables for each value. | . 6.1 Array Creation and Access . Arrays are used to store one data type | Unlike Arraylists, arrays have a fixed size and cannot be changed | Arrays can be denoted using braces {} Below is an example of a simple array storing our scrum team names [Meena, Shraddha, Madhumita, Pranavi] . | To use an array you have to use the command import java.util.Arrays; . | . Making Arrays . There are two ways to make arrays . using constructors | using pre-intiliazed arrays | . Accessing Elements in Arrays . You can access the elements in an array using different commands | . 6.2 Traversing Arrays . Traversing is accessing every value in the array | Can be done using a loop like a for loop or while loop | Below is an example - using a for loop, we can iterate through each fruit in the array of Strings and print it out | . Can also loop through an array in reverse | . If we have a list of numbers, we could change each value in the array by a certain amount | . We can also traverse an array using a while loop | . Bound Errors . ArrayIndexOutOfBoundsException thrown, can happen when using loops to access array elements | In the example below instead of the condition being while the index is less than the length of the array, the condition is less than or equal too | This mean the loop will try to run when i = 4 (since the length of the list is 4). However since array index starts from 0, the last item in the array will have an index of 3. So, index of 4 will be out of bounds, resulting in the error. | . Hack 3 . Create a function that takes in a list of integers and returns the list with the integers in ascending order. Print every element in this list | Example int[] myNumbers = new int[] {5, 3, 4, 1, 2}; | arraySorter(myNumbers); | Expected Output 1 | 2 | 3 | 4 | 5 | . | . | . int[] myNumbers = new int[] {5, 3, 4, 1, 2}; Arrays.sort(myNumbers); for (int num: myNumbers) { System.out.println(num); } . 1 2 3 4 5 . 6.3 Enhanced for loop for Arrays . This topic was pretty short, but essentially what you need to know is about the enhanced for loop. The enhanced for loop can be used to traverse through most data structures (i.g. arrays). However, it can only traverse in a forward direction. Usually the structure is like so . for (dataType i: arrayName) { do something with i } . Essentially, this code mentions how every element in the array (i) has to have something done to it. It&#39;s important to note that although there is access to the element i, but it isn&#39;t possible to change the value/set new values to element i. . We can use mutator methods on objects on the array to set the value of their instance variables. This is because i is a copy of the object reference, which means that i refers to the same object as the array element, so calling methods on i is the same as calling methods on the individual array elements themselves. For example . 6.4 Developing Algorithms using Arrays . Here are some algorithms that arrays can be used for (from college board standards), . Minimum and Maximum of a list of elements | Compute the sum, average, or mode of multiple elements | Determine if at least one element has a property | Access consecutive pairs of elements | Determine duplicates | . What to use when problem solving with arrays .length can be used to find the length of an array . The value at a specific index can be found with array[i], where i is the index | An element at index i can be replaced using array[i] = new element | You can iterate over an array with a for loop for(type element: array) { code here . | . Computing Sums with Arrays . See the code below for a sample algorithm of how to compute the sum of elements in an array. This could be applied to finding the mean, standard deviation, or any other algorithm that requires summation. . int[] array = {5, 1, 78}; // intialize int sum = 0; // variable to keep track of sum for (int number: array) { // iterates over each loop in the array sum += number; // the number is added to the sum } System.out.println(sum); //expected sum is 84, so 84 should be printed . 84 . Find the max . // from college board private double findMax(double[] values) { double max = values[0]; // initialize max with first element of array for(int i=1; i&lt;values.length; i++) { // starting with the second element, iterate over the rest of the array if (values[i] &gt; max) { // if the current element is greater than the max max = values[i]; // set the max equal to the greatest value until that point } } return max; } . Find the amount of even numbers. . private int findEvenNumbers(int[] values) { int evenCount = 0; // initalize count of even numbers to zero for(int value: values) { // iterate over every element of array if(value % 2 == 0) { // use modulus operator to check if value is even evenCount += 1; // increment evenCount if the value is even } } return evenCount; } . Hack 7 . Return a left-shifted array . Ex . {7,9,4} --&gt; {9,4,7} | {1,2,3} --&gt; {2,3,1} | {0,9} --&gt; {9,0} | {1} --&gt; {1} | . Hack 8 . Find the number of duplicate elements in an array. . Hack 9 . Use arrays to reverse a string. . Ex . &quot;hello &quot; --&gt; &quot;olleh &quot; | &quot;slay &quot; --&gt; &quot;yals &quot; | &quot;mom &quot; --&gt; &quot;mom &quot; | . Homework . Finish the FRQ part a for homework. This free response question deals with arrays. . public void addMembers(String[] names, int gradYear) { for(String name:names) { memberList.add(new MemberInfo(name, gradYear, true)); } } .",
            "url": "https://supermengman.github.io/blog/jupyter/java/collegeboard/frq/2022/11/07/test.html",
            "relUrl": "/jupyter/java/collegeboard/frq/2022/11/07/test.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "NATM 2022",
            "content": "Project Presentation: . We first presented to don’s parents, and bailey helped presenting technical parts of the project. . . CS Project: College Admission Score . . The first project I went to see was this group’s website, which was fastpages that had one page of rating what chance you had to get into college. I even tried it out, adding my grades and amount of extracurriculars. I got a really low score though, and I had to reload the page to even see the score. Overall, it was an interesting and humorous project. . Art Exploration . After finishing our CS presentation, my friends and I went exploring around the school. The first thing we found was the digital art projects: . . Then, we went to ceramics to check out their projects. . . I checked out my friend’s pottery, which had a really interesting octopus mug. . Finally, we checked out the AP studio art. . . They had some really cool black and white drawings, and the photography collage section was really interesting too. . back to cs . At last, we went back to CS and checked out people’s other projects. . . We checked out Rohan’s statistics project, which had some interesting characteristics of being able to store data. The data could be displayed in box plots and scatter plots, very cool. . That concludes our experience!!! .",
            "url": "https://supermengman.github.io/blog/markdown/pbl/2022/11/03/NATM-Blog.html",
            "relUrl": "/markdown/pbl/2022/11/03/NATM-Blog.html",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Collegeboard Unit 3 - Boolean Expressions and If Statements",
            "content": "3.1 Booleans . boolean expressions represent logic, find if true or false | operators: ==, !=, &lt;, &lt;=, etc | . 3.2 If statements . conditional statements: perform computations if boolean true or false . if statement: run code if true | . 3.3 if else . runs a block of code if there are alternatives | . 3.4 else if . another conditional if the frst one is false | . 3.5 compound boolean expressions . nested if: if within if (if outer is false, then inner is ignored too) | logical operators: &amp;&amp;:and&gt; !!:or&gt; !:not- short circuited evaluation . | . 3.6 DeMorgans law . basically distribute the negative and reverse all the operations | . These are laws named after Augustus De Morgan, a 19th C British Mathemetician. It uses the NOT operator, which takes precedent over AND and OR. It can be used to simplify expressions of true and false, and as boolean values are being compared in an if conditional, applying De Morgan&#39;s law to simplify a program&#39;s logic will be very helpful. . Overall, the idea is that: when distributing or factoring a negation from a boolean expression, the operators all switch. || changes to &amp;&amp; and vice versa. In addition, &lt; changes to =&gt;, and vice versa. PunApps AP Comp Sci . In addition: . &lt; becomes &gt;= | &gt; becomes &lt;= | == becomes != | &lt;= becomes &gt; | &gt;= becomes &lt; | != becomes == | . For example: . !(!A || !B) --&gt; A &amp;&amp; B . As you can see, the ! in the front propogates and distributes into the condition, negating the ! inside as well as changing the || (or) to &amp;&amp; (and). If you plug in the values, you will see that they equate to the same thing. It may not make intuitive sense exactly, but it is a proven law. . can be seen in a truth table - used in logic for boolean algebra, can tell what is true and false from different alignment sof the table | . 3.7 Comparing Objects . It might be common sense to just use the boolean equality == to compare two objects, but they will only return true if they are the same object (not a copy, but the exact memory code). If there is a variable that points to an object, it is identical, but if it is another instantiatoin of an object, it iwll be false. . String a = &quot;Hi&quot;; String b = &quot;Hi&quot;; String c = a; String d = &quot;Hi!&quot;; String e = new String(&quot;Hi&quot;); System.out.println(a == c); System.out.println(d == b); System.out.println(a == b); // no string constructor, so still same System.out.println(a == e); . true false true false . If you just want to commpare the two characteristics, the equals() method works. . String a = &quot;Hi&quot;; String b = &quot;Hi&quot;; String c = a; String d = &quot;Hi!&quot;; String e = new String(&quot;Hi&quot;); System.out.println(a.equals(c)); System.out.println(d.equals(b)); System.out.println(a.equals(b)); System.out.println(a.equals(e)); . true false true true . Although these examples are all on strings, they work on all objects. . Q1. 2019 AP CSA FRQ . The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. . public class APCalendar { /** Returns true if year is a leap year and false otherwise */ private static boolean isLeapyear(int year) { /* implementation not shown */} /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 * */ public static int numberOfLeapYears(int year1, int year2) { /* to be implemented in part (a) */} /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * * Returns 1 for January 1 (month = 1, day = 1) of any year. * * Precondition: The date represented by month, day, year is a valid date. * */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. * * */ public static int dayOfWeek(int month, int day, int year) { /* to be implemented in part (b) */} // there may be instance variables, constructors, and other methods not shown. } . (a) numberOfLeapYears . Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. . In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise | . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. . /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 * */ public static int numberOfLeapYears(int year1, int year2) { int leapYearCount = 0; // variable to keep track of amount of leap years // for loop: set year to year1, and while it is not yet at year2, find out if leapyear or not for(int year = year1; year &lt;= year2; year++) { // check the year for if it is leap year if(isLeapYear(year)) { leapYearCount++; // increase count } } return leapYearCount; // return the integer for the count of leap years } . The approach I took was to make a loop to go through all the years between the two years, and check if it was a leap year. If it was, it would add one to the count of the leap year. As seen above, this is that pseudocode written in actual java. Comparing to the solution code, it is almost identitcal (with the variable names as the exception). . (b) dayOfWeek . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. . In order to calculate this value, two helper methods are provided for you. . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. | dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. | . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. * * */ public static int dayOfWeek(int month, int day, int year) { firstDay = firstDayOfYear(year); // store the day of the week of the first day dayAfterNew = dayOfYear(month, day, year); // store the number of days since new year (inclusive) return (firstDay + dayAfterNew - 1) % 7; // adds the day of the week to the days since new year, but minus 1 because the dayAfterNew includes the first day. then, mod 7 } . For this one, I initially began by trying to make a loop, and adding each day to the number of the firstDay day by day. I soon realized that was not the intended solution. . Instead, I set variables for the firstDay day of the week, and the days after the new year as dayAfterNew. Then, I returned the value of them added minus 1 to get some number, and modulus 7 to take the modulus (remainder). The remainder would be the day of the week, which is what is returned . Comparing to the answer, I see that the solution has the return value stored within another variable, so it is almost identitical. . Conditionals Exercises . 2 . import java.util.Scanner; public class Exercise2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(&quot;input a: &quot;); double a = input.nextDouble(); System.out.println(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.println(&quot;Input c: &quot;); double c = input.nextDouble(); double discriminant = b * b - 4 * a * c; if (discriminant &gt; 0.0) { double root1 = (-b + Math.pow(discriminant, 0.5)/(2*a)); double root2 = (-b - Math.pow(discriminant, 0.5)/(2*a)); System.out.println(&quot;The roots are &quot; + root1 + &quot; and &quot; + root2); } else if (discriminant == 0) { double root = (-b/(2*a)); System.out.println(&quot;The root is &quot; + root); } else { System.out.println(&quot;no real roots&quot;); } } } Exercise2.main(null); . input a: Input b: Input c: The roots are -2.9384471871911697 and -7.061552812808831 . 4 Write a Java program that reads a floating-point number and prints &quot;zero&quot; if the number is zero. Otherwise, print &quot;positive&quot; or &quot;negative&quot;. Add &quot;small&quot; if the absolute value of the number is less than 1, or &quot;large&quot; if it exceeds 1,000,000. Go to the editor . public class Exercise4 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(&quot;enter number: &quot;); double number = input.nextDouble(); System.out.println(number); if (number &gt; 0) { System.out.println(&quot;positive&quot;); } else if (number == 0) { System.out.println(&quot;zero&quot;); } else { System.out.println(&quot;negative&quot;); } if (number &lt; 1) { System.out.println(&quot;negative&quot;); } else if (number &gt; 1000000) { System.out.println(&quot;large&quot;); } } } Exercise4.main(null); . enter number: 50.0 positive . 6 Write a Java program that reads in two floating-point numbers and tests whether they are the same up to three decimal places. Go to the editor . public class Exercise6 { static double truncate(double n, int decimalPlace) { n = n*Math.pow(10, decimalPlace); n = Math.floor(n); n = n/Math.pow(10, decimalPlace); return n; } public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(&quot;enter number: &quot;); double number1 = input.nextDouble(); double num1Trun = truncate(number1, 3); System.out.println(number1); System.out.print(&quot;enter number: &quot;); double number2 = input.nextDouble(); double num2Trun = truncate(number2, 3); System.out.println(number2); if (num1Trun == num2Trun) { System.out.println(&quot;same&quot;); } else { System.out.println(&quot;diff&quot;); } input.close(); } } Exercise6.main(null); . enter number: 5.32532643 enter number: 5.32585 same . 8 Write a Java program that takes the user to provide a single character from the alphabet. Print Vowel or Consonant, depending on the user input. If the user input is not a letter (between a and z or A and Z), or is a string of length &gt; 1, print an error message. . import java.util.ArrayList; import java.util.Scanner; import java.util.Set; /** * Exercise6 */ public class Exercise8 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(&quot;enter letter: &quot;); String letter = input.nextLine(); System.out.println(letter); Set&lt;String&gt; vowels = Set.of(&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot;A&quot;, &quot;E&quot;, &quot;I&quot;, &quot;O&quot;, &quot;U&quot;); if(letter.length() &gt; 1) { System.out.println(&quot;not one letter&quot;); } else if (!letter.matches(&quot;[a-zA-Z]+&quot;)) { System.out.println(&quot;not a letter&quot;); } else if (vowels.contains(letter)) { System.out.println(&quot;vowel&quot;); } else { System.out.println(&quot;consonant&quot;); } input.close(); } } Exercise8.main(null); . enter letter: a vowel . 10 Write a program in Java to display the first 10 natural numbers. . public class Exercise10 { public static void main(String[] args) { System.out.println(&quot;The first 10 natural numbers are:&quot;); for (int i = 1; i &lt;= 10; i++) { System.out.println(i); } } } Exercise10.main(null); . The first 10 natural numbers are: 1 2 3 4 5 6 7 8 9 10 . 12 Write a program in Java to input 5 numbers from keyboard and find their sum and average. . import java.util.Scanner; import java.util.Set; /** * Exercise6 */ public class Exercise12 { public static void main(String[] args) { int sum = 0; double average; System.out.println(&quot;Input the 5 numbers&quot;); Scanner input = new Scanner(System.in); for (int i = 0; i &lt; 5; i++) { int num = input.nextInt(); System.out.println(num); sum += num; } input.close(); average = (double) sum/5; System.out.println(&quot;The sum of 5 no is: &quot; + sum); System.out.println(&quot;The avg of 5 no is: &quot; + average); } } Exercise12.main(null); . Input the 5 numbers 8 7 3 6 5 The sum of 5 no is: 29 The avg of 5 no is: 5.8 . 14 Write a program in Java to display the multiplication table of a given integer. . public class Exercise14 { public static void main(String[] args) { System.out.println(&quot;Input the number: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(&quot;Input num of terms: &quot;); int termNum = input.nextInt(); for (int i = 0; i &lt;= termNum; i++) { System.out.println(num + &quot; X &quot; + i + &quot; = &quot; + num*i); } input.close(); } } Exercise14.main(null); . Input the number: Input num of terms: 6 X 0 = 0 6 X 1 = 6 6 X 2 = 12 6 X 3 = 18 6 X 4 = 24 6 X 5 = 30 . 16 Write a program in Java to display the pattern like right angle triangle with a number. . public class Exercise16 { public static void main(String[] args) { System.out.print(&quot;Input num of rows: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(num); for (int i = 1; i &lt;= num; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(j); } System.out.println(); } } } Exercise16.main(null); . Input num of rows: 10 1 12 123 1234 12345 123456 1234567 12345678 123456789 12345678910 . 18 Write a program in Java to make such a pattern like right angle triangle with number increased by 1.The pattern like : . public class Exercise18 { public static void main(String[] args) { System.out.print(&quot;Input num of rows: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(num); int numDisplay = 1; for (int i = 1; i &lt;= num; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(numDisplay + &quot; &quot;); numDisplay++; } System.out.println(); } } } Exercise18.main(null); . Input num of rows: 4 1 2 3 4 5 6 7 8 9 10 . 20 Write a program in Java to print the Floyd&#39;s Triangle. . public class Exercise20 { public static void main(String[] args) { System.out.print(&quot;Input num of rows: &quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); System.out.println(num); int numDisplay = 1; for (int i = 1; i &lt;= num; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(numDisplay + &quot; &quot;); numDisplay++; } System.out.println(); } } } Exercise20.main(null); . Input num of rows: 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .",
            "url": "https://supermengman.github.io/blog/jupyter/java/collegeboard/frq/student/2022/10/23/Unit-3-HW.html",
            "relUrl": "/jupyter/java/collegeboard/frq/student/2022/10/23/Unit-3-HW.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Collegeboard Unit 5 - Writing Classes",
            "content": "Lesson Notes . 5.1 Anatomy of a class . class: blueprint for objects, with instance variables, constructors, methods | objects are instances of classes | naming conventions: start uppercase letter, should be noun, not acronym | . Methods define functionality/behavior of an object, can access instance variables . ACCESS MODIFIERS: . public: no restrictions, can be accessed outside the class (used for classes and constructors) | private: only in class (instance variables) methods can be designated with these | . Benefit of modifiers: can limit access, and use getters/setters methods in order to interact with variables instead of directly editing the variable itself . 5.2 Constructors . initializes instance variables when object created | usually 2 or more constructors | can have multiple constructors with different parameters | no return because it is creating an object and its variables, not calling methods to do work and return a value | this keyword refers to the current object being called, usually being used to find the current object&#39;s variable or run a method on it | . 5.5 Modifiers/Accessor Methods . more specifically, they are getters/setters. They allow other classes to change the instance variables of a different class. It also is used to get private variables in an object . Mutator Methods . they are a set method to change the value of the private variable. They don&#39;t return a value, but are void methods | . Public vs Private vs Protected . public is available for class and subclasses and everything in the world/project | protected isnt available in the world but is available in the class | private is only used in the class see example in https://supermengman.github.io/blog/jupyter/java/collegeboard/frq/student/2022/10/23/Unit-3-HW.html | . 5.8 Scope and Access: . Class level is for instance variables | Method level is for local variables | Block level is for loop variables | . Extra . a main method in an abstract class can be used for tester methods, making sure that variables are set correctly. https://github.com/rjawesome/CSASpringTri2/blob/steptrack2/src/main/java/com/nighthawk/spring_portfolio/mvc/steptrack1/Person.java | a class can inherit from a parent class, and write new functions. see https://supermengman.github.io/blog/jupyter/java/collegeboard/2022/09/20/Fibonacci.html . also subclass, super in there subclass constructor calls main constructor with the super keyword (super calls the parent function methods) | . | also see override, with the @override allowing changes to the init function (overriding the parent) | . | abstract class/method: a restricted class that gets inherited from another class. methods can be in abstract classes, and are called when they are extended. This helps achieve security . it is an implementation of polymorphism, where one class can have different implementations of a method. java // Abstract class abstract class Animal { // Abstract method (does not have a body) public abstract void animalSound(); // Regular method public void sleep() { System.out.println(&quot;Zzz&quot;); } } | . | . // Subclass (inherit from Animal) class Pig extends Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(&quot;The pig says: wee wee&quot;); } } . class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } . Methods: . overloading method: If there are different types in the parameters, you can cwrite multiple methods with the same name, as they still count. | . class Calculate { void sum (int a, int b) { System.out.println(&quot;sum is&quot;+(a+b)) ; } void sum (float a, float b) { System.out.println(&quot;sum is&quot;+(a+b)); } public static void main (String[] args) { Calculate cal = new Calculate(); cal.sum(8,5); //sum(int a, int b) is method is called. cal.sum(4.6f, 3.8f); //sum(float a, float b) is called. } } . Standard Methods: . toString: a method to print out all the attributes of an object | equals(): a method to check if two objects and their attributes are equal (based on own criteria) | hashCode(): a method to generate a unique identifier for an object | . All can be lomboked in @Data, like in https://github.com/rjawesome/CSASpringTri2/blob/steptrack2/src/main/java/com/nighthawk/spring_portfolio/mvc/steptrack1/Person.java . Late Binding with superclasses . early binding is just static, meaning that it compiles and binds the object to the class definition declared | late binding means that it is bound to the child one or whatever is called in the new | . public class NewClass { public static class superclass { static void print() { System.out.println(&quot;print in superclass.&quot;); } } public static class subclass extends superclass { static void print() { System.out.println(&quot;print in subclass.&quot;); } } public static void main(String[] args) { superclass A = new superclass(); superclass B = new subclass(); A.print(); B.print(); } } NewClass.main(null); . print in superclass. print in superclass. . that was in early because its compiled, but if not it will say print in subclass. . Big O Notation . the chart shows the efficiency of algorithms | . Code FRQ . StepTracker, object w/ parameter that defines min steps to be active . methods: . addDailySteps, once per day | activeDays | averageSteps, returns avg num steps per day (total steps/number of days) | . Write the StepTracker class . public class StepTracker { // initialize variables private int minActiveSteps private int totalSteps private int numTotalDays private int numActiveDays // set default construct public StepTracker(int minActiveSteps) { this.minActiveSteps = minActiveSteps; this.totalSteps = 0; this.numTotalDays = 0; this.numActiveDays = 0; } // once per day, increment steps, days, and possibly active public void addDailySteps(int numSteps) { this.totalSteps += numSteps; this.numTotalDays++; if (numSteps &gt;= this.minActiveSteps) { this.numActiveDays++; } } // getter public int activeDays() { return this.numActiveDays; } // calculate public double averageSteps() { if (numTotalDays == 0) { return 0.0; } else { return (double) this.totalSteps/this.numTotalDays; } } } . Overview . here is where the private initial variables are stored: . private int minActiveSteps private int totalSteps private int numTotalDays private int numActiveDays . now for constructor: . public StepTracker(int minActiveSteps) { this.minActiveSteps = minActiveSteps; this.totalSteps = 0; this.numTotalDays = 0; this.numActiveDays = 0; } . It sets the default minactivesteps, and sets all the rest to 0. . public void addDailySteps(int numSteps) { this.totalSteps += numSteps; this.numTotalDays++; if (numSteps &gt;= this.minActiveSteps) { this.numActiveDays++; } } . It adds the steps to the total steps, and if the steps is over the active threshold, the active days will increase. . public int activeDays() { return this.numActiveDays; } . just a getter . public double averageSteps() { if (numTotalDays == 0) { return 0.0; } else { return (double) this.totalSteps/this.numTotalDays; } } . If there is 0 days, return 0 cuz thats what it says in the q . otherwise return steps/days to get average steps .",
            "url": "https://supermengman.github.io/blog/jupyter/java/collegeboard/frq/student/2022/10/22/Unit-5-HW.html",
            "relUrl": "/jupyter/java/collegeboard/frq/student/2022/10/22/Unit-5-HW.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Collegeboard Unit 2 - Using Objects",
            "content": "2.1: What are objects? . Objects are a reference type, similar to something like a String class. In fact, a String is an object. However, Objects contain primitive data types as well as reference data types. When you reference an object, you are referencing the point at which it is located. . Objects are defined by a class, which describes what attributes the object has and what things it can do with methods. . House metaphor: blueprint is the class, each house is an object | . An object is not a type of a class, but it is a specific instance. . 2.2: Initializing/Constructing . To initialize an object, the syntax goes like: . Person andrew = new Person(&quot;andrew&quot;, 16); . This creates a new person object called andrew, with attributes of &quot;andrew&quot; and 16. . 2.3: Methods . Methods are code that do something, sometimes taking parameters. THey can change data, print text, etc. . There are also void and non void methods. Void methods don&#39;t return anything, but change data or print things. The void keyword is used. . Methods can be static or non static. . Static methods are general to the class, and do not have to be in any specific object. It basically changes something general. To make a method static, the static keyword is added. . 2.4 Methods with parameters . A method can be created with parameters as well, taking in input and returning some output. There can be multiple methods with the same name but different parameters, which are all valid. . 2.6 String Concatenation . Strings can be appended using + or +=. This is also known as concatenation. . String a = &quot;hello&quot;; String b = &quot;world&quot;; String result = a + &quot; &quot; + b; System.out.println(result); . hello world . Mixing types in concatenation is also possible, but often parentheses are needed to do calculations if using multiple primitives. Otherwise, it will take each number as a string and just append it. . String message = &quot;12&quot; + 4 + 3; // print out 1243 System.out.println(message); . 1243 . String message = &quot;12&quot; + (4 + 3); // print out 127 with the parenthesis System.out.println(message); . 127 . 2.7 String Methods + comparing . compare strings . you can use equals(String) or compareTo(String) equals returns a boolean, and just returns true if two strings are equal | . String a = &quot;blah&quot;; System.out.println(a.equals(&quot;bleh&quot;)); // false System.out.println(a.equals(&quot;blah&quot;)); // true . false true . compareTo returns an integer, comparing the string relative to the string within the parentheses. It returns a negative if the original string comes before the one inside, or positive if its afetr. . String a = &quot;blah&quot;; System.out.println(a.compareTo(&quot;bleh&quot;)); // negative System.out.println(a.compareTo(&quot;blah&quot;)); // 0 System.out.println(a.compareTo(&quot;bl&quot;)); // positive . -4 0 2 . comparing numbers The normal operations in if statements still apply here, like: . &lt; | &gt; | &lt;= | = . | != | == | . Using these will return true or false depending on if it works. . 2.9 Math class with random . The math class has many useful methods to calculate, like abs (absolute value) or sqrt (square root) The most complex of the methods is random, which returns some number between 0 (inclusive) and 1 (non inclusive) . Math.random(); . 0.5430955616916946 . HOMEWORK . Full solution: . public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ public WordMatch(String word) { /* implementation not shown */ this.secret = word; } /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ // START OF SOLUTION A public int scoreGuess(String guess) { // Tracks number of times the substring appears int occurrences = 0; // secret.length() - guess.length() to avoid index overflow with substring later on for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { // Checks if the substring is equal to the guess if (secret.substring(i, i + guess.length()).contains(guess)) { occurrences++; // Moves forward by guess.length() - 1 to move forward in the string (and avoid repeats) // -1 is included because i++ i += guess.length() - 1; } } return occurrences * guess.length() * guess.length(); } // END OF SOLUTION A // START OF SOLUTION B public String findBetterGuess(String guess1, String guess2) { /* to be implemented in part (b) */ if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } else if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } else if (guess1.compareTo(guess2) &gt; 0) { return guess1; } else { return guess2; } } // END OF SOLUTION B public static void main(String[] args) { WordMatch testA = new WordMatch(&quot;mississippi&quot;); System.out.println(testA.scoreGuess(&quot;issippi&quot;)); System.out.println(testA.scoreGuess(&quot;mississippi&quot;)); WordMatch testB = new WordMatch(&quot;concatenation&quot;); System.out.println(testB.findBetterGuess(&quot;ten&quot; , &quot;nation&quot;)); System.out.println(testB.findBetterGuess(&quot;con&quot;, &quot;cat&quot;)); } } WordMatch.main(null); . part a . scoreGuess, finds times guess occurs as a substring of secret and multiply that by the square of length of guess . public int scoreGuess(String guess) { // Tracks number of times the substring appears int occurrences = 0; // secret.length() - guess.length() to avoid index overflow with substring later on for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { // Checks if the substring is equal to the guess if (secret.substring(i, i + guess.length()).contains(guess)) { occurrences++; // Moves forward by guess.length() - 1 to move forward in the string (and avoid repeats) // -1 is included because i++ i += guess.length() - 1; } } return occurrences * guess.length() * guess.length(); } . The condition secret.substring(i, i + guess.length()).contains(guess) checks if the substring the length of the guess contains the guess itself. If it does, it adds one to the occurences, and moves the pointer to avoid repeats. . Part B . findBetterGuess, returns better guess of two strings. If they are equal, alphabetically greater guess is returned . public String findBetterGuess(String guess1, String guess2) { /* to be implemented in part (b) */ if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } else if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } else if (guess1.compareTo(guess2) &gt; 0) { return guess1; } else { return guess2; } } . The first two if statements are purely for returning the higher score guess. However, if they are equal, then the compareTo metod finds the alphabetically greater guess. . Google Form . 6/7 .",
            "url": "https://supermengman.github.io/blog/jupyter/java/collegeboard/frq/student/2022/10/14/Unit-2-Using-Objects.html",
            "relUrl": "/jupyter/java/collegeboard/frq/student/2022/10/14/Unit-2-Using-Objects.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Collegeboard Unit 1 - Primitive Data Types",
            "content": "Data Types . Primitives . int: aka integer, holds non-fractional number values | byte: similar to int, but only takes 8 bits of memory (only numbers rom -128 to 127) | short: in between an int and a byte | long: larger than an int | float: basic fractional numbers, which loses precision after 6 decimal places | double: it is a double-precision decimal number, with 64 bits of memory. It can go to further decimal places with higher precision. | boolean: only two values of true or false. | char: an integer that represents a unicode encoded character. | . int x = 12425; byte b = 40; short s = 10452; long l = 81849583; float f = 6.4224f; double d = 5.42624574367345; boolean b = false; char c = &#39;a&#39;; . Wrapper class . Primitive data types also have a class in Java that &quot;wrap&quot; the class. . Integer wraps int | Byte wraps byte | Short wraps short | Long wraps long | Float wraps float | Double wraps double | Boolean wraps boolean | Character wraps char | . Wrapper classes are used when working with collections, or putting the data into an ArrayList or other data structures. Methods can also be called on wrapper classes, with an example being toString(). . one use case is in parsing other types of primitives into something else, for example using the parseInt method of the wrapper class | . Integer exampleInt = 10; // defining variable with wrapper class System.out.println(exampleInt); // printing the variable value System.out.println(exampleInt.intValue()); // using the method to get the value in the object . 10 10 . Strings are a special wrapper class, being a sequence of characters or a character array. . String exampleString = &quot;hello world&quot;; System.out.println(exampleString + &quot;!&quot;); . hello world! . Hacks . SI unit converter . import java.util.Scanner; import java.util.Arrays; public class UnitConvertor { double[] conversionFactors = new double[]{0.001, 0.01, 0.1, 1, 10, 100, 1000}; // the conversion factors with meters as a reference, has decimals so double String[] unitList = {&quot;millimeter&quot;, &quot;centimeter&quot;, &quot;decimeter&quot;, &quot;meter&quot;, &quot;decameter&quot;, &quot;hectometer&quot;, &quot;kilometer&quot;}; // the units themselves, so a string to match public static double inputMeasurement; // below are the global variables that get called later, double here as the measurement is going to be a number with possible decimals public static String inputUnits; // the unit name, so string public static int unitIndex; // this is used to store the index of the unit that is typed, which is an integer public static String unitMessage = &quot;Enter the units for that measurement (millimeter, centimeter, decimeter, meter, decameter, hectometer, kilometer), type exit to exit: &quot;; // message that can change int firstUnitIndex; // index is integer int secondUnitIndex; // index is integer private String firstUnit; // the name of unit so String private String secondUnit; // name of unit so string // constructor, calls the functions to enter the fields of data and saves them as attributes public UnitConvertor() { this.enterMeasurement(); this.enterUnits(); this.firstUnitIndex = unitIndex; this.firstUnit = inputUnits; unitMessage = &quot;Enter the units to convert to (millimeter, centimeter, decimeter, meter, decameter, hectometer, kilometer), type exit to exit: &quot;; this.enterUnits(); this.secondUnitIndex = unitIndex; this.secondUnit = inputUnits; } // method to check if string matches exit, booleon because yes or no (takes string as input as it has to compare to the string) private boolean isExit(String inputMeasurement) { return inputMeasurement.matches(&quot;exit&quot;); } // enterMeasurement input method, with scanner private void enterMeasurement() { Scanner measurement; while (true) { System.out.print(&quot;Enter the first measurement (only numbers), type any letter to exit: &quot;); measurement = new Scanner(System.in); try { inputMeasurement = measurement.nextDouble(); System.out.println(inputMeasurement); measurement.close(); break; // breaks the loop, continues on with program } catch (Exception e) { System.out.println(&quot;See you later!&quot;); System.exit(0); // end program if not a number } } } // enterUnits method with scanner, checks the input and matches the string public void enterUnits() { Scanner units; while (true) { System.out.print(unitMessage); // prints the message (which changes because it has to be called twice for different purposes) units = new Scanner(System.in); try { inputUnits = units.nextLine(); System.out.println(inputUnits); if (isExit(inputUnits)) { // check if user wants to stop program, then exits System.out.println(&quot;See you next time!&quot;); System.exit(0); } unitIndex = Arrays.asList(unitList).indexOf(inputUnits); // find index of the unit that the user inputted in the array, write to variable unitIndex to be stored later if (unitIndex == -1) { // if not found in the array, then ask user to retype System.out.println(&quot;not a valid unit choice &quot;); } else { break; // if is found in array, stop the loop and continue } } catch (Exception e) { System.out.println(&quot;Not a valid string, &quot; + e); } units.close(); } } // calculation of the unit change, divides the conversion factors like in dimensional analysis; returns double because the initial inputMeasurement is a double public double changeCalculation() { return (inputMeasurement * conversionFactors[this.firstUnitIndex]/conversionFactors[this.secondUnitIndex]); } // asks user if they want to add a number onto their converted measurement public void add() { Scanner yesOrNo; while (true) { System.out.print(&quot;Would you like to add by another number of the same unit? (y/n) &quot;); yesOrNo = new Scanner(System.in); try { String roundYN = yesOrNo.nextLine(); // asks user input for y/n System.out.println(roundYN); if (roundYN.matches(&quot;n&quot;)) { // if no, skip over adding yesOrNo.close(); break; } else if (roundYN.matches(&quot;y&quot;)) { // if yes, create another scanner to ask for the number Scanner adding; while (true) { System.out.print(&quot;enter the number to add: &quot;); adding = new Scanner(System.in); try { double addInput = adding.nextDouble(); // gets user input, as a double because the number inputted can have decimals as a measurement System.out.println(addInput); adding.close(); double finalCalculation = this.changeCalculation(); // gets the value of the original converted measurement, which is a double and writes to variable finalCalculation += addInput; // compound assignment operator, adds the user input to the converted measurement quickly System.out.println(finalCalculation + &quot; &quot; + this.secondUnit + &quot;s.&quot;); // print the added number break; } catch (Exception e) { System.out.println(&quot;Not a double, &quot; + e); } } } else { // if not yes or no, tells user to redo System.out.println(&quot;not a valid input&quot;); } } catch (Exception e) { System.out.println(&quot;Not a valid string, &quot; + e); } yesOrNo.close(); } } // truncate the number if user wants to (whole number) private void truncating() { Scanner yesOrNo; while (true) { // asks user if wants to truncate or exit System.out.print(&quot;Would you like to truncate to the nearest whole number? (y/exit) &quot;); yesOrNo = new Scanner(System.in); try { String roundYN = yesOrNo.nextLine(); System.out.println(roundYN); if (isExit(roundYN)) { // if user types exit, the program completes System.out.println(&quot;See you next time!&quot;); yesOrNo.close(); System.exit(0); } else if (roundYN.matches(&quot;y&quot;)) { // if user says y, truncates int truncatedConversion = (int)this.changeCalculation(); // casts the calculation into an int, truncating it to whole number System.out.println(truncatedConversion + &quot; &quot; + this.secondUnit + &quot;s.&quot;); yesOrNo.close(); break; } else { System.out.println(&quot;not a valid input&quot;); // tells user to type valid input } } catch (Exception e) { System.out.println(&quot;Not a valid string, &quot; + e); } yesOrNo.close(); } } // static main method, creates object converting and outputs the conversion + calls the add or truncate methods in addition public static void main(String[] args) { UnitConvertor converting = new UnitConvertor(); System.out.println(&quot;Your measurement of &quot; + inputMeasurement + &quot; &quot; + converting.firstUnit + &quot;s&quot; + &quot; is &quot; + converting.changeCalculation() + &quot; &quot; + converting.secondUnit + &quot;s.&quot;); converting.add(); converting.truncating(); } } UnitConvertor.main(null); . Enter the first measurement (only numbers), type exit to exit: 56.32 Enter the units for that measurement (millimeter, centimeter, decimeter, meter, decameter, hectometer, kilometer), type exit to exit: meter Enter the units to convert to (millimeter, centimeter, decimeter, meter, decameter, hectometer, kilometer), type exit to exit: decimeter Your measurement of 56.32 meters is 563.1999999999999 decimeters. Would you like to add by another number of the same unit? (y/n) y enter the number to add: 67.53 630.7299999999999 decimeters. Would you like to add by another number of the same unit? (y/n) n Would you like to truncate to the nearest whole number? (y/exit) 7 not a valid input Would you like to truncate to the nearest whole number? (y/exit) y 563 decimeters. . Casting, specifically for truncating or rounding . int truncatedConversion = (int)this.changeCalculation(); // casts the calculation into an int, truncating it to whole number . By casting the calculation (a double) into an int, it truncates to a whole number. This is one useful application of casting. . Casting, specifically for division . Another use of casting is for division. Usually for accurate division, the numbers need to be casted into doubles. If they were integers or longs, then the output would be a truncated whole number still, whic might not be too useful. . int a = 3; int b = 2; System.out.println(a/b); // will be truncated to 1 System.out.println((double) a/(double) b); // is cased to double so will be 1.5 . 1 1.5 . Additional Information . Operators . Usually primitive manipulation can be done through math operators like +, -, *, or /. . int i = 3; System.out.println(i/3); // 3/3 = 1 System.out.println(i*3); // 3*3 = 9 System.out.println(i + 3); // 3+3 = 6 System.out.println(i-3); // 3-3=0 . 1 9 6 0 . Incrementing primitive data can also be achieved by adding itself to the number to increment. . int i = 4; System.out.println(i); i = i + 4; // add 4 to i and set i to that value System.out.println(i); . 4 8 . However, this code is a little repetitive, having to type out the variable twice. So, there is built in syntax for doing this incrementation or decrementation. . The operator is in the form of: var (operator)= (amount to change) . in this, the operator can be *, /, +, - | the amount to change is the amount to add, subtract, divide, multiply, etc. | . This is especially helpful in loops like for loops, where a variable has to be incremented every run. Shorthand makes code more readable and faster to type. . i = 5; System.out.println(i); i += 2; System.out.println(i); // should be 7 . 5 7 . Even this can sometimes be too much to write. Incrementations of one or decrementations of one are by far very common, especially when iterating. So, i++ or i-- do this exact thing. . i = 193; i++; System.out.println(i); . 194 . HACKS Grade Calculator . import java.util.Scanner; /** * GradeCalculator */ public class GradeCalculator { public static void main(String[] args) { // scanner Scanner input = new Scanner(System.in); // check if in final System.out.print(&quot;Is the final in the tests category? &quot;); Boolean testOrNot = input.nextBoolean(); System.out.println(testOrNot); // taking inputs System.out.print(&quot;What is your current grade? &quot;); double currentGrade = input.nextDouble(); System.out.println(currentGrade); // if not a test (in separate) if (!testOrNot) { System.out.print(&quot;How much percent of your grade is the final? &quot;); double finalPercent = input.nextDouble(); System.out.println(finalPercent); System.out.print(&quot;What is your desired grade? &quot;); double desiredGrade = input.nextDouble(); System.out.println(desiredGrade); input.close(); // found this formula off rapidtables double finalGrade = (desiredGrade/100 - (currentGrade/100)*(1-finalPercent/100))/(finalPercent/10000); System.out.print(&quot;You need a &quot; + finalGrade + &quot; on the test.&quot;); } else { // if is in tests category // collect inputs System.out.print(&quot;How much of your grade is the tests category? &quot;); double testPercent = input.nextDouble(); System.out.print(&quot;What is your current grade (in tests category)? &quot;); double currentTestGrade = input.nextDouble(); System.out.print(&quot;How many points is in the tests category currently? &quot;); double currentTestPoints = input.nextDouble(); System.out.print(&quot;How many points is the final? &quot;); double finalPoints = input.nextDouble(); System.out.print(&quot;What is your desired grade? &quot;); double desiredGrade = input.nextDouble(); System.out.println(desiredGrade); // WIP double currentPoints = currentTestGrade - testPercent * currentTestPoints; double finalNeedPoints = (desiredGrade/100)-((1-testPercent/100)*1); } } } GradeCalculator.main(null); . Is the final in the tests category? false What is your current grade? 70.0 How much percent of your grade is the final? 20.0 What is your desired grade? 90.0 You need a 170.00000000000003 on the test. .",
            "url": "https://supermengman.github.io/blog/jupyter/java/collegeboard/student/2022/10/14/Unit-1-Primitives.html",
            "relUrl": "/jupyter/java/collegeboard/student/2022/10/14/Unit-1-Primitives.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Backend of API + Frontend",
            "content": "Backend . code .",
            "url": "https://supermengman.github.io/blog/markdown/pbl/2022/10/10/Roster-API-Notes.html",
            "relUrl": "/markdown/pbl/2022/10/10/Roster-API-Notes.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Roster",
            "content": "id name category grade .",
            "url": "https://supermengman.github.io/blog/data/roster",
            "relUrl": "/data/roster",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Arrays and Images",
            "content": "Image Scaling and ASCII Conversion . In this example we print out a row of text for each row in the image. However, it seems as if the image is too tall. To address this problem, try to output a single character per block of pixels. In particular, average the grayscale values in a rectangular block that’s twice as tall as it is wide, and print out a single character for this block. . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;backendAPI&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 545786 1225x510 images/backendAPI.png . Personal Hacks . For these hacks, we will do the red, green, blue, then gray scale, and finally fix compression. . Template . Some of the code is copied from above; I took the constructor, setStats(), and resize(). Those functions are pretty optimized already, so trying to remake them is pointless. What I do need to optimize with completelly new code is the color scaling and ASCII conversions, which will be later. . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; abstract class ImageBlueprint { protected final String inDir = &quot;images/&quot;; // location of images protected final String outDir = &quot;images/tmp/&quot;; // location of created files protected String inFile; protected String resizedFile; protected String colorFile; protected String ext; // extension of file protected long bytes; protected int width; protected int height; // get attributes of picture public ImageBlueprint(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.colorFile = this.outDir + name + &quot;New&quot; + &quot;.png&quot;; this.setStats(); } public ImageBlueprint(String image) { this(image, &quot;png&quot;); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } //ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // Will be used later protected abstract void conversion(); } . Seeing Red... Green... Blue... and Gray . Now that I&#39;ve written the template, it&#39;s actually pretty easy to scale everything to a certain color. . For the primary colors, all that&#39;s needed is to set the values of the non scaled color to be 00 (for example red-scaling would have green and blue be set to 00). . public class RedConversion extends ImageBlueprint { public RedConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;Red&quot; + &quot;.png&quot;; } public RedConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;Red&quot; + &quot;.png&quot;; } @Override protected void conversion() { BufferedImage img = null; PrintWriter colorPrt = null; FileWriter colorWrt = null; // Just deletes file if already exists in tmp try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } // try { // colorPrt = new PrintWriter(colorWrt = new FileWriter(this.colorFile, true)); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(col.getRed(), 0, 0).getRGB(); img.setRGB(j, i, rgb); } } //System.out.println(&quot;for loop done&quot;); try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } public static void main(String[] args) { RedConversion nicandrohan = new RedConversion(&quot;nicandrohan&quot;, &quot;png&quot;); nicandrohan.conversion(); } } . . public class GreenConversion extends ImageBlueprint { public GreenConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;Green&quot; + &quot;.png&quot;; } public GreenConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;Green&quot; + &quot;.png&quot;; } @Override protected void conversion() { BufferedImage img = null; PrintWriter colorPrt = null; FileWriter colorWrt = null; // Just deletes file if already exists in tmp try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } // try { // colorPrt = new PrintWriter(colorWrt = new FileWriter(this.colorFile, true)); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(0, col.getGreen(), 0).getRGB(); img.setRGB(j, i, rgb); } } // System.out.println(&quot;for loop done&quot;); try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } public static void main(String[] args) { GreenConversion nicandrohan = new GreenConversion(&quot;nicandrohan&quot;, &quot;png&quot;); nicandrohan.conversion(); } } . . public class BlueConversion extends ImageBlueprint { public BlueConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;Blue&quot; + &quot;.png&quot;; } public BlueConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;Blue&quot; + &quot;.png&quot;; } @Override protected void conversion() { BufferedImage img = null; PrintWriter colorPrt = null; FileWriter colorWrt = null; // Just deletes file if already exists in tmp try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } // try { // colorPrt = new PrintWriter(colorWrt = new FileWriter(this.colorFile, true)); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(0, 0, col.getBlue()).getRGB(); img.setRGB(j, i, rgb); } } // System.out.println(&quot;for loop done&quot;); try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } public static void main(String[] args) { BlueConversion nicandrohan = new BlueConversion(&quot;nicandrohan&quot;, &quot;png&quot;); nicandrohan.conversion(); } } . . Gray-scaling is a bit more complicated. There are multiple methods that, in theory, should work. According to one website I found, there are two methods: average or weighted. Average is as simple as it seems - just take the average of all three values: . Grayscale = (R + G + B) / 3 . However, due to the way that humans perceive light (with different sensitivities for different colors), this isn&#39;t the most accurate. This leads to the weighted method, based on the way humans actually weigh different colors of light in their vision:&gt; Grayscale = 0.299R + 0.587G + 0.114B . note from andrew: humans see green the best, so that is why green is the highest. The weights make sense. | . I got the information on grayscaling from here, so click that link to learn more about it. . Since the weighted method is more efficient, that&#39;s what I&#39;ll be using here. Actually implementing it was pretty difficult though. Instead of using the numeric RGB values, I had to calculate the luminance in order to make everything work. . note from andrew: I found the research for these values, so I assume that calculating luminance requires knowing the gamma, which is assumed to be 2.2 in this case. | . public class GrayConversion extends ImageBlueprint { public GrayConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;Gray&quot; + &quot;.png&quot;; } public GrayConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;Gray&quot; + &quot;.png&quot;; } @Override protected void conversion() { BufferedImage img = null; PrintWriter colorPrt = null; FileWriter colorWrt = null; // Just deletes file if already exists in tmp try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } // try { // colorPrt = new PrintWriter(colorWrt = new FileWriter(this.colorFile, true)); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { //Color col = new Color(img.getRGB(j, i)); //int rgb = new Color((int)(0.299 * col.getRed()), (int)(0.114 * col.getGreen()), (int)(0.587 * col.getBlue())).getRGB(); int rgb = img.getRGB(j, i); int r = (rgb &gt;&gt; 16) &amp; 0xFF; int g = (rgb &gt;&gt; 8) &amp; 0xFF; int b = (rgb &amp; 0xFF); // Normalize and gamma correct: float rr = (float) Math.pow(r / 255.0, 2.2); float gg = (float) Math.pow(g / 255.0, 2.2); float bb = (float) Math.pow(b / 255.0, 2.2); // Calculate luminance: float lum = (float) (0.2126 * rr + 0.7152 * gg + 0.0722 * bb); // Gamma compand and rescale to byte range: int grayLevel = (int) (255.0 * Math.pow(lum, 1.0 / 2.2)); int gray = (grayLevel &lt;&lt; 16) + (grayLevel &lt;&lt; 8) + grayLevel; img.setRGB(j, i, gray); } } // System.out.println(&quot;for loop done&quot;); try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } public static void main(String[] args) { GrayConversion nicandrohan = new GrayConversion(&quot;nicandrohan&quot;, &quot;png&quot;); nicandrohan.conversion(); } } . . ASCII Hell . Finally, I&#39;m going to convert images to ASCII characters. The problem with the old method was that it stretched the image out too much and didn&#39;t look good at all. I found that the best solution would be to take 4 rows and 2 columns of pixels and convert them into a single ASCII character, so that&#39;s what I implemented here. . Also, as a side note, I basically just copied the previous code and edited that. No point in reinventing the wheel once you already get what&#39;s happening. . Additionally, (I didn&#39;t have to, but) I tried to fix the ASCII characters to be more evenly spaced out. I decided to use the link provided and found a chart of 94 characters organized by those that took the most dark space to those that took the least. . Now here&#39;s the fun math part. I wanted to get a mostly divisible number but 94 only factors into 47 and 2, so I rounded to 90 and decided to take 15 of those ASCII characters to use. Then, I took every 6th character in the character list to get my values. Next, I derived an equation to get the thresholds. Since the max value of RGB is 255 and the max percentage of coverage is 23.1%, I got t = (1 - 1/0.23) * 255 to find the thresholds. Finally, I compared each character and plugged its respective coverage percent into the equation to get every threshold. . As for the results, they went a bit differently than how I expected. I&#39;m not going to show them here, but they&#39;re a lot more detailed than the original ASCII calculator. Unfortunately, I don&#39;t think it looks super good with smaller images, so I decided to keep the old conversion. . public class ASCIIConversion extends ImageBlueprint { public ASCIIConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;ASCII&quot; + &quot;.txt&quot;; } public ASCIIConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;ASCII&quot; + &quot;.txt&quot;; } @Override protected void conversion() { // Controls how big chunks are taken for ASCII characters final int XLENGTH = 1; final int YLENGTH = 2; BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; Color col = null; try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.colorFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i += YLENGTH) { for (int j = 0; j &lt; img.getWidth(); j += XLENGTH) { // colorSum stores total sum of RGB values, counter keeps track of how many are being counted // colorSum/counter = average // average is taken to get ASCII character double colorSum = 0; int counter = 0; for (int k = 0; k &lt; XLENGTH; k++) { for (int l = 0; l &lt; YLENGTH; l++) { if (k+j &lt; img.getWidth() &amp;&amp; l+i &lt; img.getHeight()) { counter++; col = new Color(img.getRGB(j + k, i + l)); colorSum += (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); } } } double average = colorSum / counter; try { asciiPrt.print(asciiChar(average)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; // Higher quality, looks better with bigger images // if (g &gt;= 224.6) { // str = &quot; &quot;; // } else if (g &gt;= 186.6) { // str = &quot;-&quot;; // } else if (g &gt;= 165.5) { // str = &quot;;&quot;; // } else if (g &gt;= 143) { // str = &quot;(&quot;; // } else if (g &gt;= 137.5) { // str = &quot;&lt;&quot;; // } else if (g &gt;= 127.5) { // str = &quot;L&quot;; // } else if (g &gt;= 123.1) { // str = &quot;1&quot;; // } else if (g &gt;= 113.1) { // str = &quot;n&quot;; // } else if (g &gt;= 102) { // str = &quot;s&quot;; // } else if (g &gt;= 85.4) { // str = &quot;h&quot;; // } else if (g &gt;= 75.4) { // str = &quot;4&quot;; // } else if (g &gt;= 69.8) { // str = &quot;e&quot;; // } else if (g &gt;= 62.1) { // str = &quot;5&quot;; // } else if (g &gt;= 51) { // str = &quot;D&quot;; // } else if (g &gt;= 35.5) { // str = &quot;Q&quot;; // } else if (g &gt;= 17.8) { // str = &quot;M&quot;; // } else { // str = &quot;@&quot;; // } if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } public static void main(String[] args) { ASCIIConversion nicandrohan = new ASCIIConversion(&quot;nicandrohan&quot;, &quot;png&quot;); nicandrohan.conversion(); } } . . Check bailey&#39;s post for results; we worked on this together in class. .",
            "url": "https://supermengman.github.io/blog/java/pbl/2022/10/03/image-conversion.html",
            "relUrl": "/java/pbl/2022/10/03/image-conversion.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Weather Fetch API",
            "content": "Image Weather F Feels like F Location . | | | |",
            "url": "https://supermengman.github.io/blog/data/weather",
            "relUrl": "/data/weather",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Rapid API Implementation",
            "content": "Find an API and implement Fetch following Covid example. Answer these questions in implementation… . Benefit of using and API? Benefit(s) of backend implementation? . To Do: . [x] find API on rapidAPI | [x] copy/repackage code from project link | [x] make sure that httprequest itself works | [x] parse json to find stuff | [ ] possibly build spring boot around it (using objects); | [ ] restart instance, test on ec2 --&gt; deploy | . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://weatherapi-com.p.rapidapi.com/current.json?q=209.66.205.197&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;0fb4bb4059msh8489d467f79e14ep1d57f9jsnd0d67fb163e6&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;weatherapi-com.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //RapidAPI Body System.out.println(response.body()); . {&#34;location&#34;:{&#34;name&#34;:&#34;Rancho Penasquitos&#34;,&#34;region&#34;:&#34;California&#34;,&#34;country&#34;:&#34;United States of America&#34;,&#34;lat&#34;:32.96,&#34;lon&#34;:-117.11,&#34;tz_id&#34;:&#34;America/Los_Angeles&#34;,&#34;localtime_epoch&#34;:1664390698,&#34;localtime&#34;:&#34;2022-09-28 11:44&#34;},&#34;current&#34;:{&#34;last_updated_epoch&#34;:1664389800,&#34;last_updated&#34;:&#34;2022-09-28 11:30&#34;,&#34;temp_c&#34;:28.3,&#34;temp_f&#34;:82.9,&#34;is_day&#34;:1,&#34;condition&#34;:{&#34;text&#34;:&#34;Sunny&#34;,&#34;icon&#34;:&#34;//cdn.weatherapi.com/weather/64x64/day/113.png&#34;,&#34;code&#34;:1000},&#34;wind_mph&#34;:2.2,&#34;wind_kph&#34;:3.6,&#34;wind_degree&#34;:239,&#34;wind_dir&#34;:&#34;WSW&#34;,&#34;pressure_mb&#34;:1014.0,&#34;pressure_in&#34;:29.95,&#34;precip_mm&#34;:0.0,&#34;precip_in&#34;:0.0,&#34;humidity&#34;:55,&#34;cloud&#34;:0,&#34;feelslike_c&#34;:29.6,&#34;feelslike_f&#34;:85.3,&#34;vis_km&#34;:16.0,&#34;vis_miles&#34;:9.0,&#34;uv&#34;:7.0,&#34;gust_mph&#34;:4.3,&#34;gust_kph&#34;:6.8}} . Backend implementation on Spring boot: . As seen, I set up the code such that I could get (curl) a site on my local spring boot, returning the data about weather. I was about to implement this into displaying with javascript, but as of now the AWS servers are down so the links are not working yet. If it does get fixed, it will be seen here. . The source code can be seen here, but here is a snippet of the code that i changed: . public ResponseEntity&lt;JSONObject&gt; getCovid() { //calls API once a day, sets body and status properties Long currentTime = System.currentTimeMillis()/(1000*60); if (last_run == null || (currentTime - last_run)&gt;5) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://weatherapi-com.p.rapidapi.com/current.json?q=209.66.205.197&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;0fb4bb4059msh8489d467f79e14ep1d57f9jsnd0d67fb163e6&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;weatherapi-com.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = currentTime; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } . Instead of getting the date, I get the epoch time and convert it to minutes. When I pull from the API, if it is successfull, I set the time that I ran the API to the last_run. So, if the difference between the two runs is greater than 5 minutes, then it will request the API again. As this is weather, I think 5 minutes is adequate time, and also enough to take advantage of my 1 million requests per month. . Questions? . Benefit of using an API? | An API allows code to interact with data from a server, and this is necessary especailly for our development environment, which is deploying a website. We will constantly have to interact with web servers and possibly serve our own data, so an API is necessary to make it easy to access data without having to write a lot of code. It provides a template for easier interaction in the future. . Benefits of backend implementation? | As described above, if it was only frontend, the code would have to request the source api every time a user reloads, which could be wasteful if the API hasn&#39;t had any meaningful changes or updates to its data. So, mine limits requests to every 5 minutes to the source server, caching and saving the last run. This cuts down on unnecessary cost, which could be a problem when scaled up. .",
            "url": "https://supermengman.github.io/blog/jupyter/javascript/pbl/2022/09/28/API-Usage.html",
            "relUrl": "/jupyter/javascript/pbl/2022/09/28/API-Usage.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Program Design Science Olympiad Website",
            "content": "Idea: Science Olympiad Website . As many of our members are in Science Olympiad (4/8 of them), and we have friends in different classes, we decided to combine two teams to make one large group. Our idea was to make a Science Olympiad website, being able to create a database of current and past science olympiad members and assigning them to competitions. . Features (Wire Frame, Concept) . Overall, the design should include a navigation bar, with dropdown menus for things like events, rosters, and instructors. The events page should have a brief overview of each event, and perhaps a link can be put in each one for another page with further information. . For the rosters, it should just be displaying the database, maybe with javascript styling and data management as seen in this weeks javascript learning. . As for events, there should be multiple areas for things like a calendar API, so others can request information on when a certain event or where it is. . A core feature would be the need for accounts. These accounts would have information logged directly into the rosters, and should update if they choose to update their information inside a profile tab. There should also be an option to choose desired events and add those categories into the roster. . Another feature would be the creation of groups for events, where information of the group will be shared to all members of the group to allow them to find contact information quickly and easily. It would make organization easier than trying to interpret a google sheets. . Modeling/UML . . This is a diagram for how the data will be transferred between users and the website for logging in. Inside CurrentUser will be attributes like school, grade, and events, which would get updated regularly into the database. . In addition, instructors should have more features in an admin area that is only accessible to them. There should be a database to check if the user is an instructor, and allow access to admin. This admin area will have areas to set groups and delete users or change data as well in the database. .",
            "url": "https://supermengman.github.io/blog/markdown/pbl/2022/09/25/Program-Design.html",
            "relUrl": "/markdown/pbl/2022/09/25/Program-Design.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "JavaScript Frontend",
            "content": "function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } . This above code helps me to debug code and check outputs. . // define a function to hold data for a Person class Person { constructor(name, grade, school, category) { this.name = name; this.grade = grade; this.school = school; this.role = &quot;&quot;; this.category = category; } // define a setter for role in Person data setRole(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person toJSON() { const obj = { name: this.name, grade: this.grade, school: this.school, role: this.role, category: this.category }; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } } // make a new Person and assign to variable teacher var instructor = new Person(&quot;Krish P&quot;, 11, &quot;Del Norte High School&quot;, [&quot;Anatomy&quot;, &quot;Codebusters&quot;]); // object type is easy to work with in JavaScript logItType(instructor); // before role logItType(instructor.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher instructor.setRole(&quot;Instructor&quot;); // set the role logItType(instructor); logItType(instructor.toJSON()); . object ; Person { name: &#39;Krish P&#39;, grade: 11, school: &#39;Del Norte High School&#39;, role: &#39;&#39;, category: [ &#39;Anatomy&#39;, &#39;Codebusters&#39; ] } string ; {&#34;name&#34;:&#34;Krish P&#34;,&#34;grade&#34;:11,&#34;school&#34;:&#34;Del Norte High School&#34;,&#34;role&#34;:&#34;&#34;,&#34;category&#34;:[&#34;Anatomy&#34;,&#34;Codebusters&#34;]} object ; Person { name: &#39;Krish P&#39;, grade: 11, school: &#39;Del Norte High School&#39;, role: &#39;Instructor&#39;, category: [ &#39;Anatomy&#39;, &#39;Codebusters&#39; ] } string ; {&#34;name&#34;:&#34;Krish P&#34;,&#34;grade&#34;:11,&#34;school&#34;:&#34;Del Norte High School&#34;,&#34;role&#34;:&#34;Instructor&#34;,&#34;category&#34;:[&#34;Anatomy&#34;,&#34;Codebusters&#34;]} . I made the Person into a class definition, easier to read than the function. It is quite similar to Java, with getters and setters like setRole. . var students = [ new Person(&quot;Don T&quot;, 11, &quot;Del Norte High School&quot;, [&quot;Bridge&quot;, &quot;Roller Coaster&quot;]), new Person(&quot;Rohan G&quot;, 11, &quot;Del Norte High School&quot;, [&quot;Fast Facts&quot;]), new Person(&quot;John Doe&quot;, 11, &quot;Oak Valley Middle School&quot;, [&quot;Crave The Wave&quot;]) ]; class SciolyRoster { constructor(instructor, students) { // set instructors instructor.setRole(&quot;Instructor&quot;); this.instructor = instructor; // set students this.students = students; // initiate the array for roster this.roster = [instructor]; // add all students to the array this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.roster.push(student); }); // convert to JSON this.json = []; this.roster.forEach(person =&gt; this.json.push(person.toJSON())); } } . [Function: SciolyRoster] . Creating a list of students to use, and then also making a class definition for easier reading. . roster2021 = new SciolyRoster(instructor, students); logItType(roster2021.json); . object ; [ &#39;{&#34;name&#34;:&#34;Krish P&#34;,&#34;grade&#34;:11,&#34;school&#34;:&#34;Del Norte High School&#34;,&#34;role&#34;:&#34;Instructor&#34;,&#34;category&#34;:[&#34;Anatomy&#34;,&#34;Codebusters&#34;]}&#39;, &#39;{&#34;name&#34;:&#34;Don T&#34;,&#34;grade&#34;:11,&#34;school&#34;:&#34;Del Norte High School&#34;,&#34;role&#34;:&#34;Student&#34;,&#34;category&#34;:[&#34;Bridge&#34;,&#34;Roller Coaster&#34;]}&#39;, &#39;{&#34;name&#34;:&#34;Rohan G&#34;,&#34;grade&#34;:11,&#34;school&#34;:&#34;Del Norte High School&#34;,&#34;role&#34;:&#34;Student&#34;,&#34;category&#34;:[&#34;Fast Facts&#34;]}&#39;, &#39;{&#34;name&#34;:&#34;John Doe&#34;,&#34;grade&#34;:11,&#34;school&#34;:&#34;Oak Valley Middle School&#34;,&#34;role&#34;:&#34;Student&#34;,&#34;category&#34;:[&#34;Crave The Wave&#34;]}&#39; ] . SciolyRoster.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid black;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); var body = &quot;&quot;; // set up top row of table body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;School&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Category&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row in roster2021.roster) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + roster2021.roster[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + roster2021.roster[row].grade + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + roster2021.roster[row].school + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + roster2021.roster[row].role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + roster2021.roster[row].category + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;header&gt;2021 Roster&lt;/header&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); } $$.html(roster2021._toHtml()); . 2021 Roster . NameGradeSchoolRoleCategory . Krish P | 11 | Del Norte High School | Instructor | Anatomy,Codebusters | Don T | 11 | Del Norte High School | Student | Bridge,Roller Coaster | Rohan G | 11 | Del Norte High School | Student | Fast Facts | John Doe | 11 | Oak Valley Middle School | Student | Crave The Wave | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; As seen, this allows me to print the people in Scioly 2021 with a nice title at the start as well as extra categories for the event and school. Most of the data structure is similar to the person code in Mr Morts javascript, but they are class definitions instead of functions. This makes it easier to read and see within the funciton itself. . &lt;/div&gt; . .",
            "url": "https://supermengman.github.io/blog/jupyter/javascript/pbl/2022/09/25/Javascript.html",
            "relUrl": "/jupyter/javascript/pbl/2022/09/25/Javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Fibonacci",
            "content": "Code . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Extending: . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result double duration; /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc double startTime = System.nanoTime(); this.init(); double endTime = System.nanoTime(); this.duration = ((endTime - startTime)); } class FiboRecursion extends Fibo { // default constructor public FiboRecursion() { super(); } // takes input of number, calls constructor public FiboRecursion(int n) { super(n); } // the recursive function: type int so it feeds into self and returns a value public int fibNum(int n) { // if its the first 2 terms (0 or 1), set the data in the array and hashmap as 0 or 1 and return if (n &lt;= 1) { this.setDataRec(n, n); // setData as 0 or 1 return n; } int currentFibNum = fibNum(n-1) + fibNum(n-2); // sets the current fibonacci number to the sum of the previous two (recursion starts) this.setDataRec(n, currentFibNum); // sets data of the currentFibNum to the index of the fibNum (n) return currentFibNum; // returns for recursion } @Override // overwrite init function for the RECURSION protected void init() { // set name super.name = &quot;recursion&quot;; // populate array for (int i = 0; i &lt; super.size; i++) { super.list.add((long) 0); super.hash.put(i, super.list.clone()); } // find the fib num up to super.size minus 1 because does not include fibNum(super.size - 1); } // better setdata: can put into specific index public void setDataRec(int n, long num) { super.list.set(n, num); // sets something into the array at certain index ArrayList&lt;Long&gt; smallList = new ArrayList&lt;Long&gt;(super.list.subList(0,n+1)); // cuts off the list at the fibonacci number length, as it already populates with the amount needed super.hash.put(n, smallList.clone()); // adds the list to hashmap } } // extending for WHILE class FiboWhile extends Fibo { // calls super constructor default public FiboWhile() { super(); } // constructor with input public FiboWhile(int n) { super(n); } @Override // override old init protected void init() { super.name = &quot;while&quot;; //name // initializes variables for first terms of fibo int previousTerm = 0, currentTerm = 1; // initiate variable for while loop int i = 1; while (i &lt;= super.size) { // setData as the previous term super.setData(previousTerm); // nextTerm is the previous 2 terms added int nextTerm = previousTerm + currentTerm; // update the two old terms to move one up the fibo sequence previousTerm = currentTerm; currentTerm = nextTerm; // repeat i++; } } } // extending for FOR class FiboFor extends Fibo { // constructor public FiboFor() { super(); } // constructor with input public FiboFor(int n) { super(n); } // overrides init for FOR @Override protected void init() { super.name = &quot;for&quot;; // initializes variables for first 2 terms int previousTerm = 0, currentTerm = 1; for (int i = 1; i &lt;= super.size; i++) { // in essence same code as while, but more concise super.setData(previousTerm); int nextTerm = previousTerm + currentTerm; // shift the terms up one in sequence previousTerm = currentTerm; currentTerm = nextTerm; } } } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } System.out.println(&quot;time taken = &quot; + this.duration/1000000 + &quot; ms&quot;); } // inspiration from https://stackoverflow.com/a/5503239 public static boolean areSame(long value, long... values) { for (long i: values) if(value != i) return false; return true; } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { // prints for all types Fibo fib = new Fibo(); fib.print(); System.out.println(); FiboFor fibFor = fib.new FiboFor(); fibFor.print(); System.out.println(); FiboWhile fibWhile = fib.new FiboWhile(); fibWhile.print(); System.out.println(); FiboRecursion fibRecursion = fib.new FiboRecursion(); fibRecursion.print(); if (Fibo.areSame(fib.getNth(), fibFor.getNth(), fibRecursion.getNth(), fibWhile.getNth())) { System.out.println(&quot;all values are equal: &quot; + fib.getNth()); } } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] time taken = 3.806 ms Init method = for fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] time taken = 0.0621 ms Init method = while fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] time taken = 0.0632 ms Init method = recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] time taken = 74.7499 ms all values are equal: 4181 . Break It Down! . For . // extending for FOR class FiboFor extends Fibo { // constructor public FiboFor() { super(); } // constructor with input public FiboFor(int n) { super(n); } // overrides init for FOR @Override protected void init() { super.name = &quot;for&quot;; // initializes variables for first 2 terms int previousTerm = 0, currentTerm = 1; for (int i = 1; i &lt;= super.size; i++) { // in essence same code as while, but more concise super.setData(previousTerm); int nextTerm = previousTerm + currentTerm; // shift the terms up one in sequence previousTerm = currentTerm; currentTerm = nextTerm; } } } . Skill 1.B . In essence, the for overrides the init function. It then implements a for loop, which adds the previous 2 terms as many times as the nth number of the fibonacci sequence, then stops. It uses the super to call the parent constructor, as well as set values for the name. It also calls super.setData using the super. . While . // extending for WHILE class FiboWhile extends Fibo { // calls super constructor default public FiboWhile() { super(); } // constructor with input public FiboWhile(int n) { super(n); } @Override // override old init protected void init() { super.name = &quot;while&quot;; //name // initializes variables for first terms of fibo int previousTerm = 0, currentTerm = 1; // initiate variable for while loop int i = 1; while (i &lt;= super.size) { // setData as the previous term super.setData(previousTerm); // nextTerm is the previous 2 terms added int nextTerm = previousTerm + currentTerm; // update the two old terms to move one up the fibo sequence previousTerm = currentTerm; currentTerm = nextTerm; // repeat i++; } } } . Skill 1.B . Almost the same thing as the for loop, except the variable of i is defined outside the loop. It also uses super. It&#39;s slightly slower, possibly due to the initialization of the variable out of the iteration. . Recursion . class FiboRecursion extends Fibo { // default constructor public FiboRecursion() { super(); } // takes input of number, calls constructor public FiboRecursion(int n) { super(n); } // the recursive function: type int so it feeds into self and returns a value public int fibNum(int n) { // if its the first 2 terms (0 or 1), set the data in the array and hashmap as 0 or 1 and return if (n &lt;= 1) { this.setDataRec(n, n); // setData as 0 or 1 return n; } int currentFibNum = fibNum(n-1) + fibNum(n-2); // sets the current fibonacci number to the sum of the previous two (recursion starts) this.setDataRec(n, currentFibNum); // sets data of the currentFibNum to the index of the fibNum (n) return currentFibNum; // returns for recursion } @Override // overwrite init function for the RECURSION protected void init() { // set name super.name = &quot;recursion&quot;; // populate array for (int i = 0; i &lt; super.size; i++) { super.list.add((long) 0); super.hash.put(i, super.list.clone()); } // find the fib num up to super.size minus 1 because does not include fibNum(super.size - 1); } // better setdata: can put into specific index public void setDataRec(int n, long num) { super.list.set(n, num); // sets something into the array at certain index ArrayList&lt;Long&gt; smallList = new ArrayList&lt;Long&gt;(super.list.subList(0,n+1)); // cuts off the list at the fibonacci number length, as it already populates with the amount needed super.hash.put(n, smallList.clone()); // adds the list to hashmap } } . Skill 1.B . This one was the most intensive, especially as adding data into the predefined ArrayList and HashMap proved to be quite difficult. In specific, the recursion required things to be added into the array out of order, so I could not rely on the setData method. However, I could also not just add data into any index in the ArrayList, because I couldn&#39;t add data into an empty Array, only add or append to it. So, I had to first loop through how many fibonacci numbers were going to get calculated and add placeholder values to both the ArrayList and the HashMap. Then, I had to create a new method to set the data into a specific index, as seen above. It has to truncate the ArrayList as the placeholder values stay beyond the Fibonacci value calculated. . The recursion itself wasn&#39;t that complicated: if it was either 1 or 0, it would just return 1 and 0 to the respective fibonacci number. When you call a specific number, it sets the fibonacci number for the previous two added together, which calls it again and recurses upon itself. . Skill 5.A . Recursion is much slower, though, as all these function calls cannot complete until it recurses onto the 0th Fibonacci number, then executing back all the way up the heap. This extreme use of memory, as well as having to call the function twice every time it runs, leads to slower execution than iteration. This is seen by the time taken increasing as well. . Check if all are equal . // inspiration from https://stackoverflow.com/a/5503239 public static boolean areSame(long value, long... values) { for (long i: values) if(value != i) return false; return true; } . Skill 4.C . This code takes one value to check against, then a list of other values to check if they are all the same. This took inspiration from a stackexchange answer. A variable takes on the value of all the rest of the values, and an if statement checks if those values are equal to the original. If it is, it will return true, and in my program it tells you that it is true. .",
            "url": "https://supermengman.github.io/blog/jupyter/java/collegeboard/2022/09/20/Fibonacci.html",
            "relUrl": "/jupyter/java/collegeboard/2022/09/20/Fibonacci.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Collegeboard FRQ 01 2019",
            "content": "Q1. 2019 AP CSA FRQ . The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. . public class APCalendar { /** Returns true if year is a leap year and false otherwise */ private static boolean isLeapyear(int year) { /* implementation not shown */} /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 * */ public static int numberOfLeapYears(int year1, int year2) { /* to be implemented in part (a) */} /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * * Returns 1 for January 1 (month = 1, day = 1) of any year. * * Precondition: The date represented by month, day, year is a valid date. * */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. * * */ public static int dayOfWeek(int month, int day, int year) { /* to be implemented in part (b) */} // there may be instance variables, constructors, and other methods not shown. } . (a) numberOfLeapYears . Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. . In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise | . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. . /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 * */ public static int numberOfLeapYears(int year1, int year2) { int leapYearCount = 0; // variable to keep track of amount of leap years // for loop: set year to year1, and while it is not yet at year2, find out if leapyear or not for(int year = year1; year &lt;= year2; year++) { // check the year for if it is leap year if(isLeapYear(year)) { leapYearCount++; // increase count } } return leapYearCount; // return the integer for the count of leap years } . The approach I took was to make a loop to go through all the years between the two years, and check if it was a leap year. If it was, it would add one to the count of the leap year. As seen above, this is that pseudocode written in actual java. Comparing to the solution code, it is almost identitcal (with the variable names as the exception). . (b) dayOfWeek . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. . In order to calculate this value, two helper methods are provided for you. . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. | dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. | . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. * * */ public static int dayOfWeek(int month, int day, int year) { firstDay = firstDayOfYear(year); // store the day of the week of the first day dayAfterNew = dayOfYear(month, day, year); // store the number of days since new year (inclusive) return (firstDay + dayAfterNew - 1) % 7; // adds the day of the week to the days since new year, but minus 1 because the dayAfterNew includes the first day. then, mod 7 } . For this one, I initially began by trying to make a loop, and adding each day to the number of the firstDay day by day. I soon realized that was not the intended solution. . Instead, I set variables for the firstDay day of the week, and the days after the new year as dayAfterNew. Then, I returned the value of them added minus 1 to get some number, and modulus 7 to take the modulus (remainder). The remainder would be the day of the week, which is what is returned . Comparing to the answer, I see that the solution has the return value stored within another variable, so it is almost identitical. .",
            "url": "https://supermengman.github.io/blog/jupyter/java/collegeboard/frq/2022/09/16/FRQ-01.html",
            "relUrl": "/jupyter/java/collegeboard/frq/2022/09/16/FRQ-01.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Iteration with 2D Array",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _∀_/ &quot;, //[4][1] &quot; ==5== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, //Monkey 5 { &quot; ʕ•ᴥ•ʔ &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] } }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeys[row].length; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public void printPoemHorizontal() { System.out.println(); System.out.println(&quot;Monkey Jumpers Poem Horizontal in Java Loopy&quot;); int monkeyCount = monkeys.length; int row = 0; for (int i = monkeyCount; i &gt;= 1; i--) { System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); for (int col = 0; col &lt; monkeys[0].length; col++) { for (row = 0; row &lt; monkeyCount; row++) { System.out.print(monkeys[row][col] + &quot; &quot;); } System.out.println(); } System.out.println(); monkeyCount -= 1; } System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoemHorizontal(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem Horizontal in Java Loopy 6 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) ʕ•ᴥ•ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ _∀_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==5== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ _/ _ 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _∀_/ --0-- ++1++ &lt;-2-&gt; ==3== ==5== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . This code swaps out the rows and columns in the for loops, therefore printing all elements in the same row first (the head, then the body, etc). So, it prints the monkeys horizontally. . Object Oriented Monkeys + backwards . import java.util.ArrayList; /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkey: a 2D array of Monkey * As well as method to print the Poem */ class Monkey { //The area between class definition and the 1st method is where we keep data for object in Java private static ArrayList&lt;String[]&gt; monkeyList = new ArrayList&lt;String[]&gt;(); //2D Array: AP CSA Unit 8: 2D array of strings private String[] monkeyASCII; /** * Constructor initializes a 2D array of Monkey */ public Monkey(String[] monkeyASCII) { this.monkeyASCII = monkeyASCII; monkeyList.add(monkeyASCII); } /** * Loop and print monkey in array * ... repeat until you reach zero ... */ public static void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java with Objects!!!&quot;); // monkey (non-primitive) defined in constructor knows its length int monkeyCount = monkeyList.size(); for (int i = 1; i &lt;= monkeyCount; i++) //loops through 2D array length forwards { //this print statement shows current count of Monkey // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkey jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; i; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeyList.get(row).length; col++) { // prints specific part of the monkey from the column System.out.print(monkeyList.get(row)[col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;Too many monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { Monkey monkey0 = new Monkey(new String[]{ &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }); Monkey monkey1 = new Monkey(new String[]{ &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }); Monkey monkey2 = new Monkey(new String[]{ &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }); Monkey monkey3 = new Monkey(new String[]{ &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }); Monkey monkey4 = new Monkey(new String[]{ &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }); Monkey.printPoem(); //a new monkey list and output in one step } } Monkey.main(null); . Monkey Jumpers Poem in Java with Objects!!! 1 little monkey jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 2 little monkey jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ 3 little monkey jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 Too many monkeys jumping on the bed 0000000000000000000000000000000000 THE END . This code creates a constructor for a monkey, taking in a string array input to take as the ascii art and adding it to a 2D array. The print poem similarly iterates through this ArrayList like before, printing the monkeys as expected. This is more scalable as you can add more and more monkeys. . I also printed them backwards by swapping the conditions in the for loops, starting from monkeycount instead of 0. . Hacks (Mini-lab) . Build you own Jupyter Notebook. Feel free to use any ASCII art of your choice, there are some much better ones here. My little guys were made up out of my head while looking at unicode characters. . Print monkeys horizontally versus vertically. | Build more or entire rhyme for the &quot;Monkey Jumpers&quot; countdown poem | Add names or other properties to the monkeys | . In you notebook, illustrate or answer some of these questions. . Is this program in more of an Imperative Programming Style or OOP style? Explain. Observe variable assignments. | Is each Monkey an object? | Build an where the monkey is an object versus two-dimensional array. This would be leading into Unit 5 requirements. | . | Study loops and zero based counting Study two-dimensional (2D) array references | Explain different way you can access a 2D array | . | .",
            "url": "https://supermengman.github.io/blog/jupyter/java/minilab/2022/09/12/AP-iteration.html",
            "relUrl": "/jupyter/java/minilab/2022/09/12/AP-iteration.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "APCSA Week 3 Learning Log",
            "content": "Weekly Activities . This week in CSA, I learned about conditionals in Java: Conditionals . In addition, I also learned how to deploy onto AWS: EC2 . Reflecting on “Psychology and the Good Life” . One thing I really took away from the video is that our minds always lie to us about happiness. Sometimes, we think that we want so much more money than we need, when in the end it doesn’t satisfy our needs. We might think that making more connections, getting good grades will fulfill something in us, but that just isn’t the case all the time. . Laurie Santos gives really good points on how to be happier, one of which was to spend more time reaching out to the people that you want to maintain social connections too. Developing from this, thanking those who really helped you and showing gratitude is another way. I don’t feel as though I do that enough for people that I take help from for granted, especially from my mom and dad. . Moving away from social, savoring moments in our life will also add to our happiness. Instead of having an outsider perspective on our life, actually living in it and applying ourselves will make us happier. I think I also need to work on this. . Reflecting overall on the video, I realize that I need to take action for my own happiness. Often, I find myself offputting things that I want or need to do, even though I know I will be happier if I do them. Lack of motivation is still in my hands, so here are some goals that I want to strive towards: . limit the time I spend procrastinating on assignments to be happier at the end of the day | use my phone less when talking to friends | be grateful in my current position in life | thank my parents more often | reach out more to my friends instead of being the one being reached out to | .",
            "url": "https://supermengman.github.io/blog/markdown/logs/2022/09/11/AP-CSA-Week3.html",
            "relUrl": "/markdown/logs/2022/09/11/AP-CSA-Week3.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Boolean Expressions",
            "content": "If Statements . If . If is a conditional statement, meaning it will only execute code within the block if the statement is true. If the code executed within the condition returns true, then code will run. This code in the conditional can be very complex, or could even be a whole method call. It just needs to return true or false. . import java.util.Scanner; public class cheese { public static void main(String[] args) { Scanner yesNoScan = new Scanner(System.in); // scanner initiate String yesNo = yesNoScan.nextLine(); System.out.println(yesNo); // if statement: if matches yes, then say yes if (yesNo.matches(&quot;yes&quot;)) { System.out.println(&quot;yes!&quot;); } } } cheese.main(null); . yes yes! . As seen in this example, the program calls for user input. If the user inputs yes, the condition returns true, and the code block runs. The console will say &quot;yes!&quot; . If-else . If-else builds off of an if statement, but adds the else part. If the condition in the if statement is false, then the code in the else block will execute instead. The else does not have a conditional. . import java.util.Scanner; public class cheese { public static void main(String[] args) { Scanner yesNoScan = new Scanner(System.in); // scanner initiate String yesNo = yesNoScan.nextLine(); System.out.println(yesNo); // if statement: if matches yes, then say yes if (yesNo.matches(&quot;yes&quot;)) { System.out.println(&quot;yes!&quot;); } else { // if not yes, then print that System.out.println(&quot;not yes :(&quot;); } } } cheese.main(null); . nope not yes :( . As seen, when an input that isn&#39;t yes is entered, the &quot;not yes :(&quot; is triggered to run. . If-elseif-else . This code structure combines both if and else statements. If the first conditional under the if statement returns false, then it goes to the next part: else if. The else if does have a conditional, basically a second conditional to check if the first one is false. If that one is true, it will run the code, but if not, it goes to the next block. There can be an indefinite chain of elseifs, but they always run from top to bottom and the statement exits if one of them is true. If they all return false, the else statement at the end will execute the code if everything is false. . import java.util.Scanner; public class cheese { public static void main(String[] args) { Scanner yesNoScan = new Scanner(System.in); // scanner initiate String yesNo = yesNoScan.nextLine(); System.out.println(yesNo); // if statement: if matches yes, then say yes if (yesNo.matches(&quot;yes&quot;)) { System.out.println(&quot;yes!&quot;); } else if (yesNo.matches(&quot;no&quot;)) { // if no, then print System.out.println(&quot;no? :(&quot;); } else { // if not yes or no System.out.println(&quot;bruh u messed up&quot;); } } } cheese.main(null); . fdasdfagsa bruh u messed up . As seen above, when it is neither yes or no, it outpus the else block of code. . Switch Case . Sometimes, when you only need to test expressions matching only a single integer, value, or String, a Switch Case is the better option. It is similar to an if-elseif-elseif...-else chain, except it has less functionality. . In an if-elseif chain, each section has its own conditional. These conditionals can be extremely complex and do not have to relate to each other at all. However, in a switch case, the switch takes in an input, and then checks against the &quot;cases&quot;. Basically, the conditionals in all of the cases are only determining whether the input matches the set case. . For example, to match a string in if-elseif, it would look something like: . import java.util.Scanner; public class cheesePicker { public static void main(String[] args) { System.out.println(&quot;Type a type of cheese, and find out the best meat to pair it with: &quot;); Scanner cheeseScan = new Scanner(System.in); // scanner initiate String cheese = cheeseScan.nextLine(); System.out.println(cheese); // if statement: if matches types of cheese, say the sandwich if (cheese.matches(&quot;gouda&quot;)) { System.out.println(&quot;salami&quot;); } else if (cheese.matches(&quot;parmesan&quot;)) { System.out.println(&quot;prosciutto&quot;); } else if (cheese.matches(&quot;havarti&quot;)) { System.out.println(&quot;soppressata&quot;); } else if (cheese.matches(&quot;monterey jack&quot;)) { System.out.println(&quot;salami&quot;); } else if (cheese.matches(&quot;ricotta&quot;)) { System.out.println(&quot;ground beef&quot;); } else { System.out.println(&quot;search it up&quot;); } } } cheesePicker.main(null); . Type a type of cheese, and find out the best meat to pair it with: gouda salami . However, by using switch case, these conditionals can be made more readable as they are just matching strings: . import java.util.Scanner; public class cheesePickerCase { public static void main(String[] args) { System.out.println(&quot;Type a type of cheese, and find out the best meat to pair it with: &quot;); Scanner cheeseScan = new Scanner(System.in); // scanner initiate String cheese = cheeseScan.nextLine(); System.out.println(cheese); // switch case: take cheese as input, check against list of cheeses switch (cheese) { case &quot;gouda&quot;: System.out.println(&quot;salami&quot;); break; // break to get out of switch, so no default case case &quot;parmesan&quot;: System.out.println(&quot;prosciutto&quot;); break; case &quot;havarti&quot;: System.out.println(&quot;soppressata&quot;); break; case &quot;monterey jack&quot;: System.out.println(&quot;salami&quot;); break; case &quot;ricotta&quot;: System.out.println(&quot;ground beef&quot;); break; default: // case if nothing matches System.out.println(&quot;google it&quot;); } } } cheesePickerCase.main(null); . Type a type of cheese, and find out the best meat to pair it with: monterey jack salami . De Morgan&#39;s Law . These are laws named after Augustus De Morgan, a 19th C British Mathemetician. It uses the NOT operator, which takes precedent over AND and OR. It can be used to simplify expressions of true and false, and as boolean values are being compared in an if conditional, applying De Morgan&#39;s law to simplify a program&#39;s logic will be very helpful. . Overall, the idea is that: when distributing or factoring a negation from a boolean expression, the operators all switch. || changes to &amp;&amp; and vice versa. In addition, &lt; changes to =&gt;, and vice versa. PunApps AP Comp Sci . In addition: . &lt; becomes &gt;= | &gt; becomes &lt;= | == becomes != | &lt;= becomes &gt; | &gt;= becomes &lt; | != becomes == | . For example: . !(!A || !B) --&gt; A &amp;&amp; B . As you can see, the ! in the front propogates and distributes into the condition, negating the ! inside as well as changing the || (or) to &amp;&amp; (and). If you plug in the values, you will see that they equate to the same thing. It may not make intuitive sense exactly, but it is a proven law. . Seen below is an example of this law: . import java.util.Scanner; public class DeMorgan { // define variables public static String email = null; public static String username = null; public static String password = null; // take the input for the variables using scanner public static String inputDetails(String detail) { System.out.print(detail + &quot;: &quot;); Scanner detailScan = new Scanner(System.in); // scanner initiate String inputDetail = detailScan.nextLine(); System.out.println(inputDetail); detailScan.close(); return inputDetail; // return the input } public static void main(String[] args) { System.out.println(&quot;type your email, username, then password to sign up: &quot;); // take user input email = inputDetails(&quot;email&quot;); username = inputDetails(&quot;username&quot;); password = inputDetails(&quot;password&quot;); // conditional, if not all requirements met then throw error if (!(email != &quot;&quot; &amp;&amp; username != &quot;&quot; &amp;&amp; password != &quot;&quot;)) { throw new Error(&quot;Not all requirements are met&quot;); } } } DeMorgan.main(null); . type your email, username, then password to sign up: email: f username: d password: . java.lang.Error: Not all requirements are met at DeMorgan.main(#13:1) at .(#35:1) . As seen, it takes user input and checks if all of them have some sort of input. If they do not, the NOT operator turns that false into true for the conditional, throwing the error. In essence, it is saying that NOT all conditions are met. . import java.util.Scanner; public class DeMorgan { // define variables public static String email = null; public static String username = null; public static String password = null; public static String inputDetails(String detail) { System.out.print(detail + &quot;: &quot;); Scanner detailScan = new Scanner(System.in); // scanner initiate String inputDetail = detailScan.nextLine(); System.out.println(inputDetail); detailScan.close(); return inputDetail; } // take the input for the variables using scanner public static void main(String[] args) { System.out.println(&quot;type your email, username, then password to sign up: &quot;); // take user input email = inputDetails(&quot;email&quot;); username = inputDetails(&quot;username&quot;); password = inputDetails(&quot;password&quot;); // conditional with de morgans law applied if (email == &quot;&quot; || username == &quot;&quot; || password == &quot;&quot;) { throw new Error(&quot;Not all requirements are met&quot;); } } } DeMorgan.main(null); . type your email, username, then password to sign up: email: f username: d password: . java.lang.Error: Not all requirements are met at DeMorgan.main(#13:1) at .(#30:1) . After applying De Morgan&#39;s law and switching all of the comparators, such as != to == and &amp;&amp; to ||, the code becomes much more readable. It reads that if any one of the inputs are not filled in, then the condition is true and the error is thrown. In essence: if any of the inputs are empty, throw an error. As seen, it has the same output, so it demonstrates that the law is true. . Inspiration from Patrick Divine .",
            "url": "https://supermengman.github.io/blog/jupyter/java/collegeboard/2022/09/06/java-boolean-expressions.html",
            "relUrl": "/jupyter/java/collegeboard/2022/09/06/java-boolean-expressions.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Using Objects - Trajectory Calculator",
            "content": "Code . See the source code here or below: https://github.com/supermengman/using-objects/tree/main/src/main/java/com/hacks/trajectoryCalculator . TrajectoryGraph.java . package com.hacks.trajectoryCalculator; // maven build // import the graphs import org.jfree.data.function.Function2D; import org.jfree.data.general.*; import org.jfree.chart.ChartFactory; import org.jfree.chart.ChartPanel; import org.jfree.chart.JFreeChart; import org.jfree.chart.plot.PlotOrientation; import org.jfree.data.xy.XYDataset; // import the other files import com.hacks.trajectoryCalculator.*; // import swing and awt import javax.swing.JFrame; import java.awt.Dimension; public class TrajectoryGraph extends JFrame { // Constructor of the graph that will be displayed public TrajectoryGraph() { InputInitial newInputs = new InputInitial(); // start input object from separate file newInputs.spawnInputs(); // start the process of collecting user input drawGraph(InputInitial.initialVelocity, InputInitial.initialDegrees, InputInitial.initialHeight); // call method to draw the graph with the user input taken } // graph drawer public void drawGraph(double velocity, double degrees, double height) { Function2D test = new TrajectoryMath(velocity, degrees, height); // TrajectoryMath implements function2d, so use those values create new function2d object TrajectoryMath testGetter = new TrajectoryMath(velocity, degrees, height); // creates TrajectoryMath object from the other file to call custom methods XYDataset dataset = DatasetUtils.sampleFunction2D(test, 0.0, testGetter.getRoot(), 50, &quot;Function&quot;); // generates the dataset of xy values with the function final JFreeChart chart = ChartFactory.createXYLineChart(&quot;Trajectory Equation&quot;, &quot;X Position (meters)&quot;, &quot;Y Position (meters)&quot;, dataset, PlotOrientation.VERTICAL, true, true, false); // creates the actual graph with attributes // initializing the display ChartPanel cp = new ChartPanel(chart) { @Override public Dimension getPreferredSize() { return new Dimension(500, 500); // set initial dimension } }; // allow mouse wheel scrolling cp.setMouseWheelEnabled(true); add(cp); // Finalize the building of the graph setDefaultCloseOperation(EXIT_ON_CLOSE); pack(); } public static void main(String[] args) { // runs the creation of the graph with a queue in a different thread and posts the gui after events are processed java.awt.EventQueue.invokeLater(new Runnable() { @Override public void run() { // initialize new TrajectoryGraph object, setvisible to display the graph new TrajectoryGraph().setVisible(true); } }); } } . . TrajectoryMath.java . package com.hacks.trajectoryCalculator; import org.jfree.data.function.Function2D; /* * Actual math for calculating trajectory * * Calculates equation as a string and returns it * * */ public class TrajectoryMath implements Function2D { // Initialize variables private double velocity; private double degrees; private double height; private String equation; private double coefficientA; private double coefficientB; private double coefficientC; // Constructor public TrajectoryMath(double velocity, double degrees, double height) { this.velocity = velocity; this.degrees = degrees; this.height = height; this.calculateEquation(); } // Getters and setters public double getVelocity() { return this.velocity; } public double getDegrees() { return this.degrees; } public double getHeight() { return this.height; } public String getEquation() { return this.equation; } public double getCoefficientA() { return this.coefficientA; } public double getCoefficientB() { return this.coefficientB; } public double getCoefficientC() { return this.coefficientC; } public double getRoot() { double rootOne = (-this.coefficientB + Math.sqrt(Math.pow(coefficientB, 2) - 4 * (-this.coefficientC) * this.coefficientA)) / (2 * (-this.coefficientC)); double rootTwo = (-this.coefficientB - Math.sqrt(Math.pow(coefficientB, 2) - 4 * (-this.coefficientC) * this.coefficientA)) / (2 * (-this.coefficientC)); if (rootOne &gt; 0) { return rootOne; } else if (rootTwo &gt; 0) { return rootTwo; } else { return 0.0; } } public void setVelocity(double velocity) { this.velocity = velocity; } public void setDegrees(double degrees) { this.degrees = degrees; } public void setHeight(double height) { this.height = height; } // Array should be in order of velocity, degrees, and height public void setParameters(double[] values) { this.velocity = values[0]; this.degrees = values[1]; this.height = values[2]; } // Math for equation private void calculateEquation() { this.coefficientA = height; this.coefficientB = Math.tan(degrees * Math.PI/180); this.coefficientC = 9.8 / (2 * Math.pow(velocity, 2) * Math.pow(Math.cos(degrees * Math.PI/180), 2)); String precheckedEquation = &quot;y = &quot; + String.valueOf(coefficientA) + &quot; + &quot; + String.valueOf(coefficientB) + &quot;x - &quot; + String.valueOf(coefficientC) + &quot;x^2&quot;; // Fix double negative, but later //if (precheckedEquation.contains(&quot;- -&quot;)) { //} //Add threshold this.equation = precheckedEquation; } public double getValue(double v) { return coefficientA + coefficientB * v - coefficientC * Math.pow(v, 2); } /* * public static void main(String[] args) { TrajectoryMath example = new TrajectoryMath(15, 60, 4); System.out.println(example.getRoot()); } */ } . . InputInitial.java . package com.hacks.trajectoryCalculator; import javax.swing.JOptionPane; // library to display options import javax.swing.JTextField; // library to create a text field to render on GUI public class InputInitial { // instance variables to be used public static Double initialVelocity; public static Double initialDegrees; public static Double initialHeight; // create the GUI element that users input into public void spawnInputs() { // while the values have not changed yet, keep going (for error handling) while (initialVelocity == null || initialDegrees == null || initialHeight == null) { // text field initialization JTextField inputVelocity = new JTextField(); JTextField inputDegrees = new JTextField(); JTextField inputHeight = new JTextField(); // organizing the input text to display + the text field in object Object[] inputs = { &quot;Initial Velocity (m/s):&quot;, inputVelocity, &quot;Initial Degrees:&quot;, inputDegrees, &quot;Initial Height (m):&quot;, inputHeight }; JOptionPane.showConfirmDialog(null, inputs, &quot;Input the initial values for your object (numbers only):&quot;, JOptionPane.OK_CANCEL_OPTION); // creates the option menu with the 3 inputs // take the input, assign it to the public variables initialVelocity = parseInput(inputVelocity); initialDegrees = parseInput(inputDegrees); initialHeight = parseInput(inputHeight); } } // change JTextField into Double, also error handling public Double parseInput(JTextField inputValue) { String placeholder = inputValue.getText(); // get the string out of the input // error handling + edge cases try { double initialValue = Double.parseDouble(placeholder); // if negative, cannot be valid so throw error --&gt; reinput values bc still null if (initialValue &lt; 0.0) { JOptionPane.showMessageDialog(null, &quot;Inputs must be greater than 0&quot;, &quot;Invalid Input&quot;, JOptionPane.WARNING_MESSAGE); return null; } else { // if everything ok, return the value return initialValue; } } catch (Exception e) { // if cannot be cased as a double, throw error --&gt; reinput values JOptionPane.showMessageDialog(null, &quot;There was an invalid input for &quot; + placeholder + &quot;, please try again. &quot; + e, &quot;Unwanted Input&quot;, JOptionPane.WARNING_MESSAGE); return null; } } } . . Project Description . In this project, I worked with Bailey to create this program. The code is split into 3 files: one to draw the graph, one to gather user input, and one to calculate the trajectory equation. The overall code structure flows like so: . initialize TrajectoryGraph object, and call the user input method | the user inputs the initial velocity, initial height, and initial degrees into a JOptionsPane | the data is fed into the calculator, which returns height given a x value | the graph is initialized, and drawn using Function2D | the graph is then presented to the user as a GUI element | . Key Requirements . Using Math . getRoot() . public double getRoot() { double rootOne = (-this.coefficientB + Math.sqrt(Math.pow(coefficientB, 2) - 4 * (-this.coefficientC) * this.coefficientA)) / (2 * (-this.coefficientC)); double rootTwo = (-this.coefficientB - Math.sqrt(Math.pow(coefficientB, 2) - 4 * (-this.coefficientC) * this.coefficientA)) / (2 * (-this.coefficientC)); if (rootOne &gt; 0) { return rootOne; } else if (rootTwo &gt; 0) { return rootTwo; } else { return 0.0; } } . In this section from the TrajectoryMath.java file, the Math class is used to calculate the quadratic formula. This can be seen with the Math.sqrt(Math.pow(coefficientB, 2) - 4 * (-this.coefficientC) * this.coefficientA)), which uses the class methods of square root and exponents. . calculateEquation() . private void calculateEquation() { this.coefficientA = height; this.coefficientB = Math.tan(degrees * Math.PI/180); this.coefficientC = 9.8 / (2 * Math.pow(velocity, 2) * Math.pow(Math.cos(degrees * Math.PI/180), 2)); String precheckedEquation = &quot;y = &quot; + String.valueOf(coefficientA) + &quot; + &quot; + String.valueOf(coefficientB) + &quot;x - &quot; + String.valueOf(coefficientC) + &quot;x^2&quot;; // Fix double negative, but later //if (precheckedEquation.contains(&quot;- -&quot;)) { //} //Add threshold this.equation = precheckedEquation; } . In this section from the TrajectoryMath.java file, the Math class is used again to calculate coefficientC, with both exponent and using the trig function of cosine. . Different Constructor Signatures . // TrajectoryGraph.java public TrajectoryGraph() { InputInitial newInputs = new InputInitial(); // start input object from separate file newInputs.spawnInputs(); // start the process of collecting user input drawGraph(InputInitial.initialVelocity, InputInitial.initialDegrees, InputInitial.initialHeight); // call method to draw the graph with the user input taken } // TrajectoryMath.java public TrajectoryMath(double velocity, double degrees, double height) { this.velocity = velocity; this.degrees = degrees; this.height = height; this.calculateEquation(); } . As seen above, these are two different constructors from different files. One of them initiates a graph object, while the other is used to calculate the function to display. . Wrapper Class + Static Data . // InputInitial.java public static Double initialVelocity; public static Double initialDegrees; public static Double initialHeight; . The wrapper class of Double defines the static data of the initialValues used in InputInitial. I used the wrapper class in order to be able to use the default null value to do error handling, as without being a wrapper class the double has to be a number. . Example Outputs: . . Organization . Working as a Team . To complete this, me and my partner Bailey Say split up the work in order to be more efficient. Bailey worked on creating the TrajectoryMath.java file, which took care of getting and setting the variables to create the function. It also created the function itself, and he did research to find the formula to calculate a trajectory. . As for myself, I worked on getting GUI to display as well as creating dialog boxes for the user to input. For this, I worked on the TrajectoryGraph.java as well as InputInitial.java. I also worked on error handling in input, cutting off negative inputs as well as non double inputs. . In addition to working on GUI, I also attempted to use spring boot and maven to build the project. Even though I could not exactly figure out how to put it on a website, I at least resolved issues with building through maven. I learned that the package in front of the files has to correspond with the specific folder in order for maven to know what to import, and that allowed us to use these multiple files to run a single program. . Conclusion . Overall, this project helped me and Bailey to understand more about how projects in Java are built, having to figure out how to use tools like maven. It also allowed us to experiment with multi file java programs, finding out how calling methods from other files works as well as classes. In addition to being good learning for CSA, it also contributes to me and Bailey&#39;s experience in AP Physics. .",
            "url": "https://supermengman.github.io/blog/jupyter/java/pbl/2022/09/05/Using-Objects.html",
            "relUrl": "/jupyter/java/pbl/2022/09/05/Using-Objects.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "APCSA Week 2 Learning Log",
            "content": "Weekly Activities . This week in CSA, I completed code.org Unit 1, which consisted of learning about java object orientated program. To find out what I fully learned, check out my post: Code.org Unit 1 . In addition, I also used this knowledge of object orientated programming as well as using the math class to create a trajectory calculator. I collaborated on this with Bailey, which allowed me to have a better understanding of how collaborative programming works. Check out the full details here: Trajectory Calculator . Extras . In addition to doing these programs, I continued to organize my posts through tags. I added the trajectory calculator link to the PBL section, and the Code.org into the Collegeboard learning section for easier reference later. Find them here: Notes .",
            "url": "https://supermengman.github.io/blog/markdown/logs/2022/09/05/AP-CSA-Week2.html",
            "relUrl": "/markdown/logs/2022/09/05/AP-CSA-Week2.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Unit 1 Code.org learning",
            "content": "Classes . Java classes are the basic building block, like a template for objects of the class. A class is defined in its own .java file, and the name of the file has to match with the class name. . . A class can contain data (variables) and actions (methods). It can also extend functionality of another parent class, which will be discussed later in this blog. . Instances of classes . The instance of a class is an object. It is defined in it’s own java file, where attributes for the object instance can be set as well as methods for the object. . To instance a class as an object, first type the class name, then the object name, equals new class();. . . As seen in the image above, the Painter class has been instanced, and the Painter object was defined in a separate file. . Object Calling Methods . The class definition probably contains some sort of methods for the object, when instanced, to do. To call a function, first write the object instance name, a period, and then the method called. . For example: . Reader reader1 = new Reader(); // initiates new reader class instance called reader1 reader1.checkOutBook(bookName); // calls method checkOutBook with a given name . . As seen above, the object myPainter is also calling a method: move(). . Calling methods is extremely common in the realm of Java programming, and often takes on other actions like doing math calculations or displaying text. . Object Mutating Data . An object mutating data means that the object changes some sort of data. From last week, it can change the primitive data types plus the wrapper classes. However, it can also change the state of an object. This is not always a good thing, as it could change or break the program as well as increase memory usage. . Objects are reference type data. So, if you set another variable equal to that object and change some parameters, it automatically affects the original. . Sometimes that is what you want, changing the value of the object itself rather than having to make another object. . For example, the String object is immutable. To change the string, a new string object must be created: . String a = &quot;code code&quot; a = a.concat(&quot; code&quot;) // has to make new string a again instead of just appending . StringBuilder is mutable, so the methods can just change the object . StringBuilder a = new StringBuilder(&quot;code code&quot;) a.append(&quot; code&quot;) // has to make new string a again instead of just appending . Extends . As the name suggests, extends in java “extends” a class. The class created is inherited from another class, but more methods can be written in addition to the methods already in the original class. The attributes are also inherited. . The subclass is the class that inherits, while the superclass is the class being inherited from. . To extend, simply put extends and then the superclass. . super can also be used to refer to the superclass objects. Inside the class itself, super(); can be called in order to inherit all the original methods and attributes. . . As seen above, the PainterPlus class extends the Painter class, inheriting the attributes and methods with super. There is then a new method to turn right, being: . public void turnRight() { this.turnLeft(); this.turnLeft(); this.turnLeft(); } . This can then be called in the main function by initializing a PainterPlus instance, and calling the method to turnRight like so: . PainterPlus myPainterPlus = new PainterPlus(); myPainterPlus.turnRight(); . This can be taken further with more sophisticated methods. . Loops and Selection Statements . Like most programming languages, java also has while and if statements. . In a while loop, as long as the condition is true, the code will continue repeating until it is false. . . This snippet of code uses a while loop so when the painter is on the bucket, it will take the paint until there is no more bucket. . As for if statements, it usually comes in a pair of if and else. If the condition is met, some code will run. If not, then the code under the else block will run instead. It reads like english. . . This one combines both while and if. While the painter can move, and isn’t on a bucket, the painter will move. If it is not on a bucket, it will take paint, but once it cannot move, it will stop. . Final Product of Code.org . . Eventually, all these elements were combined to form a pattern in Lesson 14. A new class PatternPainter was created that extends Painter, and has methods to paint a checkerboard. The BackgroundPainter class was also created to extend Painter, and paint over any non-painted tiles. Finally, these were put together to form the final product. . Console vs GUI vs Code.org . There are many ways to interface with code, these three are all ways to do that. . With console, the inputs and outputs of the program are mainly done through text. In other words, it’s like typing into a text terminal to get things done. An example of this is Mr Morts console menu that allows users to choose some output to display. . With GUI, the inputs and outputs are not displayed as text in a terminal, but instead is usually displayed as a window. This could be better for users to interface with, as the display is more clear. However, it may be more complicated to program. . With code.org, it is basically a specialized IDE. The classes and methods such as the Painter interface directly with the output, which is a canvas with a painter painting. The code that is in the files doesn’t exactly show the behind the scenes drawing, but instead provides an easier way to interface with that output such as with turnLeft() just turning left. . Overall, console menus are used more for backend development and testing, GUI for the end user, and code.org just for learning. .",
            "url": "https://supermengman.github.io/blog/markdown/code.org/collegeboard/2022/09/04/Unit-1-Code-org.html",
            "relUrl": "/markdown/code.org/collegeboard/2022/09/04/Unit-1-Code-org.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Terms To Know Rhetorical Devices",
            "content": "Develop an understanding of the following concepts. Your understanding will be fuller if you go beyond definitions. Take notes as you develop this understanding. You may want to organize your notes in a chart with columns for definitions, examples and typical rhetorical effects, where applicable . Diction . Word Definition Examples Typical Rhetorical Effects . High/formal | Where sophisticated language is used, without slang or colloquialism . Complex syntax of sentence, usually in business doc . | . | “Thank you for accepting me into your institution. It would be an honor to attend and participate in this prestigious event.” | Usually makes author sound intelligent, appeals to the audience’s intelligence . Also makes author sound credible, makes readers trust the author . Formality lends a serious feeling too . | . Middle/moderate | Not formal or informal, but a middling diction that can be applied to a broad audience . The way educated people talk . | . | “Thank you for letting me join you in your lab. I look forward to seeing you again.” | Overall has a sense of indifference or neutrality. Makes readers feel familiar with the type of speech, but still distant with somewhat “formal” structure | . Low/informal | Conversational or narrative, like how real people communicate in real life . Especially used in social media or texts . | . | “Thanks man. See ya later.” | More friendly feeling, as well as realistic and easygoing | . Abstract | When words are used to express something intangible (idea or emotion) . Not detailed or specific . | . | “Falling in love is pleasing, unique, and beautiful” | Sounds lofty, hard to understand because it cannot be expressed by words | . Concrete | Words that have literal meanings and refer to things that appeal to senses . Not open to interpretation . | . | “I ate an apple” | Full commitment to the details, and full trust in the author for providing concrete details | . Colloquial | Conversational speech that uses informal words . Words specifically represent a place or time . | . | “Y’all have yourselves a good day folks!” | Fills in the setting of a plot possibly, with colloquial speech filling in background info . Very informal, so friendly as well . | . Monosyllabic | Choosing one syllable words specifically | “sad” | Short could have the effect of being simple, very direct at conveying to the reader | . Polysyllabic | Choosing words with many syllables | “melancholy” | More complex words convey more complex meanings to the reader, also sounds more intelligent at times | . Connotation | Feelings or associations that are attached to a word, not necessarily the definition | “Blue” is a color, but also connotated as sadness | Influence readers to draw on past experiences, and also more concise way to describe something for the author. | . Syntax . Word Definition Examples Typical Rhetorical Effects . Simple | Subject + verb + direct object . Only one independent clause, subject-verb structure . | . | The girl ran. . The sky is pink. . I like food. . | Very simple, so childlike tone? | . Compound | Two or more independent clauses with a coordinating conjunction (but, or, so) | I went to the park, but Sarah stayed at home. | With a lot of info, could overwhelm reader . Also equal importance of each clause . Relationship shown through the conjunction . | . Complex | Independent clause + dependent clause . Between with subordinating conjunction (although, because, so that, until, etc” . | . | I like pizza, although it is a little unhealthy. | Forces reader to focus on one idea . More complicated thinking or logic, also more relationships with cause effect . More graceful, flowing sentences . | . Compound-complex | Two independent clauses w/ at least one subordinate/dependent clauses | I went to the park, but Sarah stayed at home because she had homework to do | More complex relationships, so more analytical and academic . More “credible” for writer . | . Declarative | A sentence that makes a statement, provides fact, explains, etc . Present tense . | Most common form . | . | My dog is sick. | Declares fact, so shows confidence in writer . Very clear for the reader, trust . | . Parallel Construction | Using same pattern of words in a sentence to show that both are same importance . Usually uses coordinating conjunctions (and/or) . | Can be with verbs, clause structure, lists, etc . | . | I like hiking, biking, and running. | Adds clarity to the writing, because it is more readable with repeating areas . Establishes relationship between things and ideas, compare/contrast . Equal importance of things . | . Tone . Word Definition Examples Typical Rhetorical Effects . Tone | The mood implied by an author’s word choice, evoking emotion . Also reveals author’s attitude to a topic . | . | Thanks for inviting me! (appreciative tone) | Conveys to the reader the attitude of the writer towards the subject . Influences the intention and meaning of the words read by the reader, and sets them into a certain mood . | . What kind of adjectives describe tone? . Nostalgic . | Happy . | Joyful . | Regretful . | Dry . | Passive . | Neutral . | Ironic . | Inspirational . | Fearful . | Anticipating . | Angry . | Playful . | Sarcastic . | Pessimistic . | Humorous . | Lighthearted . | Assertive . The type of adjective is mostly just that describing emotion or writing . | . | . What creates tone? . Usually through word choice (diction) . Use of personal pronouns (puts a call onto the reader) . | Colloquialism is informal tone, personal connection . | Imagery, figurative language for formal, imaginative tone . | . | Sentence construction (syntax) . Punctuation (less is usually more casual) . | . | In fiction: the viewpoint of the character/context . | Consistency to convey strong feelings . | . The Appeals . Word Definition Examples Typical Rhetorical Effects . Logos | Appealing to the logic of audience . Uses facts, data, stats . | How well writer argues a point . | . | One in five women experience sexual assault in college | Appeals to logic, so leads to emotional response like sympathy, anger, etc . Also makes the argument strong, defensible . | . Ethos | Appeals to authority to persuade audience . Convince of reputation, virtue, intelligence, qualifications . | Can be both of author or of a quote . | . | Multiple dermatologists have backed this skin healing cream | Gives author credibility . Builds trust with audience . Audience will feel that the author is “right” due to the qualifications . | . Pathos | Evoke emotions in the audience . words like imagery . | Also context of audience’s beliefs and values . | Word choice, language, stories . | . | “If we don’t move soon, we’re all going to die!” . Feel nervous . | . | Persuades an audience through the emotions . Helps audience to be further intertwined with the argument, feeling the emotions . | . Rhetorical Situation . Word Definition Examples Typical Rhetorical Effects . Exigence | The reason why there is the rhetorical discourse . A problem, issue, situation that makes one write a message . | . | A defense attorney defends the client’s innocence . The exigence: it is the attorney’s job to keep the client fair . | . | Determines the mood of the piece, what the message or topic the reader is going to see | . Audience | Recipient of the communication . Has personal experiences, that may affect their view on the author/context . | . | Ex: the listeners to MLK Jr “I have a dream” speech . Mostly black people, but also white perspectives . | . | Depends on the audience how they interpret the rhetoric | . Speaker | The writer/person who communicates to others . Has individual background, with age, gender, location, etc all influencing . | Changes way they use rhetoric . | . | Ex: Joe Biden in his campaign speech . Specific ideals as an older man, as well as a democrat . | . | Depends on the speaker, so it changes based on audience’s interpretation of the speaker itself | . Occasion | The circumstances of the text: . Where, when, why, how, etc was written . | Changes language used . | Also where the audience hears it, with context . | . | MLK’s speech, in a public setting with many listening. Also in the time of segregation and unfair laws made against Black people | Sways audience’s opinion on something, and the level of understanding or connection they have | . Purpose | Why the author creates the message and why the audience will accept/not accept it . Usually to inform, instruct, persuade . | Purpose for audience is to be informed, to be entertained, etc (takeaway something) . | . Overall the intended outcome for the piece . | An advertisement to quit smoking with their medication: . Purpose is for the audience to buy their medicine to stop smoking . | . | Usually convinces the audience to learn or do something that the author wants to do | . Message | The big idea that the author tries to tell the reader . Not like purpose, because this is the concrete part . | The true idea of what they want to “persuade”, “entertain”, etc . | . | The message behind MLK’s “I Have a Dream” speech is to end segregation to usher in a new age of equality for all in America | Touches the readers if they are accepting, can be heartfelt or angry, depends on the message still | . Claim . Definition: the main argument of an essay . Defines the purpose, direction, goals of the paper; must have evidence . | Also need to argue a point, and a good one is focused and specific . | Can be debated or challenged to be a claim . | Nuanced, complex, specific, detailed . Cannot support with “opinion”, majority, tradition, morality . | Need specific reasons inside the claim . | . | . Examples: . Although both smartphones and laptops are used for productive work, laptops is overall a better fit for professional workloads due to its larger size, relatively faster speed, and wider support for accessories. . | . Rhetorical Effects . Notifies the reader what the point or idea of the paper is . | . Evidence . Facts and supporting pieces of information that supports the thesis and claim . | Should be relevant to the claim, and smoothly integrated/analyzed . | Must be explained to how it supports the argument . | . What is the purpose of evidence? . Needs to convince reader of the validity of the argument . | Persuade the reader to accept claims by connecting supporting evidence for the claim . | Supports, tests, or refines the thesis . | Makes the writing more convincing as the opinions would be supported . | . What can serve as evidence? . Books, authors, people (speeches), etc . | Primary source (documents, photos, interviews) and secondary (interpreted information) . | Found online, also in real life (observing the world), surveys, experiments, personal experience . | Statistics, data, charts, etc . | . Rhetorical and Literary Strategies . Word Definition Examples Typical Rhetorical Effects . allusion | implied/indirect reference to person, event, thing or another text . Helps add a lot of meaning/significance in short phrase . | Needs to be interpreted by reader . | . Can be casual (not integral to plot), single, etc . | Fried chicken is my achilles heel. . Alluding to achilles, who has a weak spot there . | . | Used to build trust with readers, as there is a common base of knowledge . Also can disclose plot, give context, exposition . | Help compare characters . | . Gives work a deeper meaning, stimulate reader . | . Rhetorical questions | A question that does not expect an answer . Could be obvious, or answered later . | Might add emphasis . | . Often used after a comment, might be the opposite . | Did you hear me? You need to pay attention. | Persuasive, gets the response the author wants from an audience . Also dramatic/comedic . Adds emphasis to a point . | . Pronoun usage | Words that stand in for nouns, to be specific/refer back to another noun . Singular w/ I, me, he, she, etc . | Plural w/ they, them, we . | . Personal pronouns are for people . Needs to agree in number, in person (first, second, third), refer to a specific noun . | I want to have my own computer. | Repetition of a certain pronoun (like a singular I) could represent things like self-centeredness . Also more intimate with the reader, directly points to a noun . Cuts down repetition, makes text enjoyable to read . | . Selection of detail | The details the author reveals to help add to the dominant impression . Anything the author shares is what they choose to share, so it must be important . | . Which things the author decides to put into writing, as well as which things they didn’t describe . | Depends on the writing? Needs a lot of context | Conveys to the reader what is important in the text . Focuses the text onto something important . | . juxtaposition | Two things put together with contrasting effect . Fleshes out a character, explores nuances in an idea, create humor, etc . | . Putting two things side by side to create ironic contrast, but is implied comparison . | Light and darkness . Wealth and poverty (George Grosz Gray Day) . | Creates humor . dramatic/ironic contrast . Reader has to infer, discern the differences/similarities . More profound understanding of this contrast . | . Use of absolutes (all, none, etc) | Words that go to the extreme . Completely all in or all out (already used the all) . | . | This is a never before seen cake recipe. | Used to exaggerate and emphasize points . Go beyond the true meaning, doesn’t actually mean the absolute part . | . Often more casual, as one cannot make assumptions that absolutely . | . Point of view | The writers perspective, the eye through which we see the story (first, second, or third) . First: I, me, we, our, etc (inside the author, sees and feels with the author) . | Second: You, the author directly addresses you and makes YOU part of the action . | Third: she, he, it, them, etc; all seeing and all knowing, sees/feels all characters and the whole scene . | . | First: I fell onto the ground, writhing in pain. . Second: You need to cut distractions in order to be productive. . Third: His brain was working at a million miles per hour, while everybody stared at him in awe. . | First: very intense emotions, as inside the character . Second: direct address to audience, so feels like a direct connection . Third: very informative to the reader, also feels smart/objective (omniscient) . | .",
            "url": "https://supermengman.github.io/blog/2022/08/29/Terms-to-Know-Rhetorical-Devices.html",
            "relUrl": "/2022/08/29/Terms-to-Know-Rhetorical-Devices.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "APCSA Week 1 Learning Log",
            "content": "Weekly Activities . This week in CSA, I reviewed concepts of bash as well as commands in bash that could help check versions and the installation of tools. I also refreshed my knowledge of the conditional statement in bash, like if statements, overall helping me review programming logic. . In addition to bash, I also learned basic Java syntax and programming through code.org. A class in java is like a template for objects, and there are objects that are created from the class. These objects can have methods (that execute code), and attributes. . This java learning was further enhanced by learning about primitive data types, and I did extra research on the wrapper classes as well. I then made a program to convert between SI units, using these primitive data types as well as utilizing the methods in OOP. . Plans for the Future of This Class . As we will be learning the 10 collegeboard units, I will capture this information by making a post for each, organizing them by the number as well as tagging them. I will put their links as I go along into the notes section of the website, so I don’t lose track. . . I will also blog my weekly adventures in this class as to better remember the course material I have reviewed. For example, this blog itself is helping to consolidate my knowledge of java and bash already. . Finally, I will tag all posts with the appropriate learning, with the collegeboard units once we start or the PBL learning. .",
            "url": "https://supermengman.github.io/blog/markdown/logs/2022/08/28/AP-CSA-Week1.html",
            "relUrl": "/markdown/logs/2022/08/28/AP-CSA-Week1.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Primitive Data Types",
            "content": "Data Types . Primitives . int: aka integer, holds non-fractional number values | byte: similar to int, but only takes 8 bits of memory (only numbers rom -128 to 127) | short: in between an int and a byte | long: larger than an int | float: basic fractional numbers, which loses precision after 6 decimal places | double: it is a double-precision decimal number, with 64 bits of memory. It can go to further decimal places with higher precision. | boolean: only two values of true or false. | char: an integer that represents a unicode encoded character. | . int x = 12425; byte b = 40; short s = 10452; long l = 81849583; float f = 6.4224f; double d = 5.42624574367345; boolean b = false; char c = &#39;a&#39;; . Wrapper class . Primitive data types also have a class in Java that &quot;wrap&quot; the class. . Integer wraps int | Byte wraps byte | Short wraps short | Long wraps long | Float wraps float | Double wraps double | Boolean wraps boolean | Character wraps char | . Wrapper classes are used when working with collections, or putting the data into an ArrayList or other data structures. Methods can also be called on wrapper classes, with an example being toString(). . Integer exampleInt = 10; // defining variable with wrapper class System.out.println(exampleInt); // printing the variable value System.out.println(exampleInt.intValue()); // using the method to get the value in the object . 10 10 . Strings are a special wrapper class, being a sequence of characters or a character array. . String exampleString = &quot;hello world&quot;; System.out.println(exampleString + &quot;!&quot;); . hello world! . Hacks . SI unit converter . import java.util.Scanner; import java.util.Arrays; public class UnitConvertor { double[] conversionFactors = new double[]{0.001, 0.01, 0.1, 1, 10, 100, 1000}; // the conversion factors with meters as a reference, has decimals so double String[] unitList = {&quot;millimeter&quot;, &quot;centimeter&quot;, &quot;decimeter&quot;, &quot;meter&quot;, &quot;decameter&quot;, &quot;hectometer&quot;, &quot;kilometer&quot;}; // the units themselves, so a string to match public static double inputMeasurement; // below are the global variables that get called later, double here as the measurement is going to be a number with possible decimals public static String inputUnits; // the unit name, so string public static int unitIndex; // this is used to store the index of the unit that is typed, which is an integer public static String unitMessage = &quot;Enter the units for that measurement (millimeter, centimeter, decimeter, meter, decameter, hectometer, kilometer), type exit to exit: &quot;; // message that can change int firstUnitIndex; // index is integer int secondUnitIndex; // index is integer private String firstUnit; // the name of unit so String private String secondUnit; // name of unit so string // constructor, calls the functions to enter the fields of data and saves them as attributes public UnitConvertor() { this.enterMeasurement(); this.enterUnits(); this.firstUnitIndex = unitIndex; this.firstUnit = inputUnits; unitMessage = &quot;Enter the units to convert to (millimeter, centimeter, decimeter, meter, decameter, hectometer, kilometer), type exit to exit: &quot;; this.enterUnits(); this.secondUnitIndex = unitIndex; this.secondUnit = inputUnits; } // method to check if string matches exit, booleon because yes or no (takes string as input as it has to compare to the string) private boolean isExit(String inputMeasurement) { return inputMeasurement.matches(&quot;exit&quot;); } // enterMeasurement input method, with scanner private void enterMeasurement() { Scanner measurement; while (true) { System.out.print(&quot;Enter the first measurement (only numbers), type any letter to exit: &quot;); measurement = new Scanner(System.in); try { inputMeasurement = measurement.nextDouble(); System.out.println(inputMeasurement); measurement.close(); break; // breaks the loop, continues on with program } catch (Exception e) { System.out.println(&quot;See you later!&quot;); System.exit(0); // end program if not a number } } } // enterUnits method with scanner, checks the input and matches the string public void enterUnits() { Scanner units; while (true) { System.out.print(unitMessage); // prints the message (which changes because it has to be called twice for different purposes) units = new Scanner(System.in); try { inputUnits = units.nextLine(); System.out.println(inputUnits); if (isExit(inputUnits)) { // check if user wants to stop program, then exits System.out.println(&quot;See you next time!&quot;); System.exit(0); } unitIndex = Arrays.asList(unitList).indexOf(inputUnits); // find index of the unit that the user inputted in the array, write to variable unitIndex to be stored later if (unitIndex == -1) { // if not found in the array, then ask user to retype System.out.println(&quot;not a valid unit choice &quot;); } else { break; // if is found in array, stop the loop and continue } } catch (Exception e) { System.out.println(&quot;Not a valid string, &quot; + e); } units.close(); } } // calculation of the unit change, divides the conversion factors like in dimensional analysis; returns double because the initial inputMeasurement is a double public double changeCalculation() { return (inputMeasurement * conversionFactors[this.firstUnitIndex]/conversionFactors[this.secondUnitIndex]); } // asks user if they want to add a number onto their converted measurement public void add() { Scanner yesOrNo; while (true) { System.out.print(&quot;Would you like to add by another number of the same unit? (y/n) &quot;); yesOrNo = new Scanner(System.in); try { String roundYN = yesOrNo.nextLine(); // asks user input for y/n System.out.println(roundYN); if (roundYN.matches(&quot;n&quot;)) { // if no, skip over adding yesOrNo.close(); break; } else if (roundYN.matches(&quot;y&quot;)) { // if yes, create another scanner to ask for the number Scanner adding; while (true) { System.out.print(&quot;enter the number to add: &quot;); adding = new Scanner(System.in); try { double addInput = adding.nextDouble(); // gets user input, as a double because the number inputted can have decimals as a measurement System.out.println(addInput); adding.close(); double finalCalculation = this.changeCalculation(); // gets the value of the original converted measurement, which is a double and writes to variable finalCalculation += addInput; // compound assignment operator, adds the user input to the converted measurement quickly System.out.println(finalCalculation + &quot; &quot; + this.secondUnit + &quot;s.&quot;); // print the added number break; } catch (Exception e) { System.out.println(&quot;Not a double, &quot; + e); } } } else { // if not yes or no, tells user to redo System.out.println(&quot;not a valid input&quot;); } } catch (Exception e) { System.out.println(&quot;Not a valid string, &quot; + e); } yesOrNo.close(); } } // truncate the number if user wants to (whole number) private void truncating() { Scanner yesOrNo; while (true) { // asks user if wants to truncate or exit System.out.print(&quot;Would you like to truncate to the nearest whole number? (y/exit) &quot;); yesOrNo = new Scanner(System.in); try { String roundYN = yesOrNo.nextLine(); System.out.println(roundYN); if (isExit(roundYN)) { // if user types exit, the program completes System.out.println(&quot;See you next time!&quot;); yesOrNo.close(); System.exit(0); } else if (roundYN.matches(&quot;y&quot;)) { // if user says y, truncates int truncatedConversion = (int)this.changeCalculation(); // casts the calculation into an int, truncating it to whole number System.out.println(truncatedConversion + &quot; &quot; + this.secondUnit + &quot;s.&quot;); yesOrNo.close(); break; } else { System.out.println(&quot;not a valid input&quot;); // tells user to type valid input } } catch (Exception e) { System.out.println(&quot;Not a valid string, &quot; + e); } yesOrNo.close(); } } // static main method, creates object converting and outputs the conversion + calls the add or truncate methods in addition public static void main(String[] args) { UnitConvertor converting = new UnitConvertor(); System.out.println(&quot;Your measurement of &quot; + inputMeasurement + &quot; &quot; + converting.firstUnit + &quot;s&quot; + &quot; is &quot; + converting.changeCalculation() + &quot; &quot; + converting.secondUnit + &quot;s.&quot;); converting.add(); converting.truncating(); } } UnitConvertor.main(null); . Enter the first measurement (only numbers), type exit to exit: 56.32 Enter the units for that measurement (millimeter, centimeter, decimeter, meter, decameter, hectometer, kilometer), type exit to exit: meter Enter the units to convert to (millimeter, centimeter, decimeter, meter, decameter, hectometer, kilometer), type exit to exit: decimeter Your measurement of 56.32 meters is 563.1999999999999 decimeters. Would you like to add by another number of the same unit? (y/n) y enter the number to add: 67.53 630.7299999999999 decimeters. Would you like to add by another number of the same unit? (y/n) n Would you like to truncate to the nearest whole number? (y/exit) 7 not a valid input Would you like to truncate to the nearest whole number? (y/exit) y 563 decimeters. .",
            "url": "https://supermengman.github.io/blog/jupyter/java/2022/08/27/Java-primitives.html",
            "relUrl": "/jupyter/java/2022/08/27/Java-primitives.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Bash Learning",
            "content": "Bash script to verify project directories and projects . Initial setup to clone . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/bash_clone_test # change vscode to different name to test git clone export project=$testing_dir/blog # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/supermengman/blog&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Hello World! . Filesystem Management in Bash . cd, pwd, echo, ls . cd changes directory | pwd prints working directory | echo &quot;echoes&quot; lines into terminal | ls &quot;lists&quot; files in directories | . echo &quot;Navigate to project, then navigate to area where files were cloned&quot; cd $project # Changes Directory to the project pwd # outputs the current directory . echo &quot;&quot; # empty space echo &quot;list top level or root of files with project pulled from github&quot; ls # list . echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags . echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . echo &quot;&quot; echo &quot;list all files in long format recursively&quot; ls -Ral # all files and long listing . Moving through Linux Directories . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . Show contents of files . echo &quot;Navigate to project, then navigate to area where files were cloned&quot; cd $project echo &quot;show the contents of index.html&quot; echo &quot;&quot; cat index.html # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of index.html&quot; . Other additional bash commands . Commands for Permissions . chmod is the command used to change access permissions of files (allowing specific people to read, write, or execute files) permissions are in octal, meaning that a number 0-7 determines the permission for each part (usually there are 3 parts) part 1 (user): changes the permission for the user that owns the file | part 2 (group): changes the permission for the group that owns the file (such as administrator or sudo) | part 3 (others): changes the permission for all users | . | numbers in chmod correspond to the permissions, adding the numbers up results in the complete permission for that part 0 = no permissions, 1 = execute permission, 2 = write permission, 4 = read permission ex: a permission of 6 = 4 + 2 + 0 so only read and write permissions | . | . | . | chown is the command used to change ownership of files easier than chmod, just specify the user and the file | . | chgrp command used to change group that owns file similar syntax to chown | . | . cd $project chmod 644 README.md # changes permissions of the README file to 644, so owner can read and write, while the group and others can only read chown root README.md # changes owner of README.md to root chgrp sudo README.md # changes group that has access to README.md to sudo chown root:sudo README.md # does both owner and group at the same time . Filtering Commands . grep is a very useful command in linux, used to filter content inside files to find a specific match. grep can also be used to find a match in the output of a command. . grep &quot;the&quot; README.md # searches for and prints any matches of &quot;read&quot; in readme file grep -rl &quot;read&quot; $project # searches recursively through project directory for &quot;read&quot; while only listing filenames . find is a command similar to grep, but it matches filenames instead of the contents instead files or from outputs like grep does. . echo &quot;README files&quot; find $project -iname *README* # finds files in the project directory that have readme in the name echo &quot;&quot; echo &quot;jupyter notebook files&quot; find $project -iname *.ipynb # finds files in the project directory that have md as the file extension . Miscellaneous Commands . &quot;env&quot; shows environmental variables set in shell | &quot;sort&quot; sorts the output or contents of a file (can set specific flags) | &quot;head&quot;/&quot;tail&quot; outputs the first or last lines of a file | . Hacks . Possible bash automations: . Verifying Installation of Tools . This is a simple bash script (a file with .sh file extension) that checks if a package is installed and installs it based on user input. . while true; do read -r -p &quot;would you like to choose a package to check? [y/n] &quot; option # asks and reads input of user if they want to see if package is installed case $option in # uses input to see the results y) read -p &quot;Enter package to check: &quot; tools_verify # reads input for specific package if [[ $(apt list --installed $tools_verify 2&gt;/dev/null | tail -1) = *installed* ]]; then # checks if the tool is installed version_number=$(apt list --installed $tools_verify 2&gt;/dev/null | tail -1 | cut -d &quot; &quot; -f 2) # finds the version number echo &quot;$tools_verify is installed! The version number is $version_number.&quot; echo &quot;&quot; else while true; do read -r -p &quot;$tools_verify is not installed! Would you like to install? [y/n] &quot; install_option case $install_option in y) sudo apt-get install -y $tools_verify # installs the package version_number=$(apt list --installed $tools_verify 2&gt;/dev/null | tail -1 | cut -d &quot; &quot; -f 2) # finds the version number echo &quot;$tools_verify is installed! The version number is $version_number.&quot; echo &quot;&quot; break # returns back to main loop of package to check ;; n) echo &quot;alright then!&quot; break # returns back to main loop ;; *) echo &quot;Invalid Option&quot; ;; esac done fi ;; n) echo &quot;see you next time!&quot; break # ends the script ;; *) echo &quot;Invalid Option&quot; # throws user back to start of script ;; esac done . would you like to choose a package to check? [y/n] . Anaconda Verify Installation . if [[ $(conda --version) ]]; then condaversion=$(conda --version) echo &quot;$condaversion is installed!&quot; else echo &quot;Anaconda not installed!&quot; fi . conda 4.14.0 is installed! . Conda Verifiying Packages Installed . This code snippet checks if a package in conda is installed, and if not, installs it. . export conda_package=jupyter # can be any package if [[ $(conda list $conda_package | grep -w jupyter) = *$conda_package* ]]; then # matches package with list of installed packageversion=$(conda list $conda_package | grep -w jupyter | awk &#39;{print $2}&#39;) echo &quot;$conda_package is already installed! It&#39;s version is $packageversion.&quot; else echo &quot;$conda_package has not been installed, installing now.&quot; conda install $conda_package fi . jupyter is already installed! It&#39;s version is 1.0.0. . Java Verify Installation . if [[ $(java --version) ]]; then jdkversion=$(java --version | head -n 1) echo &quot;$jdkversion is installed!&quot; else echo &quot;Java not installed!&quot; fi # java compiler version check if [[ $(javac --version) ]]; then jcompilerversion=$(javac --version | head -n 1) echo &quot;$jcompilerversion is installed!&quot; else echo &quot;JavaC not installed!&quot; fi . openjdk 17.0.4 2022-07-19 is installed! javac 17.0.4 is installed! . Updating Repositories . export repository=blog # sets the repository to a specific one export repo_main_folder=vscode # where the repositories are stored cd $HOME/$repo_main_folder/$blog # moves into that directory git fetch origin # fetches any changes git pull origin master # updates the repo with new changes .",
            "url": "https://supermengman.github.io/blog/jupyter/bash/2022/08/22/bash-learning.html",
            "relUrl": "/jupyter/bash/2022/08/22/bash-learning.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "TT 1.0.0 Tools and Equipment",
            "content": "Hacks Part 1: Fastpages . link to personal Fastpages / GitHub pages running on github.io | link to a new page (_posts) in your Fastpages project with use of Markdown | link to Python Jupyter notebook (_notebooks) showing usage of Python | link to JavaJupyter notebook (_notebooks) showing usage of Java | . Capture image/screen capture of Fastpages project showing use of an Integrated Development Environment (VS Studio) . link to GitHub insights | . Hacks Part 2: Java Project . . Link to GitHub code commit for minor change | Seed: Fix for the dropdown menu in Birds page | Seed: Java 17 working | .",
            "url": "https://supermengman.github.io/blog/markdown/2022/08/21/Tools-and-Equipment.html",
            "relUrl": "/markdown/2022/08/21/Tools-and-Equipment.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Java Jupyter notebook",
            "content": "Code . public class hello { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } hello.main(null); . Hello World! .",
            "url": "https://supermengman.github.io/blog/jupyter/java/2022/08/19/java-jupyter-test.html",
            "relUrl": "/jupyter/java/2022/08/19/java-jupyter-test.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Python Jupyter notebook",
            "content": "Code . print(&#39;Hello&#39;) . Hello .",
            "url": "https://supermengman.github.io/blog/jupyter/python/2022/08/18/python-jupyter-test.html",
            "relUrl": "/jupyter/python/2022/08/18/python-jupyter-test.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Fastpages Post with Markdown",
            "content": "My First Post! . This post explores my (Andrew’s) journey through markdown syntax. . Basic . This section shows usage of markdown, with italics and bold text. . this is a quote block . List . this is a numbered list | this is the second item | this is an unordered list | this is the second item | . Code . this is a code block that is multiline . print(&quot;hello world!&quot;) . Tables . Type of text examples . strikethrough text | example | . hyperlink | google | . Hi . Now that the introduction is done, it’s time to code!!! .",
            "url": "https://supermengman.github.io/blog/markdown/2022/08/18/My-First-Post.html",
            "relUrl": "/markdown/2022/08/18/My-First-Post.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://supermengman.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post46": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://supermengman.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://supermengman.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Notes",
          "content": "Collegeboard Units: . Unit 1: Primitive Types, Student Lesson | Unit 2: Using Objects: code.org unit 1, Trajectory Calculator Project, Student Lesson | Unit 3: Boolean Expressions and if statements: notes, Student Lesson | Unit 4: Iteration: Monkey Code | Unit 5: Writing Classes: Fibonacci, Student Lesson | Unit 6: Array: Student Lesson | Unit 7: ArrayList | Unit 8: 2D Array | Unit 9: Inheritance | Unit 10: Recursion | . PBL: . Trajectory Calculator Project 9/4/2022 | Vocab . Scrum Master: facilitates the sprint, tracking issues, maintains scrum boards . DevOps: combination of tools, philosophies, and practice to increase the ability of a team to deploy and deliver applications . Frontend: builds what the user sees . Backend: maintains the things the suer cannot see (data storage, security, etc) . Sprint: time period where a group does development work .",
          "url": "https://supermengman.github.io/blog/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://supermengman.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}